100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.0 1993/06/10 13:27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.1 1993/06/10 13:27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.-1 1993/06/10 13:27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.((14)+1) 1993/06/10 13:27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.((14)-1) 1993/06/10 13:27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 0/06/10 13:27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1/06/10 13:27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 -1/06/10 13:27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 ((1993)+1)/06/10 13:27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 ((1993)-1)/06/10 13:27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/0/10 13:27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/1/10 13:27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/-1/10 13:27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/((06)+1)/10 13:27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/((06)-1)/10 13:27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/06/0 13:27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/06/1 13:27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/06/-1 13:27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/06/((10)+1) 13:27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/06/((10)-1) 13:27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/06/10 0:27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/06/10 1:27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/06/10 -1:27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/06/10 ((13)+1):27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/06/10 ((13)-1):27:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/06/10 13:0:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/06/10 13:1:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/06/10 13:-1:04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/06/10 13:((27)+1):04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/06/10 13:((27)-1):04 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/06/10 13:27:0 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/06/10 13:27:1 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/06/10 13:27:-1 jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/06/10 13:27:((04)+1) jloup Exp $";
100: /* MUTANT (rep_const) */static char rcsid[] = "$Id: inflate.c,v 0.14 1993/06/10 13:27:((04)-1) jloup Exp $";
122: /* MUTANT (del_stmt) */ /*   uch e; */                 /* number of extra bits or operation */
123: /* MUTANT (del_stmt) */ /*   uch b; */                 /* number of bits in this code or subcode */
125: /* MUTANT (del_stmt) */ /*     ush n; */               /* literal, length base, or distance base */
126: /* MUTANT (del_stmt) */ /*     struct huft *t; */      /* pointer to next level of table */
127: /* MUTANT (del_stmt) */ /*   } v; */ 
128: /* MUTANT (del_stmt) */ /* }; */ 
134: /* MUTANT (del_stmt) */ /* int huft_free OF((struct huft *)); */ 
135: /* MUTANT (del_stmt) */ /* int inflate_codes OF((struct huft *, struct huft *, int, int)); */ 
136: /* MUTANT (del_stmt) */ /* int inflate_stored OF((void)); */ 
137: /* MUTANT (del_stmt) */ /* int inflate_fixed OF((void)); */ 
138: /* MUTANT (del_stmt) */ /* int inflate_dynamic OF((void)); */ 
139: /* MUTANT (del_stmt) */ /* int inflate_block OF((int *)); */ 
140: /* MUTANT (del_stmt) */ /* int inflate OF((void)); */ 
157: /* MUTANT (del_stmt) */ /*         16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15}; */ 
157: /* MUTANT (rep_const) */        0, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        1, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        -1, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        ((16)+1), 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        ((16)-1), 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 0, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 1, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, -1, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, ((17)+1), 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, ((17)-1), 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 0, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 1, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, -1, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, ((18)+1), 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, ((18)-1), 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 1, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, -1, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 0, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 1, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, -1, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, ((8)+1), 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, ((8)-1), 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 0, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 1, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, -1, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, ((7)+1), 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, ((7)-1), 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 0, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 1, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, -1, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, ((9)+1), 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, ((9)-1), 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 0, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 1, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, -1, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, ((6)+1), 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, ((6)-1), 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 0, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 1, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, -1, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, ((10)+1), 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, ((10)-1), 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 0, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 1, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, -1, 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, ((5)+1), 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, ((5)-1), 11, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 0, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 1, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, -1, 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, ((11)+1), 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, ((11)-1), 4, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 0, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 1, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, -1, 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, ((4)+1), 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, ((4)-1), 12, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 0, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 1, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, -1, 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, ((12)+1), 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, ((12)-1), 3, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 0, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 1, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, -1, 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, ((3)+1), 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, ((3)-1), 13, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 0, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 1, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, -1, 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, ((13)+1), 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, ((13)-1), 2, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 0, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 1, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, -1, 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, ((2)+1), 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, ((2)-1), 14, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 0, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 1, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, -1, 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, ((14)+1), 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, ((14)-1), 1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 0, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, -1, 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, ((1)+1), 15};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 0};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 1};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, -1};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, ((15)+1)};
157: /* MUTANT (rep_const) */        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, ((15)-1)};
159: /* MUTANT (rep_const) */        0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        1, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        -1, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        ((3)+1), 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        ((3)-1), 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 0, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 1, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, -1, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, ((4)+1), 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, ((4)-1), 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 0, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 1, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, -1, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, ((5)+1), 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, ((5)-1), 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 0, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 1, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, -1, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, ((6)+1), 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, ((6)-1), 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 0, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 1, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, -1, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, ((7)+1), 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, ((7)-1), 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 0, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 1, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, -1, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, ((8)+1), 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, ((8)-1), 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 0, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 1, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, -1, 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, ((9)+1), 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, ((9)-1), 10, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 0, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 1, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, -1, 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, ((10)+1), 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, ((10)-1), 11, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 0, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 1, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, -1, 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, ((11)+1), 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, ((11)-1), 13, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, -1, 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, ((13)+1), 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, ((13)-1), 15, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 0, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 1, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, -1, 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, ((15)+1), 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, ((15)-1), 17, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 0, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 1, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, -1, 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, ((17)+1), 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, ((17)-1), 19, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 0, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 1, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, -1, 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, ((19)+1), 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, ((19)-1), 23, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 0, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 1, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, -1, 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, ((23)+1), 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, ((23)-1), 27, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 0, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 1, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, -1, 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, ((27)+1), 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, ((27)-1), 31,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 0,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 1,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, -1,
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, ((31)+1),
159: /* MUTANT (rep_const) */        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, ((31)-1),
160: /* MUTANT (rep_const) */        0, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        1, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        -1, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        ((35)+1), 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        ((35)-1), 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 0, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 1, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, -1, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, ((43)+1), 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, ((43)-1), 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 0, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 1, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, -1, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, ((51)+1), 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, ((51)-1), 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 0, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 1, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, -1, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, ((59)+1), 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, ((59)-1), 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 0, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 1, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, -1, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, ((67)+1), 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, ((67)-1), 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 0, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 1, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, -1, 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, ((83)+1), 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, ((83)-1), 99, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 0, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 1, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, -1, 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, ((99)+1), 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, ((99)-1), 115, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 0, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 1, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, -1, 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, ((115)+1), 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, ((115)-1), 131, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 0, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 1, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, -1, 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, ((131)+1), 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, ((131)-1), 163, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 131, 0, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 131, 1, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 131, -1, 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 131, ((163)+1), 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 131, ((163)-1), 195, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 0, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 1, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, -1, 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, ((195)+1), 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, ((195)-1), 227, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 0, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 1, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, -1, 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, ((227)+1), 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, ((227)-1), 258, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 0, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 1, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, -1, 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, ((258)+1), 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, ((258)-1), 0, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 1, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, -1, 0};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 1};
160: /* MUTANT (rep_const) */        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, -1};
163: /* MUTANT (rep_const) */        1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        -1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, -1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, -1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, -1, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, -1, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, -1, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, -1, 0, 1, 1, 1, 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, -1, 1, 1, 1, 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, ((1)+1), 1, 1, 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 1, 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, ((1)+1), 1, 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, -1, 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, ((1)+1), 1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -1, 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, ((1)+1), 2, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, -1, 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, ((2)+1), 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, ((2)-1), 2, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 0, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, -1, 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, ((2)+1), 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, ((2)-1), 2, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 0, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 1, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, -1, 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, ((2)+1), 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, ((2)-1), 2,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 0,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 1,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, -1,
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, ((2)+1),
163: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, ((2)-1),
164: /* MUTANT (rep_const) */        0, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        1, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        -1, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        ((3)+1), 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        ((3)-1), 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 0, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 1, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, -1, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, ((3)+1), 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, ((3)-1), 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 0, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 1, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, -1, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, ((3)+1), 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, ((3)-1), 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 0, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 1, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, -1, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, ((3)+1), 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, ((3)-1), 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 0, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 1, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, -1, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, ((4)+1), 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, ((4)-1), 4, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 0, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 1, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, -1, 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, ((4)+1), 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, ((4)-1), 4, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 0, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 1, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, -1, 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, ((4)+1), 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, ((4)-1), 4, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 0, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 1, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, -1, 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, ((4)+1), 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, ((4)-1), 5, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 0, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 1, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, -1, 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, ((5)+1), 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, ((5)-1), 5, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, 0, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, 1, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, -1, 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, ((5)+1), 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, ((5)-1), 5, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 0, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 1, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, -1, 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, ((5)+1), 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, ((5)-1), 5, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 0, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 1, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, -1, 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, ((5)+1), 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, ((5)-1), 0, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 1, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, -1, 99, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 1, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, ((99)+1), 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, ((99)-1), 99}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 0}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 1}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, -1}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, ((99)+1)}; /* 99==invalid */
164: /* MUTANT (rep_const) */        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, ((99)-1)}; /* 99==invalid */
166: /* MUTANT (rep_const) */        0, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        -1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        ((1)+1), 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 0, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 1, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, -1, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, ((2)+1), 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, ((2)-1), 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 0, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 1, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, -1, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, ((3)+1), 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, ((3)-1), 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 0, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 1, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, -1, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, ((4)+1), 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, ((4)-1), 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 0, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 1, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, -1, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, ((5)+1), 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, ((5)-1), 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 0, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 1, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, -1, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, ((7)+1), 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, ((7)-1), 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 0, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 1, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, -1, 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, ((9)+1), 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, ((9)-1), 13, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 0, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 1, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, -1, 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, ((13)+1), 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, ((13)-1), 17, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 0, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 1, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, -1, 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, ((17)+1), 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, ((17)-1), 25, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 0, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 1, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, -1, 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, ((25)+1), 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, ((25)-1), 33, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 0, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 1, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, -1, 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, ((33)+1), 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, ((33)-1), 49, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 0, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 1, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, -1, 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, ((49)+1), 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, ((49)-1), 65, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 0, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 1, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, -1, 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, ((65)+1), 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, ((65)-1), 97, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 0, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 1, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, -1, 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, ((97)+1), 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, ((97)-1), 129, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 0, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 1, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, -1, 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, ((129)+1), 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, ((129)-1), 193,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 0,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 1,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, -1,
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, ((193)+1),
166: /* MUTANT (rep_const) */        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, ((193)-1),
167: /* MUTANT (rep_const) */        0, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        1, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        -1, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        ((257)+1), 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        ((257)-1), 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 0, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 1, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, -1, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, ((385)+1), 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, ((385)-1), 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 0, 769, 1025, 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 1, 769, 1025, 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, -1, 769, 1025, 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, ((513)+1), 769, 1025, 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, ((513)-1), 769, 1025, 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 0, 1025, 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 1, 1025, 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, -1, 1025, 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, ((769)+1), 1025, 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, ((769)-1), 1025, 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 0, 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1, 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, -1, 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, ((1025)+1), 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, ((1025)-1), 1537, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, 0, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, 1, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, -1, 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, ((1537)+1), 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, ((1537)-1), 2049, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, 1537, 0, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, 1537, 1, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, 1537, -1, 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, 1537, ((2049)+1), 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, 1537, ((2049)-1), 3073, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, 1537, 2049, 0, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, 1537, 2049, 1, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, 1537, 2049, -1, 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, 1537, 2049, ((3073)+1), 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, 1537, 2049, ((3073)-1), 4097, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, 1537, 2049, 3073, 0, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, 1537, 2049, 3073, 1, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, 1537, 2049, 3073, -1, 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, 1537, 2049, 3073, ((4097)+1), 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, 1537, 2049, 3073, ((4097)-1), 6145,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 0,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 1,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, -1,
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, ((6145)+1),
167: /* MUTANT (rep_const) */        257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, ((6145)-1),
168: /* MUTANT (rep_const) */        0, 12289, 16385, 24577};
168: /* MUTANT (rep_const) */        1, 12289, 16385, 24577};
168: /* MUTANT (rep_const) */        -1, 12289, 16385, 24577};
168: /* MUTANT (rep_const) */        ((8193)+1), 12289, 16385, 24577};
168: /* MUTANT (rep_const) */        ((8193)-1), 12289, 16385, 24577};
168: /* MUTANT (rep_const) */        8193, 0, 16385, 24577};
168: /* MUTANT (rep_const) */        8193, 1, 16385, 24577};
168: /* MUTANT (rep_const) */        8193, -1, 16385, 24577};
168: /* MUTANT (rep_const) */        8193, ((12289)+1), 16385, 24577};
168: /* MUTANT (rep_const) */        8193, ((12289)-1), 16385, 24577};
168: /* MUTANT (rep_const) */        8193, 12289, 0, 24577};
168: /* MUTANT (rep_const) */        8193, 12289, 1, 24577};
168: /* MUTANT (rep_const) */        8193, 12289, -1, 24577};
168: /* MUTANT (rep_const) */        8193, 12289, ((16385)+1), 24577};
168: /* MUTANT (rep_const) */        8193, 12289, ((16385)-1), 24577};
168: /* MUTANT (rep_const) */        8193, 12289, 16385, 0};
168: /* MUTANT (rep_const) */        8193, 12289, 16385, 1};
168: /* MUTANT (rep_const) */        8193, 12289, 16385, -1};
168: /* MUTANT (rep_const) */        8193, 12289, 16385, ((24577)+1)};
168: /* MUTANT (rep_const) */        8193, 12289, 16385, ((24577)-1)};
170: /* MUTANT (rep_const) */        1, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        -1, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 1, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, -1, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 1, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, -1, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, -1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, -1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, ((1)+1), 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 0, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, -1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, ((1)+1), 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 0, 2, 3, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 1, 2, 3, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, -1, 2, 3, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, ((2)+1), 2, 3, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, ((2)-1), 2, 3, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 0, 3, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 1, 3, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, -1, 3, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, ((2)+1), 3, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, ((2)-1), 3, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 0, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 1, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, -1, 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, ((3)+1), 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, ((3)-1), 3, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 0, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 1, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, -1, 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, ((3)+1), 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, ((3)-1), 4, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 1, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, -1, 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, ((4)+1), 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, ((4)-1), 4, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 0, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 1, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, -1, 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, ((4)+1), 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, ((4)-1), 5, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 0, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 1, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, -1, 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, ((5)+1), 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, ((5)-1), 5, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 0, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 1, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, -1, 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, ((5)+1), 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, ((5)-1), 6, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 0, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 1, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, -1, 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, ((6)+1), 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, ((6)-1), 6,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 0,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 1,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -1,
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, ((6)+1),
170: /* MUTANT (rep_const) */        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, ((6)-1),
171: /* MUTANT (rep_const) */        0, 7, 8, 8, 9, 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        1, 7, 8, 8, 9, 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        -1, 7, 8, 8, 9, 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        ((7)+1), 7, 8, 8, 9, 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        ((7)-1), 7, 8, 8, 9, 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 0, 8, 8, 9, 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 1, 8, 8, 9, 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, -1, 8, 8, 9, 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, ((7)+1), 8, 8, 9, 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, ((7)-1), 8, 8, 9, 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 0, 8, 9, 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 1, 8, 9, 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, -1, 8, 9, 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, ((8)+1), 8, 9, 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, ((8)-1), 8, 9, 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 0, 9, 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 1, 9, 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, -1, 9, 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, ((8)+1), 9, 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, ((8)-1), 9, 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 0, 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 1, 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, -1, 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, ((9)+1), 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, ((9)-1), 9, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, 0, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, 1, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, -1, 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, ((9)+1), 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, ((9)-1), 10, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, 9, 0, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, 9, 1, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, 9, -1, 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, 9, ((10)+1), 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, 9, ((10)-1), 10, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, 9, 10, 0, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, 9, 10, 1, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, 9, 10, -1, 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, 9, 10, ((10)+1), 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, 9, 10, ((10)-1), 11, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, 9, 10, 10, 0, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, 9, 10, 10, 1, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, 9, 10, 10, -1, 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, 9, 10, 10, ((11)+1), 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, 9, 10, 10, ((11)-1), 11,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, 9, 10, 10, 11, 0,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, 9, 10, 10, 11, 1,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, 9, 10, 10, 11, -1,
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, 9, 10, 10, 11, ((11)+1),
171: /* MUTANT (rep_const) */        7, 7, 8, 8, 9, 9, 10, 10, 11, ((11)-1),
172: /* MUTANT (rep_const) */        0, 12, 13, 13};
172: /* MUTANT (rep_const) */        1, 12, 13, 13};
172: /* MUTANT (rep_const) */        -1, 12, 13, 13};
172: /* MUTANT (rep_const) */        ((12)+1), 12, 13, 13};
172: /* MUTANT (rep_const) */        ((12)-1), 12, 13, 13};
172: /* MUTANT (rep_const) */        12, 0, 13, 13};
172: /* MUTANT (rep_const) */        12, 1, 13, 13};
172: /* MUTANT (rep_const) */        12, -1, 13, 13};
172: /* MUTANT (rep_const) */        12, ((12)+1), 13, 13};
172: /* MUTANT (rep_const) */        12, ((12)-1), 13, 13};
172: /* MUTANT (rep_const) */        12, 12, 0, 13};
172: /* MUTANT (rep_const) */        12, 12, 1, 13};
172: /* MUTANT (rep_const) */        12, 12, -1, 13};
172: /* MUTANT (rep_const) */        12, 12, ((13)+1), 13};
172: /* MUTANT (rep_const) */        12, 12, ((13)-1), 13};
172: /* MUTANT (rep_const) */        12, 12, 13, 0};
172: /* MUTANT (rep_const) */        12, 12, 13, 1};
172: /* MUTANT (rep_const) */        12, 12, 13, -1};
172: /* MUTANT (rep_const) */        12, 12, 13, ((13)+1)};
172: /* MUTANT (rep_const) */        12, 12, 13, ((13)-1)};
206: /* MUTANT (del_stmt) */ /* ulg bb; */                          /* bit buffer */
207: /* MUTANT (del_stmt) */ /* unsigned bk; */                     /* bits in bit buffer */
210: /* MUTANT (rep_const) */    1x0000,
210: /* MUTANT (rep_const) */    -1x0000,
211: /* MUTANT (rep_const) */    1x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f, 0x00ff,
211: /* MUTANT (rep_const) */    -1x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f, 0x00ff,
211: /* MUTANT (rep_const) */    0x0001, 1x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f, 0x00ff,
211: /* MUTANT (rep_const) */    0x0001, -1x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f, 0x00ff,
211: /* MUTANT (rep_const) */    0x0001, 0x0003, 1x0007, 0x000f, 0x001f, 0x003f, 0x007f, 0x00ff,
211: /* MUTANT (rep_const) */    0x0001, 0x0003, -1x0007, 0x000f, 0x001f, 0x003f, 0x007f, 0x00ff,
211: /* MUTANT (rep_const) */    0x0001, 0x0003, 0x0007, 1x000f, 0x001f, 0x003f, 0x007f, 0x00ff,
211: /* MUTANT (rep_const) */    0x0001, 0x0003, 0x0007, -1x000f, 0x001f, 0x003f, 0x007f, 0x00ff,
211: /* MUTANT (rep_const) */    0x0001, 0x0003, 0x0007, 0x000f, 1x001f, 0x003f, 0x007f, 0x00ff,
211: /* MUTANT (rep_const) */    0x0001, 0x0003, 0x0007, 0x000f, -1x001f, 0x003f, 0x007f, 0x00ff,
211: /* MUTANT (rep_const) */    0x0001, 0x0003, 0x0007, 0x000f, 0x001f, 1x003f, 0x007f, 0x00ff,
211: /* MUTANT (rep_const) */    0x0001, 0x0003, 0x0007, 0x000f, 0x001f, -1x003f, 0x007f, 0x00ff,
211: /* MUTANT (rep_const) */    0x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, 1x007f, 0x00ff,
211: /* MUTANT (rep_const) */    0x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, -1x007f, 0x00ff,
211: /* MUTANT (rep_const) */    0x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f, 1x00ff,
211: /* MUTANT (rep_const) */    0x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f, -1x00ff,
212: /* MUTANT (rep_const) */    1x01ff, 0x03ff, 0x07ff, 0x0fff, 0x1fff, 0x3fff, 0x7fff, 0xffff
212: /* MUTANT (rep_const) */    -1x01ff, 0x03ff, 0x07ff, 0x0fff, 0x1fff, 0x3fff, 0x7fff, 0xffff
212: /* MUTANT (rep_const) */    0x01ff, 1x03ff, 0x07ff, 0x0fff, 0x1fff, 0x3fff, 0x7fff, 0xffff
212: /* MUTANT (rep_const) */    0x01ff, -1x03ff, 0x07ff, 0x0fff, 0x1fff, 0x3fff, 0x7fff, 0xffff
212: /* MUTANT (rep_const) */    0x01ff, 0x03ff, 1x07ff, 0x0fff, 0x1fff, 0x3fff, 0x7fff, 0xffff
212: /* MUTANT (rep_const) */    0x01ff, 0x03ff, -1x07ff, 0x0fff, 0x1fff, 0x3fff, 0x7fff, 0xffff
212: /* MUTANT (rep_const) */    0x01ff, 0x03ff, 0x07ff, 1x0fff, 0x1fff, 0x3fff, 0x7fff, 0xffff
212: /* MUTANT (rep_const) */    0x01ff, 0x03ff, 0x07ff, -1x0fff, 0x1fff, 0x3fff, 0x7fff, 0xffff
212: /* MUTANT (rep_const) */    0x01ff, 0x03ff, 0x07ff, 0x0fff, 1x1fff, 0x3fff, 0x7fff, 0xffff
212: /* MUTANT (rep_const) */    0x01ff, 0x03ff, 0x07ff, 0x0fff, -1x1fff, 0x3fff, 0x7fff, 0xffff
212: /* MUTANT (rep_const) */    0x01ff, 0x03ff, 0x07ff, 0x0fff, 0x1fff, 1x3fff, 0x7fff, 0xffff
212: /* MUTANT (rep_const) */    0x01ff, 0x03ff, 0x07ff, 0x0fff, 0x1fff, -1x3fff, 0x7fff, 0xffff
212: /* MUTANT (rep_const) */    0x01ff, 0x03ff, 0x07ff, 0x0fff, 0x1fff, 0x3fff, 1x7fff, 0xffff
212: /* MUTANT (rep_const) */    0x01ff, 0x03ff, 0x07ff, 0x0fff, 0x1fff, 0x3fff, -1x7fff, 0xffff
212: /* MUTANT (rep_const) */    0x01ff, 0x03ff, 0x07ff, 0x0fff, 0x1fff, 0x3fff, 0x7fff, 1xffff
212: /* MUTANT (rep_const) */    0x01ff, 0x03ff, 0x07ff, 0x0fff, 0x1fff, 0x3fff, 0x7fff, -1xffff
222: #define NEEDBITS(n) {while(k<(n)){b|=((ulg)NEXTBYTE())<<k;k+=0;}} /* MUTANT (rep_const) */
222: #define NEEDBITS(n) {while(k<(n)){b|=((ulg)NEXTBYTE())<<k;k+=1;}} /* MUTANT (rep_const) */
222: #define NEEDBITS(n) {while(k<(n)){b|=((ulg)NEXTBYTE())<<k;k+=-1;}} /* MUTANT (rep_const) */
222: #define NEEDBITS(n) {while(k<(n)){b|=((ulg)NEXTBYTE())<<k;k+=((8)+1);}} /* MUTANT (rep_const) */
222: #define NEEDBITS(n) {while(k<(n)){b|=((ulg)NEXTBYTE())<<k;k+=((8)-1);}} /* MUTANT (rep_const) */
259: /* MUTANT (rep_const) */int lbits = 0;          /* bits in base literal/length lookup table */
259: /* MUTANT (rep_const) */int lbits = 1;          /* bits in base literal/length lookup table */
259: /* MUTANT (rep_const) */int lbits = -1;          /* bits in base literal/length lookup table */
259: /* MUTANT (rep_const) */int lbits = ((9)+1);          /* bits in base literal/length lookup table */
259: /* MUTANT (rep_const) */int lbits = ((9)-1);          /* bits in base literal/length lookup table */
260: /* MUTANT (del_stmt) */ /* int dbits = 6; */           /* bits in base distance lookup table */
260: /* MUTANT (rep_const) */int dbits = 0;          /* bits in base distance lookup table */
260: /* MUTANT (rep_const) */int dbits = 1;          /* bits in base distance lookup table */
260: /* MUTANT (rep_const) */int dbits = -1;          /* bits in base distance lookup table */
260: /* MUTANT (rep_const) */int dbits = ((6)+1);          /* bits in base distance lookup table */
260: /* MUTANT (rep_const) */int dbits = ((6)-1);          /* bits in base distance lookup table */
264: #define BMAX 0          /* MUTANT (rep_const) *//* maximum bit length of any code (16 for explode) */
264: #define BMAX 1          /* MUTANT (rep_const) *//* maximum bit length of any code (16 for explode) */
264: #define BMAX -1          /* MUTANT (rep_const) *//* maximum bit length of any code (16 for explode) */
264: #define BMAX ((16)+1)          /* MUTANT (rep_const) *//* maximum bit length of any code (16 for explode) */
264: #define BMAX ((16)-1)          /* MUTANT (rep_const) *//* maximum bit length of any code (16 for explode) */
265: #define N_MAX 0        /* MUTANT (rep_const) *//* maximum number of codes in any set */
265: #define N_MAX 1        /* MUTANT (rep_const) *//* maximum number of codes in any set */
265: #define N_MAX -1        /* MUTANT (rep_const) *//* maximum number of codes in any set */
265: #define N_MAX ((288)+1)        /* MUTANT (rep_const) *//* maximum number of codes in any set */
265: #define N_MAX ((288)-1)        /* MUTANT (rep_const) *//* maximum number of codes in any set */
273: /* MUTANT (del_stmt) */ /* unsigned n; */              /* number of codes (assumed <= N_MAX) */
274: /* MUTANT (del_stmt) */ /* unsigned s; */              /* number of simple-valued codes (0..s-1) */
275: /* MUTANT (del_stmt) */ /* ush *d; */                  /* list of base values for non-simple codes */
276: /* MUTANT (del_stmt) */ /* ush *e; */                  /* list of extra bits for non-simple codes */
277: /* MUTANT (del_stmt) */ /* struct huft **t; */         /* result: starting table */
278: /* MUTANT (del_stmt) */ /* int *m; */                  /* maximum lookup bits, returns actual */
285: /* MUTANT (del_stmt) */ /*   unsigned a; */                    /* counter for codes of length k */
286: /* MUTANT (del_stmt) */ /*   unsigned c[BMAX+1]; */            /* bit length count table */
286: /* MUTANT (rep_op) */  unsigned c[BMAX-1];           /* bit length count table */
286: /* MUTANT (rep_op) */  unsigned c[BMAX*1];           /* bit length count table */
286: /* MUTANT (rep_op) */  unsigned c[BMAX%1];           /* bit length count table */
286: /* MUTANT (rep_const) */  unsigned c[BMAX+0];           /* bit length count table */
286: /* MUTANT (rep_const) */  unsigned c[BMAX+-1];           /* bit length count table */
286: /* MUTANT (rep_const) */  unsigned c[BMAX+((1)+1)];           /* bit length count table */
287: /* MUTANT (del_stmt) */ /*   unsigned f; */                    /* i repeats in table every f entries */
288: /* MUTANT (del_stmt) */ /*   int g; */                         /* maximum code length */
289: /* MUTANT (del_stmt) */ /*   int h; */                         /* table level */
290: /* MUTANT (del_stmt) */ /*   register unsigned i; */           /* counter, current code */
291: /* MUTANT (del_stmt) */ /*   register unsigned j; */           /* counter */
292: /* MUTANT (del_stmt) */ /*   register int k; */                /* number of bits in current code */
293: /* MUTANT (del_stmt) */ /*   int l; */                         /* bits per table (returned in m) */
294: /* MUTANT (del_stmt) */ /*   register unsigned *p; */          /* pointer into c[], b[], or v[] */
295: /* MUTANT (del_stmt) */ /*   register struct huft *q; */       /* points to current table */
296: /* MUTANT (del_stmt) */ /*   struct huft r; */                 /* table entry for structure assignment */
297: /* MUTANT (del_stmt) */ /*   struct huft *u[BMAX]; */          /* table stack */
298: /* MUTANT (del_stmt) */ /*   unsigned v[N_MAX]; */             /* values in order of bit length */
299: /* MUTANT (del_stmt) */ /*   register int w; */                /* bits before this table == (l * h) */
300: /* MUTANT (del_stmt) */ /*   unsigned x[BMAX+1]; */            /* bit offsets, then code stack */
300: /* MUTANT (rep_op) */  unsigned x[BMAX-1];           /* bit offsets, then code stack */
300: /* MUTANT (rep_op) */  unsigned x[BMAX*1];           /* bit offsets, then code stack */
300: /* MUTANT (rep_op) */  unsigned x[BMAX%1];           /* bit offsets, then code stack */
300: /* MUTANT (rep_const) */  unsigned x[BMAX+0];           /* bit offsets, then code stack */
300: /* MUTANT (rep_const) */  unsigned x[BMAX+-1];           /* bit offsets, then code stack */
300: /* MUTANT (rep_const) */  unsigned x[BMAX+((1)+1)];           /* bit offsets, then code stack */
301: /* MUTANT (del_stmt) */ /*   unsigned *xp; */                  /* pointer into x */
302: /* MUTANT (del_stmt) */ /*   int y; */                         /* number of dummy codes added */
303: /* MUTANT (del_stmt) */ /*   unsigned z; */                    /* number of entries in current table */
307: /* MUTANT (del_stmt) */ /*   memzero(c, sizeof(c)); */ 
308: /* MUTANT (del_stmt) */ /*   p = b; */   i = n;
308: /* MUTANT (del_stmt) */ /*   p = b; */  /*   i = n; */ 
308: /* MUTANT (del_stmt) */  p = b; /*   i = n; */ 
310: /* MUTANT (rep_op) */    Tracecv(*p, (stderr, (n-i <= ' ' && n-i <= '~' ? "%c %d\n" : "0x%x %d\n"), 
310: /* MUTANT (rep_op) */    Tracecv(*p, (stderr, (n-i < ' ' && n-i <= '~' ? "%c %d\n" : "0x%x %d\n"), 
310: /* MUTANT (rep_op) */    Tracecv(*p, (stderr, (n-i > ' ' && n-i <= '~' ? "%c %d\n" : "0x%x %d\n"), 
310: /* MUTANT (rep_op) */    Tracecv(*p, (stderr, (n-i == ' ' && n-i <= '~' ? "%c %d\n" : "0x%x %d\n"), 
310: /* MUTANT (rep_op) */    Tracecv(*p, (stderr, (n-i != ' ' && n-i <= '~' ? "%c %d\n" : "0x%x %d\n"), 
310: /* MUTANT (rep_op) */    Tracecv(*p, (stderr, (n-i >= ' ' || n-i <= '~' ? "%c %d\n" : "0x%x %d\n"), 
310: /* MUTANT (rep_op) */    Tracecv(*p, (stderr, (n-i >= ' ' && n-i < '~' ? "%c %d\n" : "0x%x %d\n"), 
310: /* MUTANT (rep_op) */    Tracecv(*p, (stderr, (n-i >= ' ' && n-i > '~' ? "%c %d\n" : "0x%x %d\n"), 
310: /* MUTANT (rep_op) */    Tracecv(*p, (stderr, (n-i >= ' ' && n-i >= '~' ? "%c %d\n" : "0x%x %d\n"), 
310: /* MUTANT (rep_op) */    Tracecv(*p, (stderr, (n-i >= ' ' && n-i == '~' ? "%c %d\n" : "0x%x %d\n"), 
310: /* MUTANT (rep_op) */    Tracecv(*p, (stderr, (n-i >= ' ' && n-i != '~' ? "%c %d\n" : "0x%x %d\n"), 
310: /* MUTANT (rep_op) */    Tracecv(*p, (stderr, (n-i >= ' ' && n-i <= '~' ? "%c %d\n" : "0x+x %d\n"), 
310: /* MUTANT (rep_op) */    Tracecv(*p, (stderr, (n-i >= ' ' && n-i <= '~' ? "%c %d\n" : "0x-x %d\n"), 
310: /* MUTANT (rep_op) */    Tracecv(*p, (stderr, (n-i >= ' ' && n-i <= '~' ? "%c %d\n" : "0x*x %d\n"), 
310: /* MUTANT (rep_op) */    Tracecv(*p, (stderr, (n-i >= ' ' && n-i <= '~' ? "%c %d\n" : "0x%x +d\n"), 
310: /* MUTANT (rep_op) */    Tracecv(*p, (stderr, (n-i >= ' ' && n-i <= '~' ? "%c %d\n" : "0x%x -d\n"), 
310: /* MUTANT (rep_op) */    Tracecv(*p, (stderr, (n-i >= ' ' && n-i <= '~' ? "%c %d\n" : "0x%x *d\n"), 
310: /* MUTANT (rep_const) */    Tracecv(*p, (stderr, (n-i >= ' ' && n-i <= '~' ? "%c %d\n" : "1x%x %d\n"), 
310: /* MUTANT (rep_const) */    Tracecv(*p, (stderr, (n-i >= ' ' && n-i <= '~' ? "%c %d\n" : "-1x%x %d\n"), 
312: /* MUTANT (del_stmt) */ /*     c[*p]++; */                     /* assume all entries <= BMAX */
312: /* MUTANT (rep_op) */    c[*p]--;                    /* assume all entries <= BMAX */
313: /* MUTANT (del_stmt) */ /*     p++; */                       /* Can't combine with above line (Solaris bug) */
313: /* MUTANT (rep_op) */    p--;                      /* Can't combine with above line (Solaris bug) */
314: /* MUTANT (del_stmt) */ /*   } while (--i); */ 
314: /* MUTANT (rep_op) */  } while (++i);
314: /* MUTANT (negate) */  } while(! (--i));
315: /* MUTANT (rep_op) */  if (c[0] != n)                /* null input--all zero length codes */
315: /* MUTANT (rep_const) */  if (c[1] == n)                /* null input--all zero length codes */
315: /* MUTANT (rep_const) */  if (c[-1] == n)                /* null input--all zero length codes */
315: /* MUTANT (negate) */  if(! (c[0] == n))                /* null input--all zero length codes */
317: /* MUTANT (del_stmt) */ /*     *t = (struct huft *)NULL; */ 
318: /* MUTANT (del_stmt) */ /*     *m = 0; */ 
318: /* MUTANT (rep_const) */    *m = 1;
318: /* MUTANT (rep_const) */    *m = -1;
319: /* MUTANT (del_stmt) */ /*     return 0; */ 
319: /* MUTANT (rep_const) */    return 1;
319: /* MUTANT (rep_const) */    return -1;
325: /* MUTANT (rep_op) */  for (j = 1; j < BMAX; j++)
325: /* MUTANT (rep_op) */  for (j = 1; j > BMAX; j++)
325: /* MUTANT (rep_op) */  for (j = 1; j >= BMAX; j++)
325: /* MUTANT (rep_op) */  for (j = 1; j == BMAX; j++)
325: /* MUTANT (rep_op) */  for (j = 1; j != BMAX; j++)
325: /* MUTANT (rep_op) */  for (j = 1; j <= BMAX; j--)
325: /* MUTANT (rep_const) */  for (j = 0; j <= BMAX; j++)
325: /* MUTANT (rep_const) */  for (j = -1; j <= BMAX; j++)
325: /* MUTANT (rep_const) */  for (j = ((1)+1); j <= BMAX; j++)
326: /* MUTANT (negate) */    if(! (c[j]))
328: /* MUTANT (del_stmt) */ /*   k = j; */                         /* minimum code length */
329: /* MUTANT (rep_op) */  if ((unsigned)l <= j)
329: /* MUTANT (rep_op) */  if ((unsigned)l > j)
329: /* MUTANT (rep_op) */  if ((unsigned)l >= j)
329: /* MUTANT (rep_op) */  if ((unsigned)l == j)
329: /* MUTANT (rep_op) */  if ((unsigned)l != j)
329: /* MUTANT (negate) */  if(! ((unsigned)l < j))
331: /* MUTANT (rep_op) */  for (i = BMAX; i; i++)
332: /* MUTANT (negate) */    if(! (c[i]))
334: /* MUTANT (del_stmt) */ /*   g = i; */                         /* maximum code length */
335: /* MUTANT (rep_op) */  if ((unsigned)l <= i)
335: /* MUTANT (rep_op) */  if ((unsigned)l < i)
335: /* MUTANT (rep_op) */  if ((unsigned)l >= i)
335: /* MUTANT (rep_op) */  if ((unsigned)l == i)
335: /* MUTANT (rep_op) */  if ((unsigned)l != i)
335: /* MUTANT (negate) */  if(! ((unsigned)l > i))
337: /* MUTANT (del_stmt) */ /*   *m = l; */ 
341: /* MUTANT (rep_op) */  for (y = 1 << j; j <= i; j++, y <<= 1)
341: /* MUTANT (rep_op) */  for (y = 1 << j; j > i; j++, y <<= 1)
341: /* MUTANT (rep_op) */  for (y = 1 << j; j >= i; j++, y <<= 1)
341: /* MUTANT (rep_op) */  for (y = 1 << j; j == i; j++, y <<= 1)
341: /* MUTANT (rep_op) */  for (y = 1 << j; j != i; j++, y <<= 1)
341: /* MUTANT (rep_op) */  for (y = 1 << j; j < i; j--, y <<= 1)
341: /* MUTANT (rep_const) */  for (y = 0 << j; j < i; j++, y <<= 1)
341: /* MUTANT (rep_const) */  for (y = -1 << j; j < i; j++, y <<= 1)
341: /* MUTANT (rep_const) */  for (y = ((1)+1) << j; j < i; j++, y <<= 1)
341: /* MUTANT (rep_const) */  for (y = 1 << j; j < i; j++, y <<= 0)
341: /* MUTANT (rep_const) */  for (y = 1 << j; j < i; j++, y <<= -1)
341: /* MUTANT (rep_const) */  for (y = 1 << j; j < i; j++, y <<= ((1)+1))
342: /* MUTANT (rep_op) */    if ((y += c[j]) < 0)
342: /* MUTANT (rep_op) */    if ((y *= c[j]) < 0)
342: /* MUTANT (rep_op) */    if ((y %= c[j]) < 0)
342: /* MUTANT (rep_op) */    if ((y -= c[j]) <= 0)
342: /* MUTANT (rep_op) */    if ((y -= c[j]) > 0)
342: /* MUTANT (rep_op) */    if ((y -= c[j]) >= 0)
342: /* MUTANT (rep_op) */    if ((y -= c[j]) == 0)
342: /* MUTANT (rep_op) */    if ((y -= c[j]) != 0)
342: /* MUTANT (rep_const) */    if ((y -= c[j]) < 1)
342: /* MUTANT (rep_const) */    if ((y -= c[j]) < -1)
342: /* MUTANT (negate) */    if(! ((y -= c[j]) < 0))
343: /* MUTANT (rep_const) */      return 0;                 /* bad input: more codes than bits */
343: /* MUTANT (rep_const) */      return 1;                 /* bad input: more codes than bits */
343: /* MUTANT (rep_const) */      return -1;                 /* bad input: more codes than bits */
343: /* MUTANT (rep_const) */      return ((2)+1);                 /* bad input: more codes than bits */
343: /* MUTANT (rep_const) */      return ((2)-1);                 /* bad input: more codes than bits */
344: /* MUTANT (rep_op) */  if ((y += c[i]) < 0)
344: /* MUTANT (rep_op) */  if ((y *= c[i]) < 0)
344: /* MUTANT (rep_op) */  if ((y %= c[i]) < 0)
344: /* MUTANT (rep_op) */  if ((y -= c[i]) <= 0)
344: /* MUTANT (rep_op) */  if ((y -= c[i]) > 0)
344: /* MUTANT (rep_op) */  if ((y -= c[i]) >= 0)
344: /* MUTANT (rep_op) */  if ((y -= c[i]) == 0)
344: /* MUTANT (rep_op) */  if ((y -= c[i]) != 0)
344: /* MUTANT (rep_const) */  if ((y -= c[i]) < 1)
344: /* MUTANT (rep_const) */  if ((y -= c[i]) < -1)
344: /* MUTANT (negate) */  if(! ((y -= c[i]) < 0))
345: /* MUTANT (rep_const) */    return 0;
345: /* MUTANT (rep_const) */    return 1;
345: /* MUTANT (rep_const) */    return -1;
345: /* MUTANT (rep_const) */    return ((2)+1);
345: /* MUTANT (rep_const) */    return ((2)-1);
346: /* MUTANT (del_stmt) */ /*   c[i] += y; */ 
346: /* MUTANT (rep_op) */  c[i] -= y;
346: /* MUTANT (rep_op) */  c[i] *= y;
346: /* MUTANT (rep_op) */  c[i] %= y;
350: /* MUTANT (del_stmt) */ /*   x[1] = j = 0; */ 
350: /* MUTANT (rep_const) */  x[0] = j = 0;
350: /* MUTANT (rep_const) */  x[-1] = j = 0;
350: /* MUTANT (rep_const) */  x[((1)+1)] = j = 0;
350: /* MUTANT (rep_const) */  x[1] = j = 1;
350: /* MUTANT (rep_const) */  x[1] = j = -1;
351: /* MUTANT (del_stmt) */ /*   p = c + 1; */   xp = x + 2;
351: /* MUTANT (del_stmt) */ /*   p = c + 1; */  /*   xp = x + 2; */ 
351: /* MUTANT (del_stmt) */  p = c + 1; /*   xp = x + 2; */ 
351: /* MUTANT (rep_op) */  p = c - 1;  xp = x + 2;
351: /* MUTANT (rep_op) */  p = c * 1;  xp = x + 2;
351: /* MUTANT (rep_op) */  p = c % 1;  xp = x + 2;
351: /* MUTANT (rep_op) */  p = c + 1;  xp = x - 2;
351: /* MUTANT (rep_op) */  p = c + 1;  xp = x * 2;
351: /* MUTANT (rep_op) */  p = c + 1;  xp = x % 2;
351: /* MUTANT (rep_const) */  p = c + 0;  xp = x + 2;
351: /* MUTANT (rep_const) */  p = c + -1;  xp = x + 2;
351: /* MUTANT (rep_const) */  p = c + ((1)+1);  xp = x + 2;
351: /* MUTANT (rep_const) */  p = c + 1;  xp = x + 0;
351: /* MUTANT (rep_const) */  p = c + 1;  xp = x + 1;
351: /* MUTANT (rep_const) */  p = c + 1;  xp = x + -1;
351: /* MUTANT (rep_const) */  p = c + 1;  xp = x + ((2)+1);
351: /* MUTANT (rep_const) */  p = c + 1;  xp = x + ((2)-1);
352: /* MUTANT (rep_op) */  while (++i) {                 /* note that i == g from above */
352: /* MUTANT (negate) */  while(! (--i)) {                 /* note that i == g from above */
353: /* MUTANT (del_stmt) */ /*     *xp++ = (j += *p++); */ 
353: /* MUTANT (rep_op) */    *xp-- = (j += *p++);
353: /* MUTANT (rep_op) */    *xp++ = (j -= *p++);
353: /* MUTANT (rep_op) */    *xp++ = (j *= *p++);
353: /* MUTANT (rep_op) */    *xp++ = (j %= *p++);
353: /* MUTANT (rep_op) */    *xp++ = (j += *p--);
358: /* MUTANT (rep_const) */  p = b;  i = 1;
358: /* MUTANT (rep_const) */  p = b;  i = -1;
360: /* MUTANT (rep_op) */    if ((j = *p--) != 0)
360: /* MUTANT (rep_op) */    if ((j = *p++) == 0)
360: /* MUTANT (rep_const) */    if ((j = *p++) != 1)
360: /* MUTANT (rep_const) */    if ((j = *p++) != -1)
360: /* MUTANT (negate) */    if(! ((j = *p++) != 0))
361: /* MUTANT (rep_op) */      v[x[j]--] = i;
362: /* MUTANT (del_stmt) */ /*   } while (++i < n); */ 
362: /* MUTANT (rep_op) */  } while (--i < n);
362: /* MUTANT (rep_op) */  } while (++i <= n);
362: /* MUTANT (rep_op) */  } while (++i > n);
362: /* MUTANT (rep_op) */  } while (++i >= n);
362: /* MUTANT (rep_op) */  } while (++i == n);
362: /* MUTANT (rep_op) */  } while (++i != n);
362: /* MUTANT (negate) */  } while(! (++i < n));
366: /* MUTANT (del_stmt) */ /*   x[0] = i = 0; */                  /* first Huffman code is zero */
366: /* MUTANT (rep_const) */  x[1] = i = 0;                 /* first Huffman code is zero */
366: /* MUTANT (rep_const) */  x[-1] = i = 0;                 /* first Huffman code is zero */
366: /* MUTANT (rep_const) */  x[0] = i = 1;                 /* first Huffman code is zero */
366: /* MUTANT (rep_const) */  x[0] = i = -1;                 /* first Huffman code is zero */
367: /* MUTANT (del_stmt) */ /*   p = v; */                         /* grab values in bit order */
368: /* MUTANT (del_stmt) */ /*   h = -1; */                        /* no tables yet--level -1 */
368: /* MUTANT (rep_const) */  h = 0;                       /* no tables yet--level -1 */
368: /* MUTANT (rep_const) */  h = 1;                       /* no tables yet--level -1 */
368: /* MUTANT (rep_const) */  h = ((-1)+1);                       /* no tables yet--level -1 */
368: /* MUTANT (rep_const) */  h = ((-1)-1);                       /* no tables yet--level -1 */
369: /* MUTANT (del_stmt) */ /*   w = -l; */                        /* bits decoded == (l * h) */
370: /* MUTANT (del_stmt) */ /*   u[0] = (struct huft *)NULL; */    /* just to keep compilers happy */
370: /* MUTANT (rep_const) */  u[1] = (struct huft *)NULL;   /* just to keep compilers happy */
370: /* MUTANT (rep_const) */  u[-1] = (struct huft *)NULL;   /* just to keep compilers happy */
371: /* MUTANT (del_stmt) */ /*   q = (struct huft *)NULL; */       /* ditto */
372: /* MUTANT (del_stmt) */ /*   z = 0; */                         /* ditto */
372: /* MUTANT (rep_const) */  z = 1;                        /* ditto */
372: /* MUTANT (rep_const) */  z = -1;                        /* ditto */
375: /* MUTANT (rep_op) */  for (; k < g; k++)
375: /* MUTANT (rep_op) */  for (; k > g; k++)
375: /* MUTANT (rep_op) */  for (; k >= g; k++)
375: /* MUTANT (rep_op) */  for (; k == g; k++)
375: /* MUTANT (rep_op) */  for (; k != g; k++)
375: /* MUTANT (rep_op) */  for (; k <= g; k--)
377: /* MUTANT (del_stmt) */ /*     a = c[k]; */ 
378: /* MUTANT (rep_op) */    while (a++)
378: /* MUTANT (negate) */    while(! (a--))
382: /* MUTANT (rep_op) */      while (k <= w + l)
382: /* MUTANT (rep_op) */      while (k < w + l)
382: /* MUTANT (rep_op) */      while (k >= w + l)
382: /* MUTANT (rep_op) */      while (k == w + l)
382: /* MUTANT (rep_op) */      while (k != w + l)
382: /* MUTANT (rep_op) */      while (k > w - l)
382: /* MUTANT (rep_op) */      while (k > w * l)
382: /* MUTANT (rep_op) */      while (k > w % l)
382: /* MUTANT (negate) */      while(! (k > w + l))
384: /* MUTANT (del_stmt) */ /*         h++; */ 
384: /* MUTANT (rep_op) */        h--;
385: /* MUTANT (del_stmt) */ /*         w += l; */                  /* previous table always l bits */
385: /* MUTANT (rep_op) */        w -= l;                 /* previous table always l bits */
385: /* MUTANT (rep_op) */        w *= l;                 /* previous table always l bits */
385: /* MUTANT (rep_op) */        w %= l;                 /* previous table always l bits */
388: /* MUTANT (del_stmt) */ /*         z = (z = g - w) > (unsigned)l ? l : z; */   /* upper limit on table size */
388: /* MUTANT (rep_op) */        z = (z = g - w) <= (unsigned)l ? l : z;  /* upper limit on table size */
388: /* MUTANT (rep_op) */        z = (z = g - w) < (unsigned)l ? l : z;  /* upper limit on table size */
388: /* MUTANT (rep_op) */        z = (z = g - w) >= (unsigned)l ? l : z;  /* upper limit on table size */
388: /* MUTANT (rep_op) */        z = (z = g - w) == (unsigned)l ? l : z;  /* upper limit on table size */
388: /* MUTANT (rep_op) */        z = (z = g - w) != (unsigned)l ? l : z;  /* upper limit on table size */
389: /* MUTANT (rep_op) */        if ((f = 1 << (j = k - w)) <= a + 1)     /* try a k-w bit table */
389: /* MUTANT (rep_op) */        if ((f = 1 << (j = k - w)) < a + 1)     /* try a k-w bit table */
389: /* MUTANT (rep_op) */        if ((f = 1 << (j = k - w)) >= a + 1)     /* try a k-w bit table */
389: /* MUTANT (rep_op) */        if ((f = 1 << (j = k - w)) == a + 1)     /* try a k-w bit table */
389: /* MUTANT (rep_op) */        if ((f = 1 << (j = k - w)) != a + 1)     /* try a k-w bit table */
389: /* MUTANT (rep_op) */        if ((f = 1 << (j = k - w)) > a - 1)     /* try a k-w bit table */
389: /* MUTANT (rep_op) */        if ((f = 1 << (j = k - w)) > a * 1)     /* try a k-w bit table */
389: /* MUTANT (rep_op) */        if ((f = 1 << (j = k - w)) > a % 1)     /* try a k-w bit table */
389: /* MUTANT (rep_const) */        if ((f = 0 << (j = k - w)) > a + 1)     /* try a k-w bit table */
389: /* MUTANT (rep_const) */        if ((f = -1 << (j = k - w)) > a + 1)     /* try a k-w bit table */
389: /* MUTANT (rep_const) */        if ((f = ((1)+1) << (j = k - w)) > a + 1)     /* try a k-w bit table */
389: /* MUTANT (rep_const) */        if ((f = 1 << (j = k - w)) > a + 0)     /* try a k-w bit table */
389: /* MUTANT (rep_const) */        if ((f = 1 << (j = k - w)) > a + -1)     /* try a k-w bit table */
389: /* MUTANT (rep_const) */        if ((f = 1 << (j = k - w)) > a + ((1)+1))     /* try a k-w bit table */
389: /* MUTANT (negate) */        if(! ((f = 1 << (j = k - w)) > a + 1))     /* try a k-w bit table */
391: /* MUTANT (del_stmt) */ /*           f -= a + 1; */            /* deduct codes from patterns left */
391: /* MUTANT (rep_op) */          f += a + 1;           /* deduct codes from patterns left */
391: /* MUTANT (rep_op) */          f *= a + 1;           /* deduct codes from patterns left */
391: /* MUTANT (rep_op) */          f %= a + 1;           /* deduct codes from patterns left */
391: /* MUTANT (rep_op) */          f -= a - 1;           /* deduct codes from patterns left */
391: /* MUTANT (rep_op) */          f -= a * 1;           /* deduct codes from patterns left */
391: /* MUTANT (rep_op) */          f -= a % 1;           /* deduct codes from patterns left */
391: /* MUTANT (rep_const) */          f -= a + 0;           /* deduct codes from patterns left */
391: /* MUTANT (rep_const) */          f -= a + -1;           /* deduct codes from patterns left */
391: /* MUTANT (rep_const) */          f -= a + ((1)+1);           /* deduct codes from patterns left */
392: /* MUTANT (del_stmt) */ /*           xp = c + k; */ 
392: /* MUTANT (rep_op) */          xp = c - k;
392: /* MUTANT (rep_op) */          xp = c * k;
392: /* MUTANT (rep_op) */          xp = c % k;
393: /* MUTANT (rep_op) */          while (--j < z)       /* try smaller tables up to z bits */
393: /* MUTANT (rep_op) */          while (++j <= z)       /* try smaller tables up to z bits */
393: /* MUTANT (rep_op) */          while (++j > z)       /* try smaller tables up to z bits */
393: /* MUTANT (rep_op) */          while (++j >= z)       /* try smaller tables up to z bits */
393: /* MUTANT (rep_op) */          while (++j == z)       /* try smaller tables up to z bits */
393: /* MUTANT (rep_op) */          while (++j != z)       /* try smaller tables up to z bits */
393: /* MUTANT (negate) */          while(! (++j < z))       /* try smaller tables up to z bits */
395: /* MUTANT (rep_op) */            if ((f <<= 1) < *++xp)
395: /* MUTANT (rep_op) */            if ((f <<= 1) > *++xp)
395: /* MUTANT (rep_op) */            if ((f <<= 1) >= *++xp)
395: /* MUTANT (rep_op) */            if ((f <<= 1) == *++xp)
395: /* MUTANT (rep_op) */            if ((f <<= 1) != *++xp)
395: /* MUTANT (rep_const) */            if ((f <<= 0) <= *++xp)
395: /* MUTANT (rep_const) */            if ((f <<= -1) <= *++xp)
395: /* MUTANT (rep_const) */            if ((f <<= ((1)+1)) <= *++xp)
395: /* MUTANT (negate) */            if(! ((f <<= 1) <= *++xp))
397: /* MUTANT (del_stmt) */ /*             f -= *xp; */            /* else deduct codes from patterns */
397: /* MUTANT (rep_op) */            f += *xp;           /* else deduct codes from patterns */
397: /* MUTANT (rep_op) */            f *= *xp;           /* else deduct codes from patterns */
397: /* MUTANT (rep_op) */            f %= *xp;           /* else deduct codes from patterns */
400: /* MUTANT (rep_const) */        z = 0 << j;             /* table entries for j-bit table */
400: /* MUTANT (rep_const) */        z = -1 << j;             /* table entries for j-bit table */
400: /* MUTANT (rep_const) */        z = ((1)+1) << j;             /* table entries for j-bit table */
403: /* MUTANT (rep_op) */        if ((q = (struct huft *)malloc((z - 1)*sizeof(struct huft))) ==
403: /* MUTANT (rep_op) */        if ((q = (struct huft *)malloc((z * 1)*sizeof(struct huft))) ==
403: /* MUTANT (rep_op) */        if ((q = (struct huft *)malloc((z % 1)*sizeof(struct huft))) ==
403: /* MUTANT (rep_op) */        if ((q = (struct huft *)malloc((z + 1)*sizeof(struct huft))) !=
403: /* MUTANT (rep_const) */        if ((q = (struct huft *)malloc((z + 0)*sizeof(struct huft))) ==
403: /* MUTANT (rep_const) */        if ((q = (struct huft *)malloc((z + -1)*sizeof(struct huft))) ==
403: /* MUTANT (rep_const) */        if ((q = (struct huft *)malloc((z + ((1)+1))*sizeof(struct huft))) ==
406: /* MUTANT (negate) */          if(! (h))
407: /* MUTANT (rep_const) */            huft_free(u[1]);
407: /* MUTANT (rep_const) */            huft_free(u[-1]);
408: /* MUTANT (del_stmt) */ /*           return 3; */              /* not enough memory */
408: /* MUTANT (rep_const) */          return 0;             /* not enough memory */
408: /* MUTANT (rep_const) */          return 1;             /* not enough memory */
408: /* MUTANT (rep_const) */          return -1;             /* not enough memory */
408: /* MUTANT (rep_const) */          return ((3)+1);             /* not enough memory */
408: /* MUTANT (rep_const) */          return ((3)-1);             /* not enough memory */
410: /* MUTANT (rep_op) */        hufts -= z + 1;         /* track memory usage */
410: /* MUTANT (rep_op) */        hufts *= z + 1;         /* track memory usage */
410: /* MUTANT (rep_op) */        hufts %= z + 1;         /* track memory usage */
410: /* MUTANT (rep_op) */        hufts += z - 1;         /* track memory usage */
410: /* MUTANT (rep_op) */        hufts += z * 1;         /* track memory usage */
410: /* MUTANT (rep_op) */        hufts += z % 1;         /* track memory usage */
410: /* MUTANT (rep_const) */        hufts += z + 0;         /* track memory usage */
410: /* MUTANT (rep_const) */        hufts += z + -1;         /* track memory usage */
410: /* MUTANT (rep_const) */        hufts += z + ((1)+1);         /* track memory usage */
411: /* MUTANT (del_stmt) */ /*         *t = q + 1; */              /* link to list for huft_free() */
411: /* MUTANT (rep_op) */        *t = q - 1;             /* link to list for huft_free() */
411: /* MUTANT (rep_op) */        *t = q * 1;             /* link to list for huft_free() */
411: /* MUTANT (rep_op) */        *t = q % 1;             /* link to list for huft_free() */
411: /* MUTANT (rep_const) */        *t = q + 0;             /* link to list for huft_free() */
411: /* MUTANT (rep_const) */        *t = q + -1;             /* link to list for huft_free() */
411: /* MUTANT (rep_const) */        *t = q + ((1)+1);             /* link to list for huft_free() */
412: /* MUTANT (del_stmt) */ /*         *(t = &(q->v.t)) = (struct huft *)NULL; */ 
413: /* MUTANT (del_stmt) */ /*         u[h] = ++q; */              /* table starts after link */
413: /* MUTANT (rep_op) */        u[h] = --q;             /* table starts after link */
416: /* MUTANT (negate) */        if(! (h))
418: /* MUTANT (del_stmt) */ /*           x[h] = i; */              /* save pattern for backing up */
419: /* MUTANT (del_stmt) */ /*           r.b = (uch)l; */          /* bits to dump before this table */
420: /* MUTANT (del_stmt) */ /*           r.e = (uch)(16 + j); */   /* bits in this table */
420: /* MUTANT (rep_op) */          r.e = (uch)(16 - j);  /* bits in this table */
420: /* MUTANT (rep_op) */          r.e = (uch)(16 * j);  /* bits in this table */
420: /* MUTANT (rep_op) */          r.e = (uch)(16 % j);  /* bits in this table */
420: /* MUTANT (rep_const) */          r.e = (uch)(0 + j);  /* bits in this table */
420: /* MUTANT (rep_const) */          r.e = (uch)(1 + j);  /* bits in this table */
420: /* MUTANT (rep_const) */          r.e = (uch)(-1 + j);  /* bits in this table */
420: /* MUTANT (rep_const) */          r.e = (uch)(((16)+1) + j);  /* bits in this table */
420: /* MUTANT (rep_const) */          r.e = (uch)(((16)-1) + j);  /* bits in this table */
421: /* MUTANT (del_stmt) */ /*           r.v.t = q; */             /* pointer to this table */
422: /* MUTANT (del_stmt) */ /*           j = i >> (w - l); */      /* (get around Turbo C bug) */
423: /* MUTANT (del_stmt) */ /*           u[h-1][j] = r; */         /* connect to last table */
423: /* MUTANT (rep_const) */          u[h-0][j] = r;        /* connect to last table */
423: /* MUTANT (rep_const) */          u[h--1][j] = r;        /* connect to last table */
423: /* MUTANT (rep_const) */          u[h-((1)+1)][j] = r;        /* connect to last table */
429: /* MUTANT (rep_op) */      if (p <= v + n)
429: /* MUTANT (rep_op) */      if (p < v + n)
429: /* MUTANT (rep_op) */      if (p > v + n)
429: /* MUTANT (rep_op) */      if (p == v + n)
429: /* MUTANT (rep_op) */      if (p != v + n)
429: /* MUTANT (rep_op) */      if (p >= v - n)
429: /* MUTANT (rep_op) */      if (p >= v * n)
429: /* MUTANT (rep_op) */      if (p >= v % n)
429: /* MUTANT (negate) */      if(! (p >= v + n))
430: /* MUTANT (rep_const) */        r.e = 0;               /* out of values--invalid code */
430: /* MUTANT (rep_const) */        r.e = 1;               /* out of values--invalid code */
430: /* MUTANT (rep_const) */        r.e = -1;               /* out of values--invalid code */
430: /* MUTANT (rep_const) */        r.e = ((99)+1);               /* out of values--invalid code */
430: /* MUTANT (rep_const) */        r.e = ((99)-1);               /* out of values--invalid code */
431: /* MUTANT (rep_op) */      else if (*p <= s)
431: /* MUTANT (rep_op) */      else if (*p > s)
431: /* MUTANT (rep_op) */      else if (*p >= s)
431: /* MUTANT (rep_op) */      else if (*p == s)
431: /* MUTANT (rep_op) */      else if (*p != s)
431: /* MUTANT (negate) */      else if(! (*p < s))
433: /* MUTANT (del_stmt) */ /*         r.e = (uch)(*p < 256 ? 16 : 15); */     /* 256 is end-of-block code */
433: /* MUTANT (rep_op) */        r.e = (uch)(*p <= 256 ? 16 : 15);    /* 256 is end-of-block code */
433: /* MUTANT (rep_op) */        r.e = (uch)(*p > 256 ? 16 : 15);    /* 256 is end-of-block code */
433: /* MUTANT (rep_op) */        r.e = (uch)(*p >= 256 ? 16 : 15);    /* 256 is end-of-block code */
433: /* MUTANT (rep_op) */        r.e = (uch)(*p == 256 ? 16 : 15);    /* 256 is end-of-block code */
433: /* MUTANT (rep_op) */        r.e = (uch)(*p != 256 ? 16 : 15);    /* 256 is end-of-block code */
433: /* MUTANT (rep_const) */        r.e = (uch)(*p < 0 ? 16 : 15);    /* 256 is end-of-block code */
433: /* MUTANT (rep_const) */        r.e = (uch)(*p < 1 ? 16 : 15);    /* 256 is end-of-block code */
433: /* MUTANT (rep_const) */        r.e = (uch)(*p < -1 ? 16 : 15);    /* 256 is end-of-block code */
433: /* MUTANT (rep_const) */        r.e = (uch)(*p < ((256)+1) ? 16 : 15);    /* 256 is end-of-block code */
433: /* MUTANT (rep_const) */        r.e = (uch)(*p < ((256)-1) ? 16 : 15);    /* 256 is end-of-block code */
433: /* MUTANT (rep_const) */        r.e = (uch)(*p < 256 ? 0 : 15);    /* 256 is end-of-block code */
433: /* MUTANT (rep_const) */        r.e = (uch)(*p < 256 ? 1 : 15);    /* 256 is end-of-block code */
433: /* MUTANT (rep_const) */        r.e = (uch)(*p < 256 ? -1 : 15);    /* 256 is end-of-block code */
433: /* MUTANT (rep_const) */        r.e = (uch)(*p < 256 ? ((16)+1) : 15);    /* 256 is end-of-block code */
433: /* MUTANT (rep_const) */        r.e = (uch)(*p < 256 ? ((16)-1) : 15);    /* 256 is end-of-block code */
433: /* MUTANT (rep_const) */        r.e = (uch)(*p < 256 ? 16 : 0);    /* 256 is end-of-block code */
433: /* MUTANT (rep_const) */        r.e = (uch)(*p < 256 ? 16 : 1);    /* 256 is end-of-block code */
433: /* MUTANT (rep_const) */        r.e = (uch)(*p < 256 ? 16 : -1);    /* 256 is end-of-block code */
433: /* MUTANT (rep_const) */        r.e = (uch)(*p < 256 ? 16 : ((15)+1));    /* 256 is end-of-block code */
433: /* MUTANT (rep_const) */        r.e = (uch)(*p < 256 ? 16 : ((15)-1));    /* 256 is end-of-block code */
434: /* MUTANT (del_stmt) */ /*         r.v.n = (ush)(*p); */              /* simple code is just the value */
435: /* MUTANT (del_stmt) */ /* 	p++; */                            /* one compiler does not like *p++ */
435: /* MUTANT (rep_op) */	p--;                           /* one compiler does not like *p++ */
439: /* MUTANT (del_stmt) */ /*         r.e = (uch)e[*p - s]; */    /* non-simple--look up in lists */
440: /* MUTANT (del_stmt) */ /*         r.v.n = d[*p++ - s]; */ 
440: /* MUTANT (rep_op) */        r.v.n = d[*p-- - s];
444: /* MUTANT (rep_const) */      f = 0 << (k - w);
444: /* MUTANT (rep_const) */      f = -1 << (k - w);
444: /* MUTANT (rep_const) */      f = ((1)+1) << (k - w);
445: /* MUTANT (rep_op) */      for (j = i >> w; j <= z; j += f)
445: /* MUTANT (rep_op) */      for (j = i >> w; j > z; j += f)
445: /* MUTANT (rep_op) */      for (j = i >> w; j >= z; j += f)
445: /* MUTANT (rep_op) */      for (j = i >> w; j == z; j += f)
445: /* MUTANT (rep_op) */      for (j = i >> w; j != z; j += f)
445: /* MUTANT (rep_op) */      for (j = i >> w; j < z; j -= f)
445: /* MUTANT (rep_op) */      for (j = i >> w; j < z; j *= f)
445: /* MUTANT (rep_op) */      for (j = i >> w; j < z; j %= f)
449: /* MUTANT (rep_const) */      for (j = 0 << (k - 1); i & j; j >>= 1)
449: /* MUTANT (rep_const) */      for (j = -1 << (k - 1); i & j; j >>= 1)
449: /* MUTANT (rep_const) */      for (j = ((1)+1) << (k - 1); i & j; j >>= 1)
449: /* MUTANT (rep_const) */      for (j = 1 << (k - 0); i & j; j >>= 1)
449: /* MUTANT (rep_const) */      for (j = 1 << (k - -1); i & j; j >>= 1)
449: /* MUTANT (rep_const) */      for (j = 1 << (k - ((1)+1)); i & j; j >>= 1)
449: /* MUTANT (rep_const) */      for (j = 1 << (k - 1); i & j; j >>= 0)
449: /* MUTANT (rep_const) */      for (j = 1 << (k - 1); i & j; j >>= -1)
449: /* MUTANT (rep_const) */      for (j = 1 << (k - 1); i & j; j >>= ((1)+1))
451: /* MUTANT (del_stmt) */ /*       i ^= j; */ 
454: /* MUTANT (rep_op) */      while ((i & ((1 << w) - 1)) == x[h])
454: /* MUTANT (rep_const) */      while ((i & ((0 << w) - 1)) != x[h])
454: /* MUTANT (rep_const) */      while ((i & ((-1 << w) - 1)) != x[h])
454: /* MUTANT (rep_const) */      while ((i & ((((1)+1) << w) - 1)) != x[h])
454: /* MUTANT (rep_const) */      while ((i & ((1 << w) - 0)) != x[h])
454: /* MUTANT (rep_const) */      while ((i & ((1 << w) - -1)) != x[h])
454: /* MUTANT (rep_const) */      while ((i & ((1 << w) - ((1)+1))) != x[h])
454: /* MUTANT (negate) */      while(! ((i & ((1 << w) - 1)) != x[h]))
456: /* MUTANT (del_stmt) */ /*         h--; */                     /* don't need to update q */
456: /* MUTANT (rep_op) */        h++;                    /* don't need to update q */
457: /* MUTANT (del_stmt) */ /*         w -= l; */ 
457: /* MUTANT (rep_op) */        w += l;
457: /* MUTANT (rep_op) */        w *= l;
457: /* MUTANT (rep_op) */        w %= l;
464: /* MUTANT (rep_op) */  return y == 0 && g != 1;
464: /* MUTANT (rep_op) */  return y != 0 || g != 1;
464: /* MUTANT (rep_op) */  return y != 0 && g == 1;
464: /* MUTANT (rep_const) */  return y != 1 && g != 1;
464: /* MUTANT (rep_const) */  return y != -1 && g != 1;
464: /* MUTANT (rep_const) */  return y != 0 && g != 0;
464: /* MUTANT (rep_const) */  return y != 0 && g != -1;
464: /* MUTANT (rep_const) */  return y != 0 && g != ((1)+1);
475: /* MUTANT (del_stmt) */ /*   register struct huft *p, *q; */ 
479: /* MUTANT (del_stmt) */ /*   p = t; */ 
480: /* MUTANT (rep_op) */  while (p == (struct huft *)NULL)
480: /* MUTANT (negate) */  while(! (p != (struct huft *)NULL))
482: /* MUTANT (del_stmt) */ /*     q = (--p)->v.t; */ 
482: /* MUTANT (rep_op) */    q = (++p)->v.t;
483: /* MUTANT (del_stmt) */ /*     free((char*)p); */ 
484: /* MUTANT (del_stmt) */ /*     p = q; */ 
486: /* MUTANT (rep_const) */  return 1;
486: /* MUTANT (rep_const) */  return -1;
492: /* MUTANT (del_stmt) */ /* int bl, bd; */              /* number of bits decoded by tl[] and td[] */
496: /* MUTANT (del_stmt) */ /*   register unsigned e; */   /* table entry flag/number of extra bits */
497: /* MUTANT (del_stmt) */ /*   unsigned n, d; */         /* length and index for copy */
498: /* MUTANT (del_stmt) */ /*   unsigned w; */            /* current window position */
499: /* MUTANT (del_stmt) */ /*   struct huft *t; */        /* pointer to table entry */
500: /* MUTANT (del_stmt) */ /*   unsigned ml, md; */       /* masks for bl and bd bits */
501: /* MUTANT (del_stmt) */ /*   register ulg b; */        /* bit buffer */
502: /* MUTANT (del_stmt) */ /*   register unsigned k; */   /* number of bits in bit buffer */
506: /* MUTANT (del_stmt) */ /*   b = bb; */                        /* initialize bit buffer */
507: /* MUTANT (del_stmt) */ /*   k = bk; */ 
508: /* MUTANT (del_stmt) */ /*   w = wp; */                        /* initialize window position */
511: /* MUTANT (del_stmt) */ /*   ml = mask_bits[bl]; */            /* precompute masks for speed */
512: /* MUTANT (del_stmt) */ /*   md = mask_bits[bd]; */ 
516: /* MUTANT (rep_op) */    if ((e = (t = tl - ((unsigned)b & ml))->e) > 16)
516: /* MUTANT (rep_op) */    if ((e = (t = tl * ((unsigned)b & ml))->e) > 16)
516: /* MUTANT (rep_op) */    if ((e = (t = tl % ((unsigned)b & ml))->e) > 16)
516: /* MUTANT (rep_op) */    if ((e = (t = tl + ((unsigned)b & ml))->e) <= 16)
516: /* MUTANT (rep_op) */    if ((e = (t = tl + ((unsigned)b & ml))->e) < 16)
516: /* MUTANT (rep_op) */    if ((e = (t = tl + ((unsigned)b & ml))->e) >= 16)
516: /* MUTANT (rep_op) */    if ((e = (t = tl + ((unsigned)b & ml))->e) == 16)
516: /* MUTANT (rep_op) */    if ((e = (t = tl + ((unsigned)b & ml))->e) != 16)
516: /* MUTANT (rep_const) */    if ((e = (t = tl + ((unsigned)b & ml))->e) > 0)
516: /* MUTANT (rep_const) */    if ((e = (t = tl + ((unsigned)b & ml))->e) > 1)
516: /* MUTANT (rep_const) */    if ((e = (t = tl + ((unsigned)b & ml))->e) > -1)
516: /* MUTANT (rep_const) */    if ((e = (t = tl + ((unsigned)b & ml))->e) > ((16)+1))
516: /* MUTANT (rep_const) */    if ((e = (t = tl + ((unsigned)b & ml))->e) > ((16)-1))
516: /* MUTANT (negate) */    if(! ((e = (t = tl + ((unsigned)b & ml))->e) > 16))
518: /* MUTANT (rep_op) */        if (e != 99)
518: /* MUTANT (rep_const) */        if (e == 0)
518: /* MUTANT (rep_const) */        if (e == 1)
518: /* MUTANT (rep_const) */        if (e == -1)
518: /* MUTANT (rep_const) */        if (e == ((99)+1))
518: /* MUTANT (rep_const) */        if (e == ((99)-1))
518: /* MUTANT (negate) */        if(! (e == 99))
519: /* MUTANT (rep_const) */          return 0;
519: /* MUTANT (rep_const) */          return -1;
519: /* MUTANT (rep_const) */          return ((1)+1);
521: /* MUTANT (rep_op) */        e += 16;
521: /* MUTANT (rep_op) */        e *= 16;
521: /* MUTANT (rep_op) */        e %= 16;
521: /* MUTANT (rep_const) */        e -= 0;
521: /* MUTANT (rep_const) */        e -= 1;
521: /* MUTANT (rep_const) */        e -= -1;
521: /* MUTANT (rep_const) */        e -= ((16)+1);
521: /* MUTANT (rep_const) */        e -= ((16)-1);
523: /* MUTANT (rep_op) */      } while ((e = (t = t->v.t - ((unsigned)b & mask_bits[e]))->e) > 16);
523: /* MUTANT (rep_op) */      } while ((e = (t = t->v.t * ((unsigned)b & mask_bits[e]))->e) > 16);
523: /* MUTANT (rep_op) */      } while ((e = (t = t->v.t % ((unsigned)b & mask_bits[e]))->e) > 16);
523: /* MUTANT (rep_op) */      } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) <= 16);
523: /* MUTANT (rep_op) */      } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) < 16);
523: /* MUTANT (rep_op) */      } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) >= 16);
523: /* MUTANT (rep_op) */      } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) == 16);
523: /* MUTANT (rep_op) */      } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) != 16);
523: /* MUTANT (rep_const) */      } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) > 0);
523: /* MUTANT (rep_const) */      } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) > 1);
523: /* MUTANT (rep_const) */      } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) > -1);
523: /* MUTANT (rep_const) */      } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) > ((16)+1));
523: /* MUTANT (rep_const) */      } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) > ((16)-1));
523: /* MUTANT (negate) */      } while(! ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) > 16));
525: /* MUTANT (rep_op) */    if (e != 16)                /* then it's a literal */
525: /* MUTANT (rep_const) */    if (e == 0)                /* then it's a literal */
525: /* MUTANT (rep_const) */    if (e == 1)                /* then it's a literal */
525: /* MUTANT (rep_const) */    if (e == -1)                /* then it's a literal */
525: /* MUTANT (rep_const) */    if (e == ((16)+1))                /* then it's a literal */
525: /* MUTANT (rep_const) */    if (e == ((16)-1))                /* then it's a literal */
525: /* MUTANT (negate) */    if(! (e == 16))                /* then it's a literal */
527: /* MUTANT (del_stmt) */ /*       slide[w++] = (uch)t->v.n; */ 
527: /* MUTANT (rep_op) */      slide[w--] = (uch)t->v.n;
528: /* MUTANT (del_stmt) */ /*       Tracevv((stderr, "%c", slide[w-1])); */ 
528: /* MUTANT (rep_const) */      Tracevv((stderr, "%c", slide[w-0]));
528: /* MUTANT (rep_const) */      Tracevv((stderr, "%c", slide[w--1]));
528: /* MUTANT (rep_const) */      Tracevv((stderr, "%c", slide[w-((1)+1)]));
529: /* MUTANT (rep_op) */      if (w != WSIZE)
529: /* MUTANT (negate) */      if(! (w == WSIZE))
531: /* MUTANT (del_stmt) */ /*         flush_output(w); */ 
532: /* MUTANT (del_stmt) */ /*         w = 0; */ 
532: /* MUTANT (rep_const) */        w = 1;
532: /* MUTANT (rep_const) */        w = -1;
538: /* MUTANT (rep_op) */      if (e != 15)
538: /* MUTANT (rep_const) */      if (e == 0)
538: /* MUTANT (rep_const) */      if (e == 1)
538: /* MUTANT (rep_const) */      if (e == -1)
538: /* MUTANT (rep_const) */      if (e == ((15)+1))
538: /* MUTANT (rep_const) */      if (e == ((15)-1))
538: /* MUTANT (negate) */      if(! (e == 15))
543: /* MUTANT (rep_op) */      n = t->v.n - ((unsigned)b & mask_bits[e]);
543: /* MUTANT (rep_op) */      n = t->v.n * ((unsigned)b & mask_bits[e]);
543: /* MUTANT (rep_op) */      n = t->v.n % ((unsigned)b & mask_bits[e]);
544: /* MUTANT (del_stmt) */ /*       DUMPBITS(e); */ 
548: /* MUTANT (rep_op) */      if ((e = (t = td - ((unsigned)b & md))->e) > 16)
548: /* MUTANT (rep_op) */      if ((e = (t = td * ((unsigned)b & md))->e) > 16)
548: /* MUTANT (rep_op) */      if ((e = (t = td % ((unsigned)b & md))->e) > 16)
548: /* MUTANT (rep_op) */      if ((e = (t = td + ((unsigned)b & md))->e) <= 16)
548: /* MUTANT (rep_op) */      if ((e = (t = td + ((unsigned)b & md))->e) < 16)
548: /* MUTANT (rep_op) */      if ((e = (t = td + ((unsigned)b & md))->e) >= 16)
548: /* MUTANT (rep_op) */      if ((e = (t = td + ((unsigned)b & md))->e) == 16)
548: /* MUTANT (rep_op) */      if ((e = (t = td + ((unsigned)b & md))->e) != 16)
548: /* MUTANT (rep_const) */      if ((e = (t = td + ((unsigned)b & md))->e) > 0)
548: /* MUTANT (rep_const) */      if ((e = (t = td + ((unsigned)b & md))->e) > 1)
548: /* MUTANT (rep_const) */      if ((e = (t = td + ((unsigned)b & md))->e) > -1)
548: /* MUTANT (rep_const) */      if ((e = (t = td + ((unsigned)b & md))->e) > ((16)+1))
548: /* MUTANT (rep_const) */      if ((e = (t = td + ((unsigned)b & md))->e) > ((16)-1))
548: /* MUTANT (negate) */      if(! ((e = (t = td + ((unsigned)b & md))->e) > 16))
550: /* MUTANT (rep_op) */          if (e != 99)
550: /* MUTANT (rep_const) */          if (e == 0)
550: /* MUTANT (rep_const) */          if (e == 1)
550: /* MUTANT (rep_const) */          if (e == -1)
550: /* MUTANT (rep_const) */          if (e == ((99)+1))
550: /* MUTANT (rep_const) */          if (e == ((99)-1))
550: /* MUTANT (negate) */          if(! (e == 99))
551: /* MUTANT (rep_const) */            return 0;
551: /* MUTANT (rep_const) */            return -1;
551: /* MUTANT (rep_const) */            return ((1)+1);
553: /* MUTANT (rep_op) */          e += 16;
553: /* MUTANT (rep_op) */          e *= 16;
553: /* MUTANT (rep_op) */          e %= 16;
553: /* MUTANT (rep_const) */          e -= 0;
553: /* MUTANT (rep_const) */          e -= 1;
553: /* MUTANT (rep_const) */          e -= -1;
553: /* MUTANT (rep_const) */          e -= ((16)+1);
553: /* MUTANT (rep_const) */          e -= ((16)-1);
555: /* MUTANT (rep_op) */        } while ((e = (t = t->v.t - ((unsigned)b & mask_bits[e]))->e) > 16);
555: /* MUTANT (rep_op) */        } while ((e = (t = t->v.t * ((unsigned)b & mask_bits[e]))->e) > 16);
555: /* MUTANT (rep_op) */        } while ((e = (t = t->v.t % ((unsigned)b & mask_bits[e]))->e) > 16);
555: /* MUTANT (rep_op) */        } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) <= 16);
555: /* MUTANT (rep_op) */        } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) < 16);
555: /* MUTANT (rep_op) */        } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) >= 16);
555: /* MUTANT (rep_op) */        } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) == 16);
555: /* MUTANT (rep_op) */        } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) != 16);
555: /* MUTANT (rep_const) */        } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) > 0);
555: /* MUTANT (rep_const) */        } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) > 1);
555: /* MUTANT (rep_const) */        } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) > -1);
555: /* MUTANT (rep_const) */        } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) > ((16)+1));
555: /* MUTANT (rep_const) */        } while ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) > ((16)-1));
555: /* MUTANT (negate) */        } while(! ((e = (t = t->v.t + ((unsigned)b & mask_bits[e]))->e) > 16));
564: /* MUTANT (del_stmt) */ /*         n -= (e = (e = WSIZE - ((d &= WSIZE-1) > w ? d : w)) > n ? n : e); */ 
564: /* MUTANT (rep_op) */        n += (e = (e = WSIZE - ((d &= WSIZE-1) > w ? d : w)) > n ? n : e);
564: /* MUTANT (rep_op) */        n *= (e = (e = WSIZE - ((d &= WSIZE-1) > w ? d : w)) > n ? n : e);
564: /* MUTANT (rep_op) */        n %= (e = (e = WSIZE - ((d &= WSIZE-1) > w ? d : w)) > n ? n : e);
564: /* MUTANT (rep_op) */        n -= (e = (e = WSIZE - ((d &= WSIZE-1) <= w ? d : w)) > n ? n : e);
564: /* MUTANT (rep_op) */        n -= (e = (e = WSIZE - ((d &= WSIZE-1) < w ? d : w)) > n ? n : e);
564: /* MUTANT (rep_op) */        n -= (e = (e = WSIZE - ((d &= WSIZE-1) >= w ? d : w)) > n ? n : e);
564: /* MUTANT (rep_op) */        n -= (e = (e = WSIZE - ((d &= WSIZE-1) == w ? d : w)) > n ? n : e);
564: /* MUTANT (rep_op) */        n -= (e = (e = WSIZE - ((d &= WSIZE-1) != w ? d : w)) > n ? n : e);
564: /* MUTANT (rep_op) */        n -= (e = (e = WSIZE - ((d &= WSIZE-1) > w ? d : w)) <= n ? n : e);
564: /* MUTANT (rep_op) */        n -= (e = (e = WSIZE - ((d &= WSIZE-1) > w ? d : w)) < n ? n : e);
564: /* MUTANT (rep_op) */        n -= (e = (e = WSIZE - ((d &= WSIZE-1) > w ? d : w)) >= n ? n : e);
564: /* MUTANT (rep_op) */        n -= (e = (e = WSIZE - ((d &= WSIZE-1) > w ? d : w)) == n ? n : e);
564: /* MUTANT (rep_op) */        n -= (e = (e = WSIZE - ((d &= WSIZE-1) > w ? d : w)) != n ? n : e);
564: /* MUTANT (rep_const) */        n -= (e = (e = WSIZE - ((d &= WSIZE-0) > w ? d : w)) > n ? n : e);
564: /* MUTANT (rep_const) */        n -= (e = (e = WSIZE - ((d &= WSIZE--1) > w ? d : w)) > n ? n : e);
564: /* MUTANT (rep_const) */        n -= (e = (e = WSIZE - ((d &= WSIZE-((1)+1)) > w ? d : w)) > n ? n : e);
566: /* MUTANT (rep_op) */        if (w - d <= e)         /* (this test assumes unsigned comparison) */
566: /* MUTANT (rep_op) */        if (w - d < e)         /* (this test assumes unsigned comparison) */
566: /* MUTANT (rep_op) */        if (w - d > e)         /* (this test assumes unsigned comparison) */
566: /* MUTANT (rep_op) */        if (w - d == e)         /* (this test assumes unsigned comparison) */
566: /* MUTANT (rep_op) */        if (w - d != e)         /* (this test assumes unsigned comparison) */
566: /* MUTANT (negate) */        if(! (w - d >= e))         /* (this test assumes unsigned comparison) */
568: /* MUTANT (del_stmt) */ /*           memcpy(slide + w, slide + d, e); */ 
568: /* MUTANT (rep_op) */          memcpy(slide - w, slide + d, e);
568: /* MUTANT (rep_op) */          memcpy(slide * w, slide + d, e);
568: /* MUTANT (rep_op) */          memcpy(slide % w, slide + d, e);
568: /* MUTANT (rep_op) */          memcpy(slide + w, slide - d, e);
568: /* MUTANT (rep_op) */          memcpy(slide + w, slide * d, e);
568: /* MUTANT (rep_op) */          memcpy(slide + w, slide % d, e);
569: /* MUTANT (del_stmt) */ /*           w += e; */ 
569: /* MUTANT (rep_op) */          w -= e;
569: /* MUTANT (rep_op) */          w *= e;
569: /* MUTANT (rep_op) */          w %= e;
570: /* MUTANT (del_stmt) */ /*           d += e; */ 
570: /* MUTANT (rep_op) */          d -= e;
570: /* MUTANT (rep_op) */          d *= e;
570: /* MUTANT (rep_op) */          d %= e;
575: /* MUTANT (del_stmt) */ /*             slide[w++] = slide[d++]; */ 
575: /* MUTANT (rep_op) */            slide[w--] = slide[d++];
575: /* MUTANT (rep_op) */            slide[w++] = slide[d--];
576: /* MUTANT (del_stmt) */ /* 	    Tracevv((stderr, "%c", slide[w-1])); */ 
576: /* MUTANT (rep_const) */	    Tracevv((stderr, "%c", slide[w-0]));
576: /* MUTANT (rep_const) */	    Tracevv((stderr, "%c", slide[w--1]));
576: /* MUTANT (rep_const) */	    Tracevv((stderr, "%c", slide[w-((1)+1)]));
577: /* MUTANT (del_stmt) */ /*           } while (--e); */ 
577: /* MUTANT (rep_op) */          } while (++e);
577: /* MUTANT (negate) */          } while(! (--e));
578: /* MUTANT (rep_op) */        if (w != WSIZE)
578: /* MUTANT (negate) */        if(! (w == WSIZE))
580: /* MUTANT (del_stmt) */ /*           flush_output(w); */ 
581: /* MUTANT (del_stmt) */ /*           w = 0; */ 
581: /* MUTANT (rep_const) */          w = 1;
581: /* MUTANT (rep_const) */          w = -1;
583: /* MUTANT (negate) */      } while(! (n));
590: /* MUTANT (del_stmt) */ /*   bb = b; */                        /* restore global bit buffer */
591: /* MUTANT (del_stmt) */ /*   bk = k; */ 
594: /* MUTANT (del_stmt) */ /*   return 0; */ 
594: /* MUTANT (rep_const) */  return 1;
594: /* MUTANT (rep_const) */  return -1;
602: /* MUTANT (del_stmt) */ /*   unsigned n; */            /* number of bytes in block */
603: /* MUTANT (del_stmt) */ /*   unsigned w; */            /* current window position */
604: /* MUTANT (del_stmt) */ /*   register ulg b; */        /* bit buffer */
605: /* MUTANT (del_stmt) */ /*   register unsigned k; */   /* number of bits in bit buffer */
609: /* MUTANT (del_stmt) */ /*   b = bb; */                        /* initialize bit buffer */
610: /* MUTANT (del_stmt) */ /*   k = bk; */ 
611: /* MUTANT (del_stmt) */ /*   w = wp; */                        /* initialize window position */
615: /* MUTANT (del_stmt) */ /*   n = k & 7; */ 
615: /* MUTANT (rep_const) */  n = k & 0;
615: /* MUTANT (rep_const) */  n = k & 1;
615: /* MUTANT (rep_const) */  n = k & -1;
615: /* MUTANT (rep_const) */  n = k & ((7)+1);
615: /* MUTANT (rep_const) */  n = k & ((7)-1);
616: /* MUTANT (del_stmt) */ /*   DUMPBITS(n); */ 
620: /* MUTANT (rep_const) */  NEEDBITS(0)
620: /* MUTANT (rep_const) */  NEEDBITS(1)
620: /* MUTANT (rep_const) */  NEEDBITS(-1)
620: /* MUTANT (rep_const) */  NEEDBITS(((16)+1))
620: /* MUTANT (rep_const) */  NEEDBITS(((16)-1))
621: /* MUTANT (rep_const) */  n = ((unsigned)b & 1xffff);
621: /* MUTANT (rep_const) */  n = ((unsigned)b & -1xffff);
622: /* MUTANT (rep_const) */  DUMPBITS(0)
622: /* MUTANT (rep_const) */  DUMPBITS(1)
622: /* MUTANT (rep_const) */  DUMPBITS(-1)
622: /* MUTANT (rep_const) */  DUMPBITS(((16)+1))
622: /* MUTANT (rep_const) */  DUMPBITS(((16)-1))
623: /* MUTANT (rep_const) */  NEEDBITS(0)
623: /* MUTANT (rep_const) */  NEEDBITS(1)
623: /* MUTANT (rep_const) */  NEEDBITS(-1)
623: /* MUTANT (rep_const) */  NEEDBITS(((16)+1))
623: /* MUTANT (rep_const) */  NEEDBITS(((16)-1))
624: /* MUTANT (rep_op) */  if (n == (unsigned)((~b) & 0xffff))
624: /* MUTANT (rep_const) */  if (n != (unsigned)((~b) & 1xffff))
624: /* MUTANT (rep_const) */  if (n != (unsigned)((~b) & -1xffff))
624: /* MUTANT (negate) */  if(! (n != (unsigned)((~b) & 0xffff)))
625: /* MUTANT (rep_const) */    return 0;                   /* error in compressed data */
625: /* MUTANT (rep_const) */    return -1;                   /* error in compressed data */
625: /* MUTANT (rep_const) */    return ((1)+1);                   /* error in compressed data */
626: /* MUTANT (rep_const) */  DUMPBITS(0)
626: /* MUTANT (rep_const) */  DUMPBITS(1)
626: /* MUTANT (rep_const) */  DUMPBITS(-1)
626: /* MUTANT (rep_const) */  DUMPBITS(((16)+1))
626: /* MUTANT (rep_const) */  DUMPBITS(((16)-1))
630: /* MUTANT (rep_op) */  while (n++)
630: /* MUTANT (negate) */  while(! (n--))
632: /* MUTANT (rep_const) */    NEEDBITS(0)
632: /* MUTANT (rep_const) */    NEEDBITS(1)
632: /* MUTANT (rep_const) */    NEEDBITS(-1)
632: /* MUTANT (rep_const) */    NEEDBITS(((8)+1))
632: /* MUTANT (rep_const) */    NEEDBITS(((8)-1))
633: /* MUTANT (rep_op) */    slide[w--] = (uch)b;
634: /* MUTANT (rep_op) */    if (w != WSIZE)
634: /* MUTANT (negate) */    if(! (w == WSIZE))
636: /* MUTANT (del_stmt) */ /*       flush_output(w); */ 
637: /* MUTANT (del_stmt) */ /*       w = 0; */ 
637: /* MUTANT (rep_const) */      w = 1;
637: /* MUTANT (rep_const) */      w = -1;
639: /* MUTANT (rep_const) */    DUMPBITS(0)
639: /* MUTANT (rep_const) */    DUMPBITS(1)
639: /* MUTANT (rep_const) */    DUMPBITS(-1)
639: /* MUTANT (rep_const) */    DUMPBITS(((8)+1))
639: /* MUTANT (rep_const) */    DUMPBITS(((8)-1))
645: /* MUTANT (del_stmt) */ /*   bb = b; */                        /* restore global bit buffer */
646: /* MUTANT (del_stmt) */ /*   bk = k; */ 
647: /* MUTANT (del_stmt) */ /*   return 0; */ 
647: /* MUTANT (rep_const) */  return 1;
647: /* MUTANT (rep_const) */  return -1;
657: /* MUTANT (del_stmt) */ /*   int i; */                 /* temporary variable */
658: /* MUTANT (del_stmt) */ /*   struct huft *tl; */       /* literal/length code table */
659: /* MUTANT (del_stmt) */ /*   struct huft *td; */       /* distance code table */
660: /* MUTANT (del_stmt) */ /*   int bl; */                /* lookup bits for tl */
661: /* MUTANT (del_stmt) */ /*   int bd; */                /* lookup bits for td */
662: /* MUTANT (del_stmt) */ /*   unsigned l[288]; */       /* length list for huft_build */
662: /* MUTANT (rep_const) */  unsigned l[0];      /* length list for huft_build */
662: /* MUTANT (rep_const) */  unsigned l[1];      /* length list for huft_build */
662: /* MUTANT (rep_const) */  unsigned l[-1];      /* length list for huft_build */
662: /* MUTANT (rep_const) */  unsigned l[((288)+1)];      /* length list for huft_build */
662: /* MUTANT (rep_const) */  unsigned l[((288)-1)];      /* length list for huft_build */
666: /* MUTANT (rep_op) */  for (i = 0; i <= 144; i++)
666: /* MUTANT (rep_op) */  for (i = 0; i > 144; i++)
666: /* MUTANT (rep_op) */  for (i = 0; i >= 144; i++)
666: /* MUTANT (rep_op) */  for (i = 0; i == 144; i++)
666: /* MUTANT (rep_op) */  for (i = 0; i != 144; i++)
666: /* MUTANT (rep_op) */  for (i = 0; i < 144; i--)
666: /* MUTANT (rep_const) */  for (i = 1; i < 144; i++)
666: /* MUTANT (rep_const) */  for (i = -1; i < 144; i++)
666: /* MUTANT (rep_const) */  for (i = 0; i < 0; i++)
666: /* MUTANT (rep_const) */  for (i = 0; i < 1; i++)
666: /* MUTANT (rep_const) */  for (i = 0; i < -1; i++)
666: /* MUTANT (rep_const) */  for (i = 0; i < ((144)+1); i++)
666: /* MUTANT (rep_const) */  for (i = 0; i < ((144)-1); i++)
667: /* MUTANT (rep_const) */    l[i] = 0;
667: /* MUTANT (rep_const) */    l[i] = 1;
667: /* MUTANT (rep_const) */    l[i] = -1;
667: /* MUTANT (rep_const) */    l[i] = ((8)+1);
667: /* MUTANT (rep_const) */    l[i] = ((8)-1);
668: /* MUTANT (rep_op) */  for (; i <= 256; i++)
668: /* MUTANT (rep_op) */  for (; i > 256; i++)
668: /* MUTANT (rep_op) */  for (; i >= 256; i++)
668: /* MUTANT (rep_op) */  for (; i == 256; i++)
668: /* MUTANT (rep_op) */  for (; i != 256; i++)
668: /* MUTANT (rep_op) */  for (; i < 256; i--)
668: /* MUTANT (rep_const) */  for (; i < 0; i++)
668: /* MUTANT (rep_const) */  for (; i < 1; i++)
668: /* MUTANT (rep_const) */  for (; i < -1; i++)
668: /* MUTANT (rep_const) */  for (; i < ((256)+1); i++)
668: /* MUTANT (rep_const) */  for (; i < ((256)-1); i++)
669: /* MUTANT (rep_const) */    l[i] = 0;
669: /* MUTANT (rep_const) */    l[i] = 1;
669: /* MUTANT (rep_const) */    l[i] = -1;
669: /* MUTANT (rep_const) */    l[i] = ((9)+1);
669: /* MUTANT (rep_const) */    l[i] = ((9)-1);
670: /* MUTANT (rep_op) */  for (; i <= 280; i++)
670: /* MUTANT (rep_op) */  for (; i > 280; i++)
670: /* MUTANT (rep_op) */  for (; i >= 280; i++)
670: /* MUTANT (rep_op) */  for (; i == 280; i++)
670: /* MUTANT (rep_op) */  for (; i != 280; i++)
670: /* MUTANT (rep_op) */  for (; i < 280; i--)
670: /* MUTANT (rep_const) */  for (; i < 0; i++)
670: /* MUTANT (rep_const) */  for (; i < 1; i++)
670: /* MUTANT (rep_const) */  for (; i < -1; i++)
670: /* MUTANT (rep_const) */  for (; i < ((280)+1); i++)
670: /* MUTANT (rep_const) */  for (; i < ((280)-1); i++)
671: /* MUTANT (rep_const) */    l[i] = 0;
671: /* MUTANT (rep_const) */    l[i] = 1;
671: /* MUTANT (rep_const) */    l[i] = -1;
671: /* MUTANT (rep_const) */    l[i] = ((7)+1);
671: /* MUTANT (rep_const) */    l[i] = ((7)-1);
672: /* MUTANT (rep_op) */  for (; i <= 288; i++)          /* make a complete, but wrong code set */
672: /* MUTANT (rep_op) */  for (; i > 288; i++)          /* make a complete, but wrong code set */
672: /* MUTANT (rep_op) */  for (; i >= 288; i++)          /* make a complete, but wrong code set */
672: /* MUTANT (rep_op) */  for (; i == 288; i++)          /* make a complete, but wrong code set */
672: /* MUTANT (rep_op) */  for (; i != 288; i++)          /* make a complete, but wrong code set */
672: /* MUTANT (rep_op) */  for (; i < 288; i--)          /* make a complete, but wrong code set */
672: /* MUTANT (rep_const) */  for (; i < 0; i++)          /* make a complete, but wrong code set */
672: /* MUTANT (rep_const) */  for (; i < 1; i++)          /* make a complete, but wrong code set */
672: /* MUTANT (rep_const) */  for (; i < -1; i++)          /* make a complete, but wrong code set */
672: /* MUTANT (rep_const) */  for (; i < ((288)+1); i++)          /* make a complete, but wrong code set */
672: /* MUTANT (rep_const) */  for (; i < ((288)-1); i++)          /* make a complete, but wrong code set */
673: /* MUTANT (rep_const) */    l[i] = 0;
673: /* MUTANT (rep_const) */    l[i] = 1;
673: /* MUTANT (rep_const) */    l[i] = -1;
673: /* MUTANT (rep_const) */    l[i] = ((8)+1);
673: /* MUTANT (rep_const) */    l[i] = ((8)-1);
674: /* MUTANT (del_stmt) */ /*   bl = 7; */ 
674: /* MUTANT (rep_const) */  bl = 0;
674: /* MUTANT (rep_const) */  bl = 1;
674: /* MUTANT (rep_const) */  bl = -1;
674: /* MUTANT (rep_const) */  bl = ((7)+1);
674: /* MUTANT (rep_const) */  bl = ((7)-1);
675: /* MUTANT (rep_op) */  if ((i = huft_build(l, 288, 257, cplens, cplext, &tl, &bl)) == 0)
675: /* MUTANT (rep_const) */  if ((i = huft_build(l, 0, 257, cplens, cplext, &tl, &bl)) != 0)
675: /* MUTANT (rep_const) */  if ((i = huft_build(l, 1, 257, cplens, cplext, &tl, &bl)) != 0)
675: /* MUTANT (rep_const) */  if ((i = huft_build(l, -1, 257, cplens, cplext, &tl, &bl)) != 0)
675: /* MUTANT (rep_const) */  if ((i = huft_build(l, ((288)+1), 257, cplens, cplext, &tl, &bl)) != 0)
675: /* MUTANT (rep_const) */  if ((i = huft_build(l, ((288)-1), 257, cplens, cplext, &tl, &bl)) != 0)
675: /* MUTANT (rep_const) */  if ((i = huft_build(l, 288, 0, cplens, cplext, &tl, &bl)) != 0)
675: /* MUTANT (rep_const) */  if ((i = huft_build(l, 288, 1, cplens, cplext, &tl, &bl)) != 0)
675: /* MUTANT (rep_const) */  if ((i = huft_build(l, 288, -1, cplens, cplext, &tl, &bl)) != 0)
675: /* MUTANT (rep_const) */  if ((i = huft_build(l, 288, ((257)+1), cplens, cplext, &tl, &bl)) != 0)
675: /* MUTANT (rep_const) */  if ((i = huft_build(l, 288, ((257)-1), cplens, cplext, &tl, &bl)) != 0)
675: /* MUTANT (rep_const) */  if ((i = huft_build(l, 288, 257, cplens, cplext, &tl, &bl)) != 1)
675: /* MUTANT (rep_const) */  if ((i = huft_build(l, 288, 257, cplens, cplext, &tl, &bl)) != -1)
675: /* MUTANT (negate) */  if(! ((i = huft_build(l, 288, 257, cplens, cplext, &tl, &bl)) != 0))
680: /* MUTANT (rep_op) */  for (i = 0; i <= 30; i++)      /* make an incomplete code set */
680: /* MUTANT (rep_op) */  for (i = 0; i > 30; i++)      /* make an incomplete code set */
680: /* MUTANT (rep_op) */  for (i = 0; i >= 30; i++)      /* make an incomplete code set */
680: /* MUTANT (rep_op) */  for (i = 0; i == 30; i++)      /* make an incomplete code set */
680: /* MUTANT (rep_op) */  for (i = 0; i != 30; i++)      /* make an incomplete code set */
680: /* MUTANT (rep_op) */  for (i = 0; i < 30; i--)      /* make an incomplete code set */
680: /* MUTANT (rep_const) */  for (i = 1; i < 30; i++)      /* make an incomplete code set */
680: /* MUTANT (rep_const) */  for (i = -1; i < 30; i++)      /* make an incomplete code set */
680: /* MUTANT (rep_const) */  for (i = 0; i < 0; i++)      /* make an incomplete code set */
680: /* MUTANT (rep_const) */  for (i = 0; i < 1; i++)      /* make an incomplete code set */
680: /* MUTANT (rep_const) */  for (i = 0; i < -1; i++)      /* make an incomplete code set */
680: /* MUTANT (rep_const) */  for (i = 0; i < ((30)+1); i++)      /* make an incomplete code set */
680: /* MUTANT (rep_const) */  for (i = 0; i < ((30)-1); i++)      /* make an incomplete code set */
681: /* MUTANT (rep_const) */    l[i] = 0;
681: /* MUTANT (rep_const) */    l[i] = 1;
681: /* MUTANT (rep_const) */    l[i] = -1;
681: /* MUTANT (rep_const) */    l[i] = ((5)+1);
681: /* MUTANT (rep_const) */    l[i] = ((5)-1);
682: /* MUTANT (del_stmt) */ /*   bd = 5; */ 
682: /* MUTANT (rep_const) */  bd = 0;
682: /* MUTANT (rep_const) */  bd = 1;
682: /* MUTANT (rep_const) */  bd = -1;
682: /* MUTANT (rep_const) */  bd = ((5)+1);
682: /* MUTANT (rep_const) */  bd = ((5)-1);
683: /* MUTANT (rep_op) */  if ((i = huft_build(l, 30, 0, cpdist, cpdext, &td, &bd)) <= 1)
683: /* MUTANT (rep_op) */  if ((i = huft_build(l, 30, 0, cpdist, cpdext, &td, &bd)) < 1)
683: /* MUTANT (rep_op) */  if ((i = huft_build(l, 30, 0, cpdist, cpdext, &td, &bd)) >= 1)
683: /* MUTANT (rep_op) */  if ((i = huft_build(l, 30, 0, cpdist, cpdext, &td, &bd)) == 1)
683: /* MUTANT (rep_op) */  if ((i = huft_build(l, 30, 0, cpdist, cpdext, &td, &bd)) != 1)
683: /* MUTANT (rep_const) */  if ((i = huft_build(l, 0, 0, cpdist, cpdext, &td, &bd)) > 1)
683: /* MUTANT (rep_const) */  if ((i = huft_build(l, 1, 0, cpdist, cpdext, &td, &bd)) > 1)
683: /* MUTANT (rep_const) */  if ((i = huft_build(l, -1, 0, cpdist, cpdext, &td, &bd)) > 1)
683: /* MUTANT (rep_const) */  if ((i = huft_build(l, ((30)+1), 0, cpdist, cpdext, &td, &bd)) > 1)
683: /* MUTANT (rep_const) */  if ((i = huft_build(l, ((30)-1), 0, cpdist, cpdext, &td, &bd)) > 1)
683: /* MUTANT (rep_const) */  if ((i = huft_build(l, 30, 1, cpdist, cpdext, &td, &bd)) > 1)
683: /* MUTANT (rep_const) */  if ((i = huft_build(l, 30, -1, cpdist, cpdext, &td, &bd)) > 1)
683: /* MUTANT (rep_const) */  if ((i = huft_build(l, 30, 0, cpdist, cpdext, &td, &bd)) > 0)
683: /* MUTANT (rep_const) */  if ((i = huft_build(l, 30, 0, cpdist, cpdext, &td, &bd)) > -1)
683: /* MUTANT (rep_const) */  if ((i = huft_build(l, 30, 0, cpdist, cpdext, &td, &bd)) > ((1)+1))
683: /* MUTANT (negate) */  if(! ((i = huft_build(l, 30, 0, cpdist, cpdext, &td, &bd)) > 1))
685: /* MUTANT (del_stmt) */ /*     huft_free(tl); */ 
686: /* MUTANT (del_stmt) */ /*     return i; */ 
691: /* MUTANT (negate) */  if(! (inflate_codes(tl, td, bl, bd)))
692: /* MUTANT (rep_const) */    return 0;
692: /* MUTANT (rep_const) */    return -1;
692: /* MUTANT (rep_const) */    return ((1)+1);
696: /* MUTANT (del_stmt) */ /*   huft_free(tl); */ 
697: /* MUTANT (del_stmt) */ /*   huft_free(td); */ 
698: /* MUTANT (del_stmt) */ /*   return 0; */ 
698: /* MUTANT (rep_const) */  return 1;
698: /* MUTANT (rep_const) */  return -1;
706: /* MUTANT (del_stmt) */ /*   int i; */                 /* temporary variables */
707: /* MUTANT (del_stmt) */ /*   unsigned j; */ 
708: /* MUTANT (del_stmt) */ /*   unsigned l; */            /* last length */
709: /* MUTANT (del_stmt) */ /*   unsigned m; */            /* mask for bit lengths table */
710: /* MUTANT (del_stmt) */ /*   unsigned n; */            /* number of lengths to get */
711: /* MUTANT (del_stmt) */ /*   struct huft *tl; */       /* literal/length code table */
712: /* MUTANT (del_stmt) */ /*   struct huft *td; */       /* distance code table */
713: /* MUTANT (del_stmt) */ /*   int bl; */                /* lookup bits for tl */
714: /* MUTANT (del_stmt) */ /*   int bd; */                /* lookup bits for td */
715: /* MUTANT (del_stmt) */ /*   unsigned nb; */           /* number of bit length codes */
716: /* MUTANT (del_stmt) */ /*   unsigned nl; */           /* number of literal/length codes */
717: /* MUTANT (del_stmt) */ /*   unsigned nd; */           /* number of distance codes */
719: /* MUTANT (rep_op) */  unsigned ll[288-32];  /* literal/length and distance code lengths */
719: /* MUTANT (rep_op) */  unsigned ll[288*32];  /* literal/length and distance code lengths */
719: /* MUTANT (rep_op) */  unsigned ll[288%32];  /* literal/length and distance code lengths */
719: /* MUTANT (rep_const) */  unsigned ll[0+32];  /* literal/length and distance code lengths */
719: /* MUTANT (rep_const) */  unsigned ll[1+32];  /* literal/length and distance code lengths */
719: /* MUTANT (rep_const) */  unsigned ll[-1+32];  /* literal/length and distance code lengths */
719: /* MUTANT (rep_const) */  unsigned ll[((288)+1)+32];  /* literal/length and distance code lengths */
719: /* MUTANT (rep_const) */  unsigned ll[((288)-1)+32];  /* literal/length and distance code lengths */
719: /* MUTANT (rep_const) */  unsigned ll[288+0];  /* literal/length and distance code lengths */
719: /* MUTANT (rep_const) */  unsigned ll[288+1];  /* literal/length and distance code lengths */
719: /* MUTANT (rep_const) */  unsigned ll[288+-1];  /* literal/length and distance code lengths */
719: /* MUTANT (rep_const) */  unsigned ll[288+((32)+1)];  /* literal/length and distance code lengths */
719: /* MUTANT (rep_const) */  unsigned ll[288+((32)-1)];  /* literal/length and distance code lengths */
721: /* MUTANT (rep_op) */  unsigned ll[286-30];  /* literal/length and distance code lengths */
721: /* MUTANT (rep_op) */  unsigned ll[286*30];  /* literal/length and distance code lengths */
721: /* MUTANT (rep_op) */  unsigned ll[286%30];  /* literal/length and distance code lengths */
721: /* MUTANT (rep_const) */  unsigned ll[0+30];  /* literal/length and distance code lengths */
721: /* MUTANT (rep_const) */  unsigned ll[1+30];  /* literal/length and distance code lengths */
721: /* MUTANT (rep_const) */  unsigned ll[-1+30];  /* literal/length and distance code lengths */
721: /* MUTANT (rep_const) */  unsigned ll[((286)+1)+30];  /* literal/length and distance code lengths */
721: /* MUTANT (rep_const) */  unsigned ll[((286)-1)+30];  /* literal/length and distance code lengths */
721: /* MUTANT (rep_const) */  unsigned ll[286+0];  /* literal/length and distance code lengths */
721: /* MUTANT (rep_const) */  unsigned ll[286+1];  /* literal/length and distance code lengths */
721: /* MUTANT (rep_const) */  unsigned ll[286+-1];  /* literal/length and distance code lengths */
721: /* MUTANT (rep_const) */  unsigned ll[286+((30)+1)];  /* literal/length and distance code lengths */
721: /* MUTANT (rep_const) */  unsigned ll[286+((30)-1)];  /* literal/length and distance code lengths */
724: /* MUTANT (del_stmt) */ /*   register unsigned k; */   /* number of bits in bit buffer */
728: /* MUTANT (del_stmt) */ /*   b = bb; */ 
729: /* MUTANT (del_stmt) */ /*   k = bk; */ 
733: /* MUTANT (rep_const) */  NEEDBITS(0)
733: /* MUTANT (rep_const) */  NEEDBITS(1)
733: /* MUTANT (rep_const) */  NEEDBITS(-1)
733: /* MUTANT (rep_const) */  NEEDBITS(((5)+1))
733: /* MUTANT (rep_const) */  NEEDBITS(((5)-1))
734: /* MUTANT (rep_op) */  nl = 257 - ((unsigned)b & 0x1f);      /* number of literal/length codes */
734: /* MUTANT (rep_op) */  nl = 257 * ((unsigned)b & 0x1f);      /* number of literal/length codes */
734: /* MUTANT (rep_op) */  nl = 257 % ((unsigned)b & 0x1f);      /* number of literal/length codes */
734: /* MUTANT (rep_const) */  nl = 0 + ((unsigned)b & 0x1f);      /* number of literal/length codes */
734: /* MUTANT (rep_const) */  nl = 1 + ((unsigned)b & 0x1f);      /* number of literal/length codes */
734: /* MUTANT (rep_const) */  nl = -1 + ((unsigned)b & 0x1f);      /* number of literal/length codes */
734: /* MUTANT (rep_const) */  nl = ((257)+1) + ((unsigned)b & 0x1f);      /* number of literal/length codes */
734: /* MUTANT (rep_const) */  nl = ((257)-1) + ((unsigned)b & 0x1f);      /* number of literal/length codes */
734: /* MUTANT (rep_const) */  nl = 257 + ((unsigned)b & 1x1f);      /* number of literal/length codes */
734: /* MUTANT (rep_const) */  nl = 257 + ((unsigned)b & -1x1f);      /* number of literal/length codes */
735: /* MUTANT (rep_const) */  DUMPBITS(0)
735: /* MUTANT (rep_const) */  DUMPBITS(1)
735: /* MUTANT (rep_const) */  DUMPBITS(-1)
735: /* MUTANT (rep_const) */  DUMPBITS(((5)+1))
735: /* MUTANT (rep_const) */  DUMPBITS(((5)-1))
736: /* MUTANT (rep_const) */  NEEDBITS(0)
736: /* MUTANT (rep_const) */  NEEDBITS(1)
736: /* MUTANT (rep_const) */  NEEDBITS(-1)
736: /* MUTANT (rep_const) */  NEEDBITS(((5)+1))
736: /* MUTANT (rep_const) */  NEEDBITS(((5)-1))
737: /* MUTANT (rep_op) */  nd = 1 - ((unsigned)b & 0x1f);        /* number of distance codes */
737: /* MUTANT (rep_op) */  nd = 1 * ((unsigned)b & 0x1f);        /* number of distance codes */
737: /* MUTANT (rep_op) */  nd = 1 % ((unsigned)b & 0x1f);        /* number of distance codes */
737: /* MUTANT (rep_const) */  nd = 0 + ((unsigned)b & 0x1f);        /* number of distance codes */
737: /* MUTANT (rep_const) */  nd = -1 + ((unsigned)b & 0x1f);        /* number of distance codes */
737: /* MUTANT (rep_const) */  nd = ((1)+1) + ((unsigned)b & 0x1f);        /* number of distance codes */
737: /* MUTANT (rep_const) */  nd = 1 + ((unsigned)b & 1x1f);        /* number of distance codes */
737: /* MUTANT (rep_const) */  nd = 1 + ((unsigned)b & -1x1f);        /* number of distance codes */
738: /* MUTANT (rep_const) */  DUMPBITS(0)
738: /* MUTANT (rep_const) */  DUMPBITS(1)
738: /* MUTANT (rep_const) */  DUMPBITS(-1)
738: /* MUTANT (rep_const) */  DUMPBITS(((5)+1))
738: /* MUTANT (rep_const) */  DUMPBITS(((5)-1))
739: /* MUTANT (rep_const) */  NEEDBITS(0)
739: /* MUTANT (rep_const) */  NEEDBITS(1)
739: /* MUTANT (rep_const) */  NEEDBITS(-1)
739: /* MUTANT (rep_const) */  NEEDBITS(((4)+1))
739: /* MUTANT (rep_const) */  NEEDBITS(((4)-1))
740: /* MUTANT (rep_op) */  nb = 4 - ((unsigned)b & 0xf);         /* number of bit length codes */
740: /* MUTANT (rep_op) */  nb = 4 * ((unsigned)b & 0xf);         /* number of bit length codes */
740: /* MUTANT (rep_op) */  nb = 4 % ((unsigned)b & 0xf);         /* number of bit length codes */
740: /* MUTANT (rep_const) */  nb = 0 + ((unsigned)b & 0xf);         /* number of bit length codes */
740: /* MUTANT (rep_const) */  nb = 1 + ((unsigned)b & 0xf);         /* number of bit length codes */
740: /* MUTANT (rep_const) */  nb = -1 + ((unsigned)b & 0xf);         /* number of bit length codes */
740: /* MUTANT (rep_const) */  nb = ((4)+1) + ((unsigned)b & 0xf);         /* number of bit length codes */
740: /* MUTANT (rep_const) */  nb = ((4)-1) + ((unsigned)b & 0xf);         /* number of bit length codes */
740: /* MUTANT (rep_const) */  nb = 4 + ((unsigned)b & 1xf);         /* number of bit length codes */
740: /* MUTANT (rep_const) */  nb = 4 + ((unsigned)b & -1xf);         /* number of bit length codes */
741: /* MUTANT (rep_const) */  DUMPBITS(0)
741: /* MUTANT (rep_const) */  DUMPBITS(1)
741: /* MUTANT (rep_const) */  DUMPBITS(-1)
741: /* MUTANT (rep_const) */  DUMPBITS(((4)+1))
741: /* MUTANT (rep_const) */  DUMPBITS(((4)-1))
743: /* MUTANT (rep_op) */  if (nl <= 288 || nd > 32)
743: /* MUTANT (rep_op) */  if (nl < 288 || nd > 32)
743: /* MUTANT (rep_op) */  if (nl >= 288 || nd > 32)
743: /* MUTANT (rep_op) */  if (nl == 288 || nd > 32)
743: /* MUTANT (rep_op) */  if (nl != 288 || nd > 32)
743: /* MUTANT (rep_op) */  if (nl > 288 && nd > 32)
743: /* MUTANT (rep_op) */  if (nl > 288 || nd <= 32)
743: /* MUTANT (rep_op) */  if (nl > 288 || nd < 32)
743: /* MUTANT (rep_op) */  if (nl > 288 || nd >= 32)
743: /* MUTANT (rep_op) */  if (nl > 288 || nd == 32)
743: /* MUTANT (rep_op) */  if (nl > 288 || nd != 32)
743: /* MUTANT (rep_const) */  if (nl > 0 || nd > 32)
743: /* MUTANT (rep_const) */  if (nl > 1 || nd > 32)
743: /* MUTANT (rep_const) */  if (nl > -1 || nd > 32)
743: /* MUTANT (rep_const) */  if (nl > ((288)+1) || nd > 32)
743: /* MUTANT (rep_const) */  if (nl > ((288)-1) || nd > 32)
743: /* MUTANT (rep_const) */  if (nl > 288 || nd > 0)
743: /* MUTANT (rep_const) */  if (nl > 288 || nd > 1)
743: /* MUTANT (rep_const) */  if (nl > 288 || nd > -1)
743: /* MUTANT (rep_const) */  if (nl > 288 || nd > ((32)+1))
743: /* MUTANT (rep_const) */  if (nl > 288 || nd > ((32)-1))
743: /* MUTANT (negate) */  if(! (nl > 288 || nd > 32))
745: /* MUTANT (rep_op) */  if (nl <= 286 || nd > 30)
745: /* MUTANT (rep_op) */  if (nl < 286 || nd > 30)
745: /* MUTANT (rep_op) */  if (nl >= 286 || nd > 30)
745: /* MUTANT (rep_op) */  if (nl == 286 || nd > 30)
745: /* MUTANT (rep_op) */  if (nl != 286 || nd > 30)
745: /* MUTANT (rep_op) */  if (nl > 286 && nd > 30)
745: /* MUTANT (rep_op) */  if (nl > 286 || nd <= 30)
745: /* MUTANT (rep_op) */  if (nl > 286 || nd < 30)
745: /* MUTANT (rep_op) */  if (nl > 286 || nd >= 30)
745: /* MUTANT (rep_op) */  if (nl > 286 || nd == 30)
745: /* MUTANT (rep_op) */  if (nl > 286 || nd != 30)
745: /* MUTANT (rep_const) */  if (nl > 0 || nd > 30)
745: /* MUTANT (rep_const) */  if (nl > 1 || nd > 30)
745: /* MUTANT (rep_const) */  if (nl > -1 || nd > 30)
745: /* MUTANT (rep_const) */  if (nl > ((286)+1) || nd > 30)
745: /* MUTANT (rep_const) */  if (nl > ((286)-1) || nd > 30)
745: /* MUTANT (rep_const) */  if (nl > 286 || nd > 0)
745: /* MUTANT (rep_const) */  if (nl > 286 || nd > 1)
745: /* MUTANT (rep_const) */  if (nl > 286 || nd > -1)
745: /* MUTANT (rep_const) */  if (nl > 286 || nd > ((30)+1))
745: /* MUTANT (rep_const) */  if (nl > 286 || nd > ((30)-1))
745: /* MUTANT (negate) */  if(! (nl > 286 || nd > 30))
747: /* MUTANT (rep_const) */    return 0;                   /* bad lengths */
747: /* MUTANT (rep_const) */    return -1;                   /* bad lengths */
747: /* MUTANT (rep_const) */    return ((1)+1);                   /* bad lengths */
751: /* MUTANT (rep_op) */  for (j = 0; j <= nb; j++)
751: /* MUTANT (rep_op) */  for (j = 0; j > nb; j++)
751: /* MUTANT (rep_op) */  for (j = 0; j >= nb; j++)
751: /* MUTANT (rep_op) */  for (j = 0; j == nb; j++)
751: /* MUTANT (rep_op) */  for (j = 0; j != nb; j++)
751: /* MUTANT (rep_op) */  for (j = 0; j < nb; j--)
751: /* MUTANT (rep_const) */  for (j = 1; j < nb; j++)
751: /* MUTANT (rep_const) */  for (j = -1; j < nb; j++)
753: /* MUTANT (rep_const) */    NEEDBITS(0)
753: /* MUTANT (rep_const) */    NEEDBITS(1)
753: /* MUTANT (rep_const) */    NEEDBITS(-1)
753: /* MUTANT (rep_const) */    NEEDBITS(((3)+1))
753: /* MUTANT (rep_const) */    NEEDBITS(((3)-1))
754: /* MUTANT (rep_const) */    ll[border[j]] = (unsigned)b & 0;
754: /* MUTANT (rep_const) */    ll[border[j]] = (unsigned)b & 1;
754: /* MUTANT (rep_const) */    ll[border[j]] = (unsigned)b & -1;
754: /* MUTANT (rep_const) */    ll[border[j]] = (unsigned)b & ((7)+1);
754: /* MUTANT (rep_const) */    ll[border[j]] = (unsigned)b & ((7)-1);
755: /* MUTANT (rep_const) */    DUMPBITS(0)
755: /* MUTANT (rep_const) */    DUMPBITS(1)
755: /* MUTANT (rep_const) */    DUMPBITS(-1)
755: /* MUTANT (rep_const) */    DUMPBITS(((3)+1))
755: /* MUTANT (rep_const) */    DUMPBITS(((3)-1))
757: /* MUTANT (rep_op) */  for (; j <= 19; j++)
757: /* MUTANT (rep_op) */  for (; j > 19; j++)
757: /* MUTANT (rep_op) */  for (; j >= 19; j++)
757: /* MUTANT (rep_op) */  for (; j == 19; j++)
757: /* MUTANT (rep_op) */  for (; j != 19; j++)
757: /* MUTANT (rep_op) */  for (; j < 19; j--)
757: /* MUTANT (rep_const) */  for (; j < 0; j++)
757: /* MUTANT (rep_const) */  for (; j < 1; j++)
757: /* MUTANT (rep_const) */  for (; j < -1; j++)
757: /* MUTANT (rep_const) */  for (; j < ((19)+1); j++)
757: /* MUTANT (rep_const) */  for (; j < ((19)-1); j++)
758: /* MUTANT (rep_const) */    ll[border[j]] = 1;
758: /* MUTANT (rep_const) */    ll[border[j]] = -1;
762: /* MUTANT (del_stmt) */ /*   bl = 7; */ 
762: /* MUTANT (rep_const) */  bl = 0;
762: /* MUTANT (rep_const) */  bl = 1;
762: /* MUTANT (rep_const) */  bl = -1;
762: /* MUTANT (rep_const) */  bl = ((7)+1);
762: /* MUTANT (rep_const) */  bl = ((7)-1);
763: /* MUTANT (rep_op) */  if ((i = huft_build(ll, 19, 19, NULL, NULL, &tl, &bl)) == 0)
763: /* MUTANT (rep_const) */  if ((i = huft_build(ll, 0, 19, NULL, NULL, &tl, &bl)) != 0)
763: /* MUTANT (rep_const) */  if ((i = huft_build(ll, 1, 19, NULL, NULL, &tl, &bl)) != 0)
763: /* MUTANT (rep_const) */  if ((i = huft_build(ll, -1, 19, NULL, NULL, &tl, &bl)) != 0)
763: /* MUTANT (rep_const) */  if ((i = huft_build(ll, ((19)+1), 19, NULL, NULL, &tl, &bl)) != 0)
763: /* MUTANT (rep_const) */  if ((i = huft_build(ll, ((19)-1), 19, NULL, NULL, &tl, &bl)) != 0)
763: /* MUTANT (rep_const) */  if ((i = huft_build(ll, 19, 0, NULL, NULL, &tl, &bl)) != 0)
763: /* MUTANT (rep_const) */  if ((i = huft_build(ll, 19, 1, NULL, NULL, &tl, &bl)) != 0)
763: /* MUTANT (rep_const) */  if ((i = huft_build(ll, 19, -1, NULL, NULL, &tl, &bl)) != 0)
763: /* MUTANT (rep_const) */  if ((i = huft_build(ll, 19, ((19)+1), NULL, NULL, &tl, &bl)) != 0)
763: /* MUTANT (rep_const) */  if ((i = huft_build(ll, 19, ((19)-1), NULL, NULL, &tl, &bl)) != 0)
763: /* MUTANT (rep_const) */  if ((i = huft_build(ll, 19, 19, NULL, NULL, &tl, &bl)) != 1)
763: /* MUTANT (rep_const) */  if ((i = huft_build(ll, 19, 19, NULL, NULL, &tl, &bl)) != -1)
763: /* MUTANT (negate) */  if(! ((i = huft_build(ll, 19, 19, NULL, NULL, &tl, &bl)) != 0))
765: /* MUTANT (rep_op) */    if (i != 1)
765: /* MUTANT (rep_const) */    if (i == 0)
765: /* MUTANT (rep_const) */    if (i == -1)
765: /* MUTANT (rep_const) */    if (i == ((1)+1))
765: /* MUTANT (negate) */    if(! (i == 1))
767: /* MUTANT (del_stmt) */ /*     return i; */                    /* incomplete code set */
772: /* MUTANT (rep_op) */  n = nl - nd;
772: /* MUTANT (rep_op) */  n = nl * nd;
772: /* MUTANT (rep_op) */  n = nl % nd;
773: /* MUTANT (del_stmt) */ /*   m = mask_bits[bl]; */ 
774: /* MUTANT (del_stmt) */ /*   i = l = 0; */ 
774: /* MUTANT (rep_const) */  i = l = 1;
774: /* MUTANT (rep_const) */  i = l = -1;
775: /* MUTANT (rep_op) */  while ((unsigned)i <= n)
775: /* MUTANT (rep_op) */  while ((unsigned)i > n)
775: /* MUTANT (rep_op) */  while ((unsigned)i >= n)
775: /* MUTANT (rep_op) */  while ((unsigned)i == n)
775: /* MUTANT (rep_op) */  while ((unsigned)i != n)
775: /* MUTANT (negate) */  while(! ((unsigned)i < n))
778: /* MUTANT (rep_op) */    j = (td = tl - ((unsigned)b & m))->b;
778: /* MUTANT (rep_op) */    j = (td = tl * ((unsigned)b & m))->b;
778: /* MUTANT (rep_op) */    j = (td = tl % ((unsigned)b & m))->b;
781: /* MUTANT (rep_op) */    if (j <= 16)                 /* length of code in bits (0..15) */
781: /* MUTANT (rep_op) */    if (j > 16)                 /* length of code in bits (0..15) */
781: /* MUTANT (rep_op) */    if (j >= 16)                 /* length of code in bits (0..15) */
781: /* MUTANT (rep_op) */    if (j == 16)                 /* length of code in bits (0..15) */
781: /* MUTANT (rep_op) */    if (j != 16)                 /* length of code in bits (0..15) */
781: /* MUTANT (rep_const) */    if (j < 0)                 /* length of code in bits (0..15) */
781: /* MUTANT (rep_const) */    if (j < 1)                 /* length of code in bits (0..15) */
781: /* MUTANT (rep_const) */    if (j < -1)                 /* length of code in bits (0..15) */
781: /* MUTANT (rep_const) */    if (j < ((16)+1))                 /* length of code in bits (0..15) */
781: /* MUTANT (rep_const) */    if (j < ((16)-1))                 /* length of code in bits (0..15) */
781: /* MUTANT (negate) */    if(! (j < 16))                 /* length of code in bits (0..15) */
782: /* MUTANT (rep_op) */      ll[i--] = l = j;          /* save last length in l */
783: /* MUTANT (rep_op) */    else if (j != 16)           /* repeat last length 3 to 6 times */
783: /* MUTANT (rep_const) */    else if (j == 0)           /* repeat last length 3 to 6 times */
783: /* MUTANT (rep_const) */    else if (j == 1)           /* repeat last length 3 to 6 times */
783: /* MUTANT (rep_const) */    else if (j == -1)           /* repeat last length 3 to 6 times */
783: /* MUTANT (rep_const) */    else if (j == ((16)+1))           /* repeat last length 3 to 6 times */
783: /* MUTANT (rep_const) */    else if (j == ((16)-1))           /* repeat last length 3 to 6 times */
783: /* MUTANT (negate) */    else if(! (j == 16))           /* repeat last length 3 to 6 times */
785: /* MUTANT (rep_const) */      NEEDBITS(0)
785: /* MUTANT (rep_const) */      NEEDBITS(1)
785: /* MUTANT (rep_const) */      NEEDBITS(-1)
785: /* MUTANT (rep_const) */      NEEDBITS(((2)+1))
785: /* MUTANT (rep_const) */      NEEDBITS(((2)-1))
786: /* MUTANT (rep_op) */      j = 3 - ((unsigned)b & 3);
786: /* MUTANT (rep_op) */      j = 3 * ((unsigned)b & 3);
786: /* MUTANT (rep_op) */      j = 3 % ((unsigned)b & 3);
786: /* MUTANT (rep_const) */      j = 0 + ((unsigned)b & 3);
786: /* MUTANT (rep_const) */      j = 1 + ((unsigned)b & 3);
786: /* MUTANT (rep_const) */      j = -1 + ((unsigned)b & 3);
786: /* MUTANT (rep_const) */      j = ((3)+1) + ((unsigned)b & 3);
786: /* MUTANT (rep_const) */      j = ((3)-1) + ((unsigned)b & 3);
786: /* MUTANT (rep_const) */      j = 3 + ((unsigned)b & 0);
786: /* MUTANT (rep_const) */      j = 3 + ((unsigned)b & 1);
786: /* MUTANT (rep_const) */      j = 3 + ((unsigned)b & -1);
786: /* MUTANT (rep_const) */      j = 3 + ((unsigned)b & ((3)+1));
786: /* MUTANT (rep_const) */      j = 3 + ((unsigned)b & ((3)-1));
787: /* MUTANT (rep_const) */      DUMPBITS(0)
787: /* MUTANT (rep_const) */      DUMPBITS(1)
787: /* MUTANT (rep_const) */      DUMPBITS(-1)
787: /* MUTANT (rep_const) */      DUMPBITS(((2)+1))
787: /* MUTANT (rep_const) */      DUMPBITS(((2)-1))
788: /* MUTANT (rep_op) */      if ((unsigned)i - j > n)
788: /* MUTANT (rep_op) */      if ((unsigned)i * j > n)
788: /* MUTANT (rep_op) */      if ((unsigned)i % j > n)
788: /* MUTANT (rep_op) */      if ((unsigned)i + j <= n)
788: /* MUTANT (rep_op) */      if ((unsigned)i + j < n)
788: /* MUTANT (rep_op) */      if ((unsigned)i + j >= n)
788: /* MUTANT (rep_op) */      if ((unsigned)i + j == n)
788: /* MUTANT (rep_op) */      if ((unsigned)i + j != n)
788: /* MUTANT (negate) */      if(! ((unsigned)i + j > n))
789: /* MUTANT (rep_const) */        return 0;
789: /* MUTANT (rep_const) */        return -1;
789: /* MUTANT (rep_const) */        return ((1)+1);
790: /* MUTANT (rep_op) */      while (j++)
790: /* MUTANT (negate) */      while(! (j--))
791: /* MUTANT (rep_op) */        ll[i--] = l;
793: /* MUTANT (rep_op) */    else if (j != 17)           /* 3 to 10 zero length codes */
793: /* MUTANT (rep_const) */    else if (j == 0)           /* 3 to 10 zero length codes */
793: /* MUTANT (rep_const) */    else if (j == 1)           /* 3 to 10 zero length codes */
793: /* MUTANT (rep_const) */    else if (j == -1)           /* 3 to 10 zero length codes */
793: /* MUTANT (rep_const) */    else if (j == ((17)+1))           /* 3 to 10 zero length codes */
793: /* MUTANT (rep_const) */    else if (j == ((17)-1))           /* 3 to 10 zero length codes */
793: /* MUTANT (negate) */    else if(! (j == 17))           /* 3 to 10 zero length codes */
795: /* MUTANT (rep_const) */      NEEDBITS(0)
795: /* MUTANT (rep_const) */      NEEDBITS(1)
795: /* MUTANT (rep_const) */      NEEDBITS(-1)
795: /* MUTANT (rep_const) */      NEEDBITS(((3)+1))
795: /* MUTANT (rep_const) */      NEEDBITS(((3)-1))
796: /* MUTANT (rep_op) */      j = 3 - ((unsigned)b & 7);
796: /* MUTANT (rep_op) */      j = 3 * ((unsigned)b & 7);
796: /* MUTANT (rep_op) */      j = 3 % ((unsigned)b & 7);
796: /* MUTANT (rep_const) */      j = 0 + ((unsigned)b & 7);
796: /* MUTANT (rep_const) */      j = 1 + ((unsigned)b & 7);
796: /* MUTANT (rep_const) */      j = -1 + ((unsigned)b & 7);
796: /* MUTANT (rep_const) */      j = ((3)+1) + ((unsigned)b & 7);
796: /* MUTANT (rep_const) */      j = ((3)-1) + ((unsigned)b & 7);
796: /* MUTANT (rep_const) */      j = 3 + ((unsigned)b & 0);
796: /* MUTANT (rep_const) */      j = 3 + ((unsigned)b & 1);
796: /* MUTANT (rep_const) */      j = 3 + ((unsigned)b & -1);
796: /* MUTANT (rep_const) */      j = 3 + ((unsigned)b & ((7)+1));
796: /* MUTANT (rep_const) */      j = 3 + ((unsigned)b & ((7)-1));
797: /* MUTANT (rep_const) */      DUMPBITS(0)
797: /* MUTANT (rep_const) */      DUMPBITS(1)
797: /* MUTANT (rep_const) */      DUMPBITS(-1)
797: /* MUTANT (rep_const) */      DUMPBITS(((3)+1))
797: /* MUTANT (rep_const) */      DUMPBITS(((3)-1))
798: /* MUTANT (rep_op) */      if ((unsigned)i - j > n)
798: /* MUTANT (rep_op) */      if ((unsigned)i * j > n)
798: /* MUTANT (rep_op) */      if ((unsigned)i % j > n)
798: /* MUTANT (rep_op) */      if ((unsigned)i + j <= n)
798: /* MUTANT (rep_op) */      if ((unsigned)i + j < n)
798: /* MUTANT (rep_op) */      if ((unsigned)i + j >= n)
798: /* MUTANT (rep_op) */      if ((unsigned)i + j == n)
798: /* MUTANT (rep_op) */      if ((unsigned)i + j != n)
798: /* MUTANT (negate) */      if(! ((unsigned)i + j > n))
799: /* MUTANT (rep_const) */        return 0;
799: /* MUTANT (rep_const) */        return -1;
799: /* MUTANT (rep_const) */        return ((1)+1);
800: /* MUTANT (rep_op) */      while (j++)
800: /* MUTANT (negate) */      while(! (j--))
801: /* MUTANT (rep_op) */        ll[i--] = 0;
801: /* MUTANT (rep_const) */        ll[i++] = 1;
801: /* MUTANT (rep_const) */        ll[i++] = -1;
802: /* MUTANT (del_stmt) */ /*       l = 0; */ 
802: /* MUTANT (rep_const) */      l = 1;
802: /* MUTANT (rep_const) */      l = -1;
806: /* MUTANT (rep_const) */      NEEDBITS(0)
806: /* MUTANT (rep_const) */      NEEDBITS(1)
806: /* MUTANT (rep_const) */      NEEDBITS(-1)
806: /* MUTANT (rep_const) */      NEEDBITS(((7)+1))
806: /* MUTANT (rep_const) */      NEEDBITS(((7)-1))
807: /* MUTANT (rep_op) */      j = 11 - ((unsigned)b & 0x7f);
807: /* MUTANT (rep_op) */      j = 11 * ((unsigned)b & 0x7f);
807: /* MUTANT (rep_op) */      j = 11 % ((unsigned)b & 0x7f);
807: /* MUTANT (rep_const) */      j = 0 + ((unsigned)b & 0x7f);
807: /* MUTANT (rep_const) */      j = 1 + ((unsigned)b & 0x7f);
807: /* MUTANT (rep_const) */      j = -1 + ((unsigned)b & 0x7f);
807: /* MUTANT (rep_const) */      j = ((11)+1) + ((unsigned)b & 0x7f);
807: /* MUTANT (rep_const) */      j = ((11)-1) + ((unsigned)b & 0x7f);
807: /* MUTANT (rep_const) */      j = 11 + ((unsigned)b & 1x7f);
807: /* MUTANT (rep_const) */      j = 11 + ((unsigned)b & -1x7f);
808: /* MUTANT (rep_const) */      DUMPBITS(0)
808: /* MUTANT (rep_const) */      DUMPBITS(1)
808: /* MUTANT (rep_const) */      DUMPBITS(-1)
808: /* MUTANT (rep_const) */      DUMPBITS(((7)+1))
808: /* MUTANT (rep_const) */      DUMPBITS(((7)-1))
809: /* MUTANT (rep_op) */      if ((unsigned)i - j > n)
809: /* MUTANT (rep_op) */      if ((unsigned)i * j > n)
809: /* MUTANT (rep_op) */      if ((unsigned)i % j > n)
809: /* MUTANT (rep_op) */      if ((unsigned)i + j <= n)
809: /* MUTANT (rep_op) */      if ((unsigned)i + j < n)
809: /* MUTANT (rep_op) */      if ((unsigned)i + j >= n)
809: /* MUTANT (rep_op) */      if ((unsigned)i + j == n)
809: /* MUTANT (rep_op) */      if ((unsigned)i + j != n)
809: /* MUTANT (negate) */      if(! ((unsigned)i + j > n))
810: /* MUTANT (rep_const) */        return 0;
810: /* MUTANT (rep_const) */        return -1;
810: /* MUTANT (rep_const) */        return ((1)+1);
811: /* MUTANT (rep_op) */      while (j++)
811: /* MUTANT (negate) */      while(! (j--))
812: /* MUTANT (rep_op) */        ll[i--] = 0;
812: /* MUTANT (rep_const) */        ll[i++] = 1;
812: /* MUTANT (rep_const) */        ll[i++] = -1;
813: /* MUTANT (del_stmt) */ /*       l = 0; */ 
813: /* MUTANT (rep_const) */      l = 1;
813: /* MUTANT (rep_const) */      l = -1;
823: /* MUTANT (del_stmt) */ /*   bb = b; */ 
824: /* MUTANT (del_stmt) */ /*   bk = k; */ 
828: /* MUTANT (del_stmt) */ /*   bl = lbits; */ 
829: /* MUTANT (rep_op) */  if ((i = huft_build(ll, nl, 257, cplens, cplext, &tl, &bl)) == 0)
829: /* MUTANT (rep_const) */  if ((i = huft_build(ll, nl, 0, cplens, cplext, &tl, &bl)) != 0)
829: /* MUTANT (rep_const) */  if ((i = huft_build(ll, nl, 1, cplens, cplext, &tl, &bl)) != 0)
829: /* MUTANT (rep_const) */  if ((i = huft_build(ll, nl, -1, cplens, cplext, &tl, &bl)) != 0)
829: /* MUTANT (rep_const) */  if ((i = huft_build(ll, nl, ((257)+1), cplens, cplext, &tl, &bl)) != 0)
829: /* MUTANT (rep_const) */  if ((i = huft_build(ll, nl, ((257)-1), cplens, cplext, &tl, &bl)) != 0)
829: /* MUTANT (rep_const) */  if ((i = huft_build(ll, nl, 257, cplens, cplext, &tl, &bl)) != 1)
829: /* MUTANT (rep_const) */  if ((i = huft_build(ll, nl, 257, cplens, cplext, &tl, &bl)) != -1)
829: /* MUTANT (negate) */  if(! ((i = huft_build(ll, nl, 257, cplens, cplext, &tl, &bl)) != 0))
831: /* MUTANT (rep_op) */    if (i != 1) {
831: /* MUTANT (rep_const) */    if (i == 0) {
831: /* MUTANT (rep_const) */    if (i == -1) {
831: /* MUTANT (rep_const) */    if (i == ((1)+1)) {
831: /* MUTANT (negate) */    if(! (i == 1)) {
832: /* MUTANT (del_stmt) */ /*       fprintf(stderr, " incomplete literal tree\n"); */ 
833: /* MUTANT (del_stmt) */ /*       huft_free(tl); */ 
838: /* MUTANT (rep_op) */  if ((i = huft_build(ll - nl, nd, 0, cpdist, cpdext, &td, &bd)) != 0)
838: /* MUTANT (rep_op) */  if ((i = huft_build(ll * nl, nd, 0, cpdist, cpdext, &td, &bd)) != 0)
838: /* MUTANT (rep_op) */  if ((i = huft_build(ll % nl, nd, 0, cpdist, cpdext, &td, &bd)) != 0)
838: /* MUTANT (rep_op) */  if ((i = huft_build(ll + nl, nd, 0, cpdist, cpdext, &td, &bd)) == 0)
838: /* MUTANT (rep_const) */  if ((i = huft_build(ll + nl, nd, 1, cpdist, cpdext, &td, &bd)) != 0)
838: /* MUTANT (rep_const) */  if ((i = huft_build(ll + nl, nd, -1, cpdist, cpdext, &td, &bd)) != 0)
838: /* MUTANT (rep_const) */  if ((i = huft_build(ll + nl, nd, 0, cpdist, cpdext, &td, &bd)) != 1)
838: /* MUTANT (rep_const) */  if ((i = huft_build(ll + nl, nd, 0, cpdist, cpdext, &td, &bd)) != -1)
838: /* MUTANT (negate) */  if(! ((i = huft_build(ll + nl, nd, 0, cpdist, cpdext, &td, &bd)) != 0))
840: /* MUTANT (rep_op) */    if (i != 1) {
840: /* MUTANT (rep_const) */    if (i == 0) {
840: /* MUTANT (rep_const) */    if (i == -1) {
840: /* MUTANT (rep_const) */    if (i == ((1)+1)) {
840: /* MUTANT (negate) */    if(! (i == 1)) {
841: /* MUTANT (del_stmt) */ /*       fprintf(stderr, " incomplete distance tree\n"); */ 
843: /* MUTANT (rep_const) */      i = 1;
843: /* MUTANT (rep_const) */      i = -1;
849: /* MUTANT (del_stmt) */ /*     return i; */                    /* incomplete code set */
855: /* MUTANT (negate) */  if(! (inflate_codes(tl, td, bl, bd)))
856: /* MUTANT (rep_const) */    return 0;
856: /* MUTANT (rep_const) */    return -1;
856: /* MUTANT (rep_const) */    return ((1)+1);
860: /* MUTANT (del_stmt) */ /*   huft_free(tl); */ 
861: /* MUTANT (del_stmt) */ /*   huft_free(td); */ 
862: /* MUTANT (del_stmt) */ /*   return 0; */ 
862: /* MUTANT (rep_const) */  return 1;
862: /* MUTANT (rep_const) */  return -1;
871: /* MUTANT (del_stmt) */ /*   unsigned t; */            /* block type */
872: /* MUTANT (del_stmt) */ /*   register ulg b; */        /* bit buffer */
873: /* MUTANT (del_stmt) */ /*   register unsigned k; */   /* number of bits in bit buffer */
877: /* MUTANT (del_stmt) */ /*   b = bb; */ 
878: /* MUTANT (del_stmt) */ /*   k = bk; */ 
882: /* MUTANT (rep_const) */  NEEDBITS(0)
882: /* MUTANT (rep_const) */  NEEDBITS(-1)
882: /* MUTANT (rep_const) */  NEEDBITS(((1)+1))
883: /* MUTANT (rep_const) */  *e = (int)b & 0;
883: /* MUTANT (rep_const) */  *e = (int)b & -1;
883: /* MUTANT (rep_const) */  *e = (int)b & ((1)+1);
884: /* MUTANT (rep_const) */  DUMPBITS(0)
884: /* MUTANT (rep_const) */  DUMPBITS(-1)
884: /* MUTANT (rep_const) */  DUMPBITS(((1)+1))
888: /* MUTANT (rep_const) */  NEEDBITS(0)
888: /* MUTANT (rep_const) */  NEEDBITS(1)
888: /* MUTANT (rep_const) */  NEEDBITS(-1)
888: /* MUTANT (rep_const) */  NEEDBITS(((2)+1))
888: /* MUTANT (rep_const) */  NEEDBITS(((2)-1))
889: /* MUTANT (rep_const) */  t = (unsigned)b & 0;
889: /* MUTANT (rep_const) */  t = (unsigned)b & 1;
889: /* MUTANT (rep_const) */  t = (unsigned)b & -1;
889: /* MUTANT (rep_const) */  t = (unsigned)b & ((3)+1);
889: /* MUTANT (rep_const) */  t = (unsigned)b & ((3)-1);
890: /* MUTANT (rep_const) */  DUMPBITS(0)
890: /* MUTANT (rep_const) */  DUMPBITS(1)
890: /* MUTANT (rep_const) */  DUMPBITS(-1)
890: /* MUTANT (rep_const) */  DUMPBITS(((2)+1))
890: /* MUTANT (rep_const) */  DUMPBITS(((2)-1))
895: /* MUTANT (del_stmt) */ /*   bk = k; */ 
899: /* MUTANT (rep_op) */  if (t != 2)
899: /* MUTANT (rep_const) */  if (t == 0)
899: /* MUTANT (rep_const) */  if (t == 1)
899: /* MUTANT (rep_const) */  if (t == -1)
899: /* MUTANT (rep_const) */  if (t == ((2)+1))
899: /* MUTANT (rep_const) */  if (t == ((2)-1))
899: /* MUTANT (negate) */  if(! (t == 2))
901: /* MUTANT (rep_op) */  if (t != 0)
901: /* MUTANT (rep_const) */  if (t == 1)
901: /* MUTANT (rep_const) */  if (t == -1)
901: /* MUTANT (negate) */  if(! (t == 0))
903: /* MUTANT (rep_op) */  if (t != 1)
903: /* MUTANT (rep_const) */  if (t == 0)
903: /* MUTANT (rep_const) */  if (t == -1)
903: /* MUTANT (rep_const) */  if (t == ((1)+1))
903: /* MUTANT (negate) */  if(! (t == 1))
908: /* MUTANT (del_stmt) */ /*   return 2; */ 
908: /* MUTANT (rep_const) */  return 0;
908: /* MUTANT (rep_const) */  return 1;
908: /* MUTANT (rep_const) */  return -1;
908: /* MUTANT (rep_const) */  return ((2)+1);
908: /* MUTANT (rep_const) */  return ((2)-1);
916: /* MUTANT (del_stmt) */ /*   int e; */                 /* last block flag */
917: /* MUTANT (del_stmt) */ /*   int r; */                 /* result code */
918: /* MUTANT (del_stmt) */ /*   unsigned h; */            /* maximum struct huft's malloc'ed */
922: /* MUTANT (del_stmt) */ /*   wp = 0; */ 
922: /* MUTANT (rep_const) */  wp = 1;
922: /* MUTANT (rep_const) */  wp = -1;
923: /* MUTANT (del_stmt) */ /*   bk = 0; */ 
923: /* MUTANT (rep_const) */  bk = 1;
923: /* MUTANT (rep_const) */  bk = -1;
924: /* MUTANT (del_stmt) */ /*   bb = 0; */ 
924: /* MUTANT (rep_const) */  bb = 1;
924: /* MUTANT (rep_const) */  bb = -1;
928: /* MUTANT (del_stmt) */ /*   h = 0; */ 
928: /* MUTANT (rep_const) */  h = 1;
928: /* MUTANT (rep_const) */  h = -1;
930: /* MUTANT (del_stmt) */ /*     hufts = 0; */ 
930: /* MUTANT (rep_const) */    hufts = 1;
930: /* MUTANT (rep_const) */    hufts = -1;
931: /* MUTANT (rep_op) */    if ((r = inflate_block(&e)) == 0)
931: /* MUTANT (rep_const) */    if ((r = inflate_block(&e)) != 1)
931: /* MUTANT (rep_const) */    if ((r = inflate_block(&e)) != -1)
931: /* MUTANT (negate) */    if(! ((r = inflate_block(&e)) != 0))
933: /* MUTANT (rep_op) */    if (hufts <= h)
933: /* MUTANT (rep_op) */    if (hufts < h)
933: /* MUTANT (rep_op) */    if (hufts >= h)
933: /* MUTANT (rep_op) */    if (hufts == h)
933: /* MUTANT (rep_op) */    if (hufts != h)
933: /* MUTANT (negate) */    if(! (hufts > h))
935: /* MUTANT (del_stmt) */ /*   } while (!e); */ 
935: /* MUTANT (negate) */  } while(! (!e));
940: /* MUTANT (rep_op) */  while (bk <= 8) {
940: /* MUTANT (rep_op) */  while (bk < 8) {
940: /* MUTANT (rep_op) */  while (bk > 8) {
940: /* MUTANT (rep_op) */  while (bk == 8) {
940: /* MUTANT (rep_op) */  while (bk != 8) {
940: /* MUTANT (rep_const) */  while (bk >= 0) {
940: /* MUTANT (rep_const) */  while (bk >= 1) {
940: /* MUTANT (rep_const) */  while (bk >= -1) {
940: /* MUTANT (rep_const) */  while (bk >= ((8)+1)) {
940: /* MUTANT (rep_const) */  while (bk >= ((8)-1)) {
940: /* MUTANT (negate) */  while(! (bk >= 8)) {
941: /* MUTANT (del_stmt) */ /*     bk -= 8; */ 
941: /* MUTANT (rep_op) */    bk += 8;
941: /* MUTANT (rep_op) */    bk *= 8;
941: /* MUTANT (rep_op) */    bk %= 8;
941: /* MUTANT (rep_const) */    bk -= 0;
941: /* MUTANT (rep_const) */    bk -= 1;
941: /* MUTANT (rep_const) */    bk -= -1;
941: /* MUTANT (rep_const) */    bk -= ((8)+1);
941: /* MUTANT (rep_const) */    bk -= ((8)-1);
942: /* MUTANT (del_stmt) */ /*     inptr--; */ 
942: /* MUTANT (rep_op) */    inptr++;
953: /* MUTANT (rep_const) */  return 1;
953: /* MUTANT (rep_const) */  return -1;
