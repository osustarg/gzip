62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.0 1993/06/10 13:27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.1 1993/06/10 13:27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.-1 1993/06/10 13:27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.((12)+1) 1993/06/10 13:27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.((12)-1) 1993/06/10 13:27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 0/06/10 13:27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1/06/10 13:27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 -1/06/10 13:27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 ((1993)+1)/06/10 13:27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 ((1993)-1)/06/10 13:27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/0/10 13:27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/1/10 13:27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/-1/10 13:27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/((06)+1)/10 13:27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/((06)-1)/10 13:27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/06/0 13:27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/06/1 13:27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/06/-1 13:27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/06/((10)+1) 13:27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/06/((10)-1) 13:27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/06/10 0:27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/06/10 1:27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/06/10 -1:27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/06/10 ((13)+1):27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/06/10 ((13)-1):27:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/06/10 13:0:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/06/10 13:1:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/06/10 13:-1:54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/06/10 13:((27)+1):54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/06/10 13:((27)-1):54 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/06/10 13:27:0 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/06/10 13:27:1 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/06/10 13:27:-1 jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/06/10 13:27:((54)+1) jloup Exp $";
62: /* MUTANT (rep_const) */static char rcsid[] = "$Id: trees.c,v 0.12 1993/06/10 13:27:((54)-1) jloup Exp $";
69: #define MAX_BITS 0 /* MUTANT (rep_const) */
69: #define MAX_BITS 1 /* MUTANT (rep_const) */
69: #define MAX_BITS -1 /* MUTANT (rep_const) */
69: #define MAX_BITS ((15)+1) /* MUTANT (rep_const) */
69: #define MAX_BITS ((15)-1) /* MUTANT (rep_const) */
72: #define MAX_BL_BITS 0 /* MUTANT (rep_const) */
72: #define MAX_BL_BITS 1 /* MUTANT (rep_const) */
72: #define MAX_BL_BITS -1 /* MUTANT (rep_const) */
72: #define MAX_BL_BITS ((7)+1) /* MUTANT (rep_const) */
72: #define MAX_BL_BITS ((7)-1) /* MUTANT (rep_const) */
75: #define LENGTH_CODES 0 /* MUTANT (rep_const) */
75: #define LENGTH_CODES 1 /* MUTANT (rep_const) */
75: #define LENGTH_CODES -1 /* MUTANT (rep_const) */
75: #define LENGTH_CODES ((29)+1) /* MUTANT (rep_const) */
75: #define LENGTH_CODES ((29)-1) /* MUTANT (rep_const) */
78: #define LITERALS  0 /* MUTANT (rep_const) */
78: #define LITERALS  1 /* MUTANT (rep_const) */
78: #define LITERALS  -1 /* MUTANT (rep_const) */
78: #define LITERALS  ((256)+1) /* MUTANT (rep_const) */
78: #define LITERALS  ((256)-1) /* MUTANT (rep_const) */
81: #define END_BLOCK 0 /* MUTANT (rep_const) */
81: #define END_BLOCK 1 /* MUTANT (rep_const) */
81: #define END_BLOCK -1 /* MUTANT (rep_const) */
81: #define END_BLOCK ((256)+1) /* MUTANT (rep_const) */
81: #define END_BLOCK ((256)-1) /* MUTANT (rep_const) */
84: #define L_CODES (LITERALS+0+LENGTH_CODES) /* MUTANT (rep_const) */
84: #define L_CODES (LITERALS+-1+LENGTH_CODES) /* MUTANT (rep_const) */
84: #define L_CODES (LITERALS+((1)+1)+LENGTH_CODES) /* MUTANT (rep_const) */
87: #define D_CODES   0 /* MUTANT (rep_const) */
87: #define D_CODES   1 /* MUTANT (rep_const) */
87: #define D_CODES   -1 /* MUTANT (rep_const) */
87: #define D_CODES   ((30)+1) /* MUTANT (rep_const) */
87: #define D_CODES   ((30)-1) /* MUTANT (rep_const) */
90: #define BL_CODES  0 /* MUTANT (rep_const) */
90: #define BL_CODES  1 /* MUTANT (rep_const) */
90: #define BL_CODES  -1 /* MUTANT (rep_const) */
90: #define BL_CODES  ((19)+1) /* MUTANT (rep_const) */
90: #define BL_CODES  ((19)-1) /* MUTANT (rep_const) */
95: /* MUTANT (rep_const) */   = {1,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {-1,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,1,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,-1,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,1,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,-1,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,-1,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,1,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,-1,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,1,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,-1,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,1,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,-1,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,-1,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,-1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,((1)+1),1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,0,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,-1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,((1)+1),1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,0,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,-1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,((1)+1),1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,0,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,-1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,((1)+1),2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,0,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,-1,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,((2)+1),2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,((2)-1),2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,0,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,1,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,-1,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,((2)+1),2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,((2)-1),2,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,0,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,1,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,-1,2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,((2)+1),2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,((2)-1),2,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,0,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,1,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,-1,3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,((2)+1),3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,((2)-1),3,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,0,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,1,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,-1,3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,((3)+1),3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,((3)-1),3,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,0,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,1,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,-1,3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,((3)+1),3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,((3)-1),3,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,0,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,1,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,-1,3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,((3)+1),3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,((3)-1),3,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,0,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,1,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,-1,4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,((3)+1),4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,((3)-1),4,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,0,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,1,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,-1,4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,((4)+1),4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,((4)-1),4,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,0,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,1,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,-1,4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,((4)+1),4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,((4)-1),4,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,0,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,1,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,-1,4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,((4)+1),4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,((4)-1),4,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,0,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,1,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,-1,5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,((4)+1),5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,((4)-1),5,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,0,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,1,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,-1,5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,((5)+1),5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,((5)-1),5,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,0,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,1,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,-1,5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,((5)+1),5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,((5)-1),5,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,0,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,1,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,-1,5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,((5)+1),5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,((5)-1),5,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,0,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,1,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,-1,0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,((5)+1),0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,((5)-1),0};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,1};
95: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,-1};
98: /* MUTANT (rep_const) */   = {1,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {-1,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,1,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,-1,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,1,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,-1,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,-1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,((1)+1),1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,0,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,-1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,((1)+1),2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,0,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,1,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,-1,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,((2)+1),2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,((2)-1),2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,0,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,1,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,-1,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,((2)+1),3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,((2)-1),3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,0,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,1,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,-1,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,((3)+1),3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,((3)-1),3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,0,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,1,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,-1,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,((3)+1),4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,((3)-1),4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,1,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,-1,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,((4)+1),4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,((4)-1),4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,0,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,1,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,-1,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,((4)+1),5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,((4)-1),5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,0,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,1,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,-1,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,((5)+1),5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,((5)-1),5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,0,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,1,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,-1,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,((5)+1),6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,((5)-1),6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,0,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,1,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,-1,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,((6)+1),6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,((6)-1),6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,0,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,1,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,-1,7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,((6)+1),7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,((6)-1),7,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,0,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,1,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,-1,7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,((7)+1),7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,((7)-1),7,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,0,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,1,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,-1,8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,((7)+1),8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,((7)-1),8,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,0,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,1,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,-1,8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,((8)+1),8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,((8)-1),8,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,0,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,1,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,-1,9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,((8)+1),9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,((8)-1),9,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,0,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,1,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,-1,9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,((9)+1),9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,((9)-1),9,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,0,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,1,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,-1,10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,((9)+1),10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,((9)-1),10,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,0,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,1,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,-1,10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,((10)+1),10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,((10)-1),10,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,0,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,1,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,-1,11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,((10)+1),11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,((10)-1),11,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,0,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,1,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,-1,11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,((11)+1),11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,((11)-1),11,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,0,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,1,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,-1,12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,((11)+1),12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,((11)-1),12,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,0,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,1,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,-1,12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,((12)+1),12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,((12)-1),12,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,0,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,1,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,-1,13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,((12)+1),13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,((12)-1),13,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,0,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,1,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,-1,13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,((13)+1),13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,((13)-1),13};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,0};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,1};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,-1};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,((13)+1)};
98: /* MUTANT (rep_const) */   = {0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,((13)-1)};
101: /* MUTANT (rep_const) */   = {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,2,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,((2)+1),3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,((2)-1),3,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,-1,7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,((3)+1),7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,((3)-1),7};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,1};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,-1};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,((7)+1)};
101: /* MUTANT (rep_const) */   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,((7)-1)};
103: #define STORED_BLOCK 1 /* MUTANT (rep_const) */
103: #define STORED_BLOCK -1 /* MUTANT (rep_const) */
104: #define STATIC_TREES 0 /* MUTANT (rep_const) */
104: #define STATIC_TREES -1 /* MUTANT (rep_const) */
104: #define STATIC_TREES ((1)+1) /* MUTANT (rep_const) */
105: #define DYN_TREES    0 /* MUTANT (rep_const) */
105: #define DYN_TREES    1 /* MUTANT (rep_const) */
105: #define DYN_TREES    -1 /* MUTANT (rep_const) */
105: #define DYN_TREES    ((2)+1) /* MUTANT (rep_const) */
105: #define DYN_TREES    ((2)-1) /* MUTANT (rep_const) */
110: #    define LIT_BUFSIZE  1x2000 /* MUTANT (rep_const) */
110: #    define LIT_BUFSIZE  -1x2000 /* MUTANT (rep_const) */
113: #    define LIT_BUFSIZE  1x4000 /* MUTANT (rep_const) */
113: #    define LIT_BUFSIZE  -1x4000 /* MUTANT (rep_const) */
115: #    define LIT_BUFSIZE  1x8000 /* MUTANT (rep_const) */
115: #    define LIT_BUFSIZE  -1x8000 /* MUTANT (rep_const) */
146: #define REP_3_6      0 /* MUTANT (rep_const) */
146: #define REP_3_6      1 /* MUTANT (rep_const) */
146: #define REP_3_6      -1 /* MUTANT (rep_const) */
146: #define REP_3_6      ((16)+1) /* MUTANT (rep_const) */
146: #define REP_3_6      ((16)-1) /* MUTANT (rep_const) */
149: #define REPZ_3_10    0 /* MUTANT (rep_const) */
149: #define REPZ_3_10    1 /* MUTANT (rep_const) */
149: #define REPZ_3_10    -1 /* MUTANT (rep_const) */
149: #define REPZ_3_10    ((17)+1) /* MUTANT (rep_const) */
149: #define REPZ_3_10    ((17)-1) /* MUTANT (rep_const) */
152: #define REPZ_11_138  0 /* MUTANT (rep_const) */
152: #define REPZ_11_138  1 /* MUTANT (rep_const) */
152: #define REPZ_11_138  -1 /* MUTANT (rep_const) */
152: #define REPZ_11_138  ((18)+1) /* MUTANT (rep_const) */
152: #define REPZ_11_138  ((18)-1) /* MUTANT (rep_const) */
162: /* MUTANT (del_stmt) */ /*         ush  freq; */        /* frequency count */
163: /* MUTANT (del_stmt) */ /*         ush  code; */        /* bit string */
164: /* MUTANT (del_stmt) */ /*     } fc; */ 
166: /* MUTANT (del_stmt) */ /*         ush  dad; */         /* father node in Huffman tree */
167: /* MUTANT (del_stmt) */ /*         ush  len; */         /* length of bit string */
168: /* MUTANT (del_stmt) */ /*     } dl; */ 
169: /* MUTANT (del_stmt) */ /* } ct_data; */ 
176: #define HEAP_SIZE (0*L_CODES+1) /* MUTANT (rep_const) */
176: #define HEAP_SIZE (1*L_CODES+1) /* MUTANT (rep_const) */
176: #define HEAP_SIZE (-1*L_CODES+1) /* MUTANT (rep_const) */
176: #define HEAP_SIZE (((2)+1)*L_CODES+1) /* MUTANT (rep_const) */
176: #define HEAP_SIZE (((2)-1)*L_CODES+1) /* MUTANT (rep_const) */
176: #define HEAP_SIZE (2*L_CODES+0) /* MUTANT (rep_const) */
176: #define HEAP_SIZE (2*L_CODES+-1) /* MUTANT (rep_const) */
176: #define HEAP_SIZE (2*L_CODES+((1)+1)) /* MUTANT (rep_const) */
180: /* MUTANT (del_stmt) */ /* local ct_data near dyn_dtree[2*D_CODES+1]; */  /* distance tree */
180: /* MUTANT (rep_op) */local ct_data near dyn_dtree[2*D_CODES-1]; /* distance tree */
180: /* MUTANT (rep_op) */local ct_data near dyn_dtree[2*D_CODES*1]; /* distance tree */
180: /* MUTANT (rep_op) */local ct_data near dyn_dtree[2*D_CODES%1]; /* distance tree */
180: /* MUTANT (rep_const) */local ct_data near dyn_dtree[0*D_CODES+1]; /* distance tree */
180: /* MUTANT (rep_const) */local ct_data near dyn_dtree[1*D_CODES+1]; /* distance tree */
180: /* MUTANT (rep_const) */local ct_data near dyn_dtree[-1*D_CODES+1]; /* distance tree */
180: /* MUTANT (rep_const) */local ct_data near dyn_dtree[((2)+1)*D_CODES+1]; /* distance tree */
180: /* MUTANT (rep_const) */local ct_data near dyn_dtree[((2)-1)*D_CODES+1]; /* distance tree */
180: /* MUTANT (rep_const) */local ct_data near dyn_dtree[2*D_CODES+0]; /* distance tree */
180: /* MUTANT (rep_const) */local ct_data near dyn_dtree[2*D_CODES+-1]; /* distance tree */
180: /* MUTANT (rep_const) */local ct_data near dyn_dtree[2*D_CODES+((1)+1)]; /* distance tree */
182: /* MUTANT (del_stmt) */ /* local ct_data near static_ltree[L_CODES+2]; */ 
182: /* MUTANT (rep_op) */local ct_data near static_ltree[L_CODES-2];
182: /* MUTANT (rep_op) */local ct_data near static_ltree[L_CODES*2];
182: /* MUTANT (rep_op) */local ct_data near static_ltree[L_CODES%2];
182: /* MUTANT (rep_const) */local ct_data near static_ltree[L_CODES+0];
182: /* MUTANT (rep_const) */local ct_data near static_ltree[L_CODES+1];
182: /* MUTANT (rep_const) */local ct_data near static_ltree[L_CODES+-1];
182: /* MUTANT (rep_const) */local ct_data near static_ltree[L_CODES+((2)+1)];
182: /* MUTANT (rep_const) */local ct_data near static_ltree[L_CODES+((2)-1)];
189: /* MUTANT (del_stmt) */ /* local ct_data near static_dtree[D_CODES]; */ 
194: /* MUTANT (del_stmt) */ /* local ct_data near bl_tree[2*BL_CODES+1]; */ 
194: /* MUTANT (rep_op) */local ct_data near bl_tree[2*BL_CODES-1];
194: /* MUTANT (rep_op) */local ct_data near bl_tree[2*BL_CODES*1];
194: /* MUTANT (rep_op) */local ct_data near bl_tree[2*BL_CODES%1];
194: /* MUTANT (rep_const) */local ct_data near bl_tree[0*BL_CODES+1];
194: /* MUTANT (rep_const) */local ct_data near bl_tree[1*BL_CODES+1];
194: /* MUTANT (rep_const) */local ct_data near bl_tree[-1*BL_CODES+1];
194: /* MUTANT (rep_const) */local ct_data near bl_tree[((2)+1)*BL_CODES+1];
194: /* MUTANT (rep_const) */local ct_data near bl_tree[((2)-1)*BL_CODES+1];
194: /* MUTANT (rep_const) */local ct_data near bl_tree[2*BL_CODES+0];
194: /* MUTANT (rep_const) */local ct_data near bl_tree[2*BL_CODES+-1];
194: /* MUTANT (rep_const) */local ct_data near bl_tree[2*BL_CODES+((1)+1)];
198: /* MUTANT (del_stmt) */ /*     ct_data near *dyn_tree; */       /* the dynamic tree */
199: /* MUTANT (del_stmt) */ /*     ct_data near *static_tree; */    /* corresponding static tree or NULL */
200: /* MUTANT (del_stmt) */ /*     int     near *extra_bits; */     /* extra bits for each code or NULL */
201: /* MUTANT (del_stmt) */ /*     int     extra_base; */           /* base index for extra_bits */
202: /* MUTANT (del_stmt) */ /*     int     elems; */                /* max number of elements in the tree */
203: /* MUTANT (del_stmt) */ /*     int     max_length; */           /* max bit length for the codes */
204: /* MUTANT (del_stmt) */ /*     int     max_code; */             /* largest code with non zero frequency */
205: /* MUTANT (del_stmt) */ /* } tree_desc; */ 
208: /* MUTANT (rep_op) */{dyn_ltree, static_ltree, extra_lbits, LITERALS-1, L_CODES, MAX_BITS, 0};
208: /* MUTANT (rep_op) */{dyn_ltree, static_ltree, extra_lbits, LITERALS*1, L_CODES, MAX_BITS, 0};
208: /* MUTANT (rep_op) */{dyn_ltree, static_ltree, extra_lbits, LITERALS%1, L_CODES, MAX_BITS, 0};
208: /* MUTANT (rep_const) */{dyn_ltree, static_ltree, extra_lbits, LITERALS+0, L_CODES, MAX_BITS, 0};
208: /* MUTANT (rep_const) */{dyn_ltree, static_ltree, extra_lbits, LITERALS+-1, L_CODES, MAX_BITS, 0};
208: /* MUTANT (rep_const) */{dyn_ltree, static_ltree, extra_lbits, LITERALS+((1)+1), L_CODES, MAX_BITS, 0};
208: /* MUTANT (rep_const) */{dyn_ltree, static_ltree, extra_lbits, LITERALS+1, L_CODES, MAX_BITS, 1};
208: /* MUTANT (rep_const) */{dyn_ltree, static_ltree, extra_lbits, LITERALS+1, L_CODES, MAX_BITS, -1};
211: /* MUTANT (rep_const) */{dyn_dtree, static_dtree, extra_dbits, 1,          D_CODES, MAX_BITS, 0};
211: /* MUTANT (rep_const) */{dyn_dtree, static_dtree, extra_dbits, -1,          D_CODES, MAX_BITS, 0};
211: /* MUTANT (rep_const) */{dyn_dtree, static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS, 1};
211: /* MUTANT (rep_const) */{dyn_dtree, static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS, -1};
214: /* MUTANT (rep_const) */{bl_tree, (ct_data near *)1, extra_blbits, 0,      BL_CODES, MAX_BL_BITS, 0};
214: /* MUTANT (rep_const) */{bl_tree, (ct_data near *)-1, extra_blbits, 0,      BL_CODES, MAX_BL_BITS, 0};
214: /* MUTANT (rep_const) */{bl_tree, (ct_data near *)0, extra_blbits, 1,      BL_CODES, MAX_BL_BITS, 0};
214: /* MUTANT (rep_const) */{bl_tree, (ct_data near *)0, extra_blbits, -1,      BL_CODES, MAX_BL_BITS, 0};
214: /* MUTANT (rep_const) */{bl_tree, (ct_data near *)0, extra_blbits, 0,      BL_CODES, MAX_BL_BITS, 1};
214: /* MUTANT (rep_const) */{bl_tree, (ct_data near *)0, extra_blbits, 0,      BL_CODES, MAX_BL_BITS, -1};
217: /* MUTANT (del_stmt) */ /* local ush near bl_count[MAX_BITS+1]; */ 
217: /* MUTANT (rep_op) */local ush near bl_count[MAX_BITS-1];
217: /* MUTANT (rep_op) */local ush near bl_count[MAX_BITS*1];
217: /* MUTANT (rep_op) */local ush near bl_count[MAX_BITS%1];
217: /* MUTANT (rep_const) */local ush near bl_count[MAX_BITS+0];
217: /* MUTANT (rep_const) */local ush near bl_count[MAX_BITS+-1];
217: /* MUTANT (rep_const) */local ush near bl_count[MAX_BITS+((1)+1)];
221: /* MUTANT (rep_const) */   = {0,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {1,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {-1,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {((16)+1),17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {((16)-1),17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,0,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,1,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,-1,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,((17)+1),18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,((17)-1),18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,0,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,1,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,-1,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,((18)+1),0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,((18)-1),0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,1,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,-1,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,0,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,1,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,-1,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,((8)+1),7,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,((8)-1),7,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,0,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,1,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,-1,9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,((7)+1),9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,((7)-1),9,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,0,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,1,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,-1,6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,((9)+1),6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,((9)-1),6,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,0,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,1,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,-1,10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,((6)+1),10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,((6)-1),10,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,0,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,1,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,-1,5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,((10)+1),5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,((10)-1),5,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,0,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,1,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,-1,11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,((5)+1),11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,((5)-1),11,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,0,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,1,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,-1,4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,((11)+1),4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,((11)-1),4,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,0,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,1,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,-1,12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,((4)+1),12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,((4)-1),12,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,0,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,1,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,-1,3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,((12)+1),3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,((12)-1),3,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,0,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,1,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,-1,13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,((3)+1),13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,((3)-1),13,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,0,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,1,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,-1,2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,((13)+1),2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,((13)-1),2,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,0,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,1,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,-1,14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,((2)+1),14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,((2)-1),14,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,0,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,1,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,-1,1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,((14)+1),1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,((14)-1),1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,0,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,-1,15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,((1)+1),15};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,0};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,1};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,-1};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,((15)+1)};
221: /* MUTANT (rep_const) */   = {16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,((15)-1)};
226: /* MUTANT (del_stmt) */ /* local int near heap[2*L_CODES+1]; */  /* heap used to build the Huffman trees */
226: /* MUTANT (rep_op) */local int near heap[2*L_CODES-1]; /* heap used to build the Huffman trees */
226: /* MUTANT (rep_op) */local int near heap[2*L_CODES*1]; /* heap used to build the Huffman trees */
226: /* MUTANT (rep_op) */local int near heap[2*L_CODES%1]; /* heap used to build the Huffman trees */
226: /* MUTANT (rep_const) */local int near heap[0*L_CODES+1]; /* heap used to build the Huffman trees */
226: /* MUTANT (rep_const) */local int near heap[1*L_CODES+1]; /* heap used to build the Huffman trees */
226: /* MUTANT (rep_const) */local int near heap[-1*L_CODES+1]; /* heap used to build the Huffman trees */
226: /* MUTANT (rep_const) */local int near heap[((2)+1)*L_CODES+1]; /* heap used to build the Huffman trees */
226: /* MUTANT (rep_const) */local int near heap[((2)-1)*L_CODES+1]; /* heap used to build the Huffman trees */
226: /* MUTANT (rep_const) */local int near heap[2*L_CODES+0]; /* heap used to build the Huffman trees */
226: /* MUTANT (rep_const) */local int near heap[2*L_CODES+-1]; /* heap used to build the Huffman trees */
226: /* MUTANT (rep_const) */local int near heap[2*L_CODES+((1)+1)]; /* heap used to build the Huffman trees */
227: /* MUTANT (del_stmt) */ /* local int heap_len; */                /* number of elements in the heap */
228: /* MUTANT (del_stmt) */ /* local int heap_max; */                /* element of largest frequency */
233: /* MUTANT (del_stmt) */ /* local uch near depth[2*L_CODES+1]; */ 
233: /* MUTANT (rep_op) */local uch near depth[2*L_CODES-1];
233: /* MUTANT (rep_op) */local uch near depth[2*L_CODES*1];
233: /* MUTANT (rep_op) */local uch near depth[2*L_CODES%1];
233: /* MUTANT (rep_const) */local uch near depth[0*L_CODES+1];
233: /* MUTANT (rep_const) */local uch near depth[1*L_CODES+1];
233: /* MUTANT (rep_const) */local uch near depth[-1*L_CODES+1];
233: /* MUTANT (rep_const) */local uch near depth[((2)+1)*L_CODES+1];
233: /* MUTANT (rep_const) */local uch near depth[((2)-1)*L_CODES+1];
233: /* MUTANT (rep_const) */local uch near depth[2*L_CODES+0];
233: /* MUTANT (rep_const) */local uch near depth[2*L_CODES+-1];
233: /* MUTANT (rep_const) */local uch near depth[2*L_CODES+((1)+1)];
236: /* MUTANT (del_stmt) */ /* local uch length_code[MAX_MATCH-MIN_MATCH+1]; */ 
236: /* MUTANT (rep_op) */local uch length_code[MAX_MATCH-MIN_MATCH-1];
236: /* MUTANT (rep_op) */local uch length_code[MAX_MATCH-MIN_MATCH*1];
236: /* MUTANT (rep_op) */local uch length_code[MAX_MATCH-MIN_MATCH%1];
236: /* MUTANT (rep_const) */local uch length_code[MAX_MATCH-MIN_MATCH+0];
236: /* MUTANT (rep_const) */local uch length_code[MAX_MATCH-MIN_MATCH+-1];
236: /* MUTANT (rep_const) */local uch length_code[MAX_MATCH-MIN_MATCH+((1)+1)];
239: /* MUTANT (del_stmt) */ /* local uch dist_code[512]; */ 
239: /* MUTANT (rep_const) */local uch dist_code[0];
239: /* MUTANT (rep_const) */local uch dist_code[1];
239: /* MUTANT (rep_const) */local uch dist_code[-1];
239: /* MUTANT (rep_const) */local uch dist_code[((512)+1)];
239: /* MUTANT (rep_const) */local uch dist_code[((512)-1)];
245: /* MUTANT (del_stmt) */ /* local int near base_length[LENGTH_CODES]; */ 
248: /* MUTANT (del_stmt) */ /* local int near base_dist[D_CODES]; */ 
256: /* MUTANT (rep_const) */local uch near flag_buf[(LIT_BUFSIZE/0)];
256: /* MUTANT (rep_const) */local uch near flag_buf[(LIT_BUFSIZE/1)];
256: /* MUTANT (rep_const) */local uch near flag_buf[(LIT_BUFSIZE/-1)];
256: /* MUTANT (rep_const) */local uch near flag_buf[(LIT_BUFSIZE/((8)+1))];
256: /* MUTANT (rep_const) */local uch near flag_buf[(LIT_BUFSIZE/((8)-1))];
261: /* MUTANT (del_stmt) */ /* local unsigned last_lit; */     /* running index in l_buf */
262: /* MUTANT (del_stmt) */ /* local unsigned last_dist; */    /* running index in d_buf */
263: /* MUTANT (del_stmt) */ /* local unsigned last_flags; */   /* running index in flag_buf */
264: /* MUTANT (del_stmt) */ /* local uch flags; */             /* current flags not yet saved in flag_buf */
265: /* MUTANT (del_stmt) */ /* local uch flag_bit; */          /* current bit used in flags */
271: /* MUTANT (del_stmt) */ /* local ulg opt_len; */         /* bit length of current block with optimal trees */
272: /* MUTANT (del_stmt) */ /* local ulg static_len; */      /* bit length of current block with static trees */
274: /* MUTANT (del_stmt) */ /* local ulg compressed_len; */  /* total bit length of compressed file */
276: /* MUTANT (del_stmt) */ /* local ulg input_len; */       /* total byte length of input file */
279: /* MUTANT (del_stmt) */ /* ush *file_type; */         /* pointer to UNKNOWN, BINARY or ASCII */
280: /* MUTANT (del_stmt) */ /* int *file_method; */       /* pointer to DEFLATE or STORE */
284: /* MUTANT (del_stmt) */ /* extern long isize; */      /* byte length of input file */
288: /* MUTANT (del_stmt) */ /* extern unsigned near strstart; */  /* window offset of current string */
294: /* MUTANT (del_stmt) */ /* local void init_block     OF((void)); */ 
295: /* MUTANT (del_stmt) */ /* local void pqdownheap     OF((ct_data near *tree, int k)); */ 
296: /* MUTANT (del_stmt) */ /* local void gen_bitlen     OF((tree_desc near *desc)); */ 
297: /* MUTANT (del_stmt) */ /* local void gen_codes      OF((ct_data near *tree, int max_code)); */ 
298: /* MUTANT (del_stmt) */ /* local void build_tree     OF((tree_desc near *desc)); */ 
299: /* MUTANT (del_stmt) */ /* local void scan_tree      OF((ct_data near *tree, int max_code)); */ 
300: /* MUTANT (del_stmt) */ /* local void send_tree      OF((ct_data near *tree, int max_code)); */ 
301: /* MUTANT (del_stmt) */ /* local int  build_bl_tree  OF((void)); */ 
302: /* MUTANT (del_stmt) */ /* local void send_all_trees OF((int lcodes, int dcodes, int blcodes)); */ 
303: /* MUTANT (del_stmt) */ /* local void compress_block OF((ct_data near *ltree, ct_data near *dtree)); */ 
304: /* MUTANT (del_stmt) */ /* local void set_file_type  OF((void)); */ 
313: /* MUTANT (rep_op) */     { if (verbose<=1) fprintf(stderr,"\ncd %3d ",(c)); \
313: /* MUTANT (rep_op) */     { if (verbose<1) fprintf(stderr,"\ncd %3d ",(c)); \
313: /* MUTANT (rep_op) */     { if (verbose>=1) fprintf(stderr,"\ncd %3d ",(c)); \
313: /* MUTANT (rep_op) */     { if (verbose==1) fprintf(stderr,"\ncd %3d ",(c)); \
313: /* MUTANT (rep_op) */     { if (verbose!=1) fprintf(stderr,"\ncd %3d ",(c)); \
313: /* MUTANT (rep_const) */     { if (verbose>0) fprintf(stderr,"\ncd %3d ",(c)); \
313: /* MUTANT (rep_const) */     { if (verbose>-1) fprintf(stderr,"\ncd %3d ",(c)); \
313: /* MUTANT (rep_const) */     { if (verbose>((1)+1)) fprintf(stderr,"\ncd %3d ",(c)); \
313: /* MUTANT (rep_const) */     { if (verbose>1) fprintf(stderr,"\ncd %0d ",(c)); \
313: /* MUTANT (rep_const) */     { if (verbose>1) fprintf(stderr,"\ncd %1d ",(c)); \
313: /* MUTANT (rep_const) */     { if (verbose>1) fprintf(stderr,"\ncd %-1d ",(c)); \
313: /* MUTANT (rep_const) */     { if (verbose>1) fprintf(stderr,"\ncd %((3)+1)d ",(c)); \
313: /* MUTANT (rep_const) */     { if (verbose>1) fprintf(stderr,"\ncd %((3)-1)d ",(c)); \
313: /* MUTANT (negate) */     { if(! (verbose>1)) fprintf(stderr,"\ncd %3d ",(c)); \
318: /* MUTANT (rep_op) */   ((dist) <= 256 ? dist_code[dist] : dist_code[256+((dist)>>7)])
318: /* MUTANT (rep_op) */   ((dist) > 256 ? dist_code[dist] : dist_code[256+((dist)>>7)])
318: /* MUTANT (rep_op) */   ((dist) >= 256 ? dist_code[dist] : dist_code[256+((dist)>>7)])
318: /* MUTANT (rep_op) */   ((dist) == 256 ? dist_code[dist] : dist_code[256+((dist)>>7)])
318: /* MUTANT (rep_op) */   ((dist) != 256 ? dist_code[dist] : dist_code[256+((dist)>>7)])
318: /* MUTANT (rep_op) */   ((dist) < 256 ? dist_code[dist] : dist_code[256-((dist)>>7)])
318: /* MUTANT (rep_op) */   ((dist) < 256 ? dist_code[dist] : dist_code[256*((dist)>>7)])
318: /* MUTANT (rep_op) */   ((dist) < 256 ? dist_code[dist] : dist_code[256%((dist)>>7)])
318: /* MUTANT (rep_const) */   ((dist) < 0 ? dist_code[dist] : dist_code[256+((dist)>>7)])
318: /* MUTANT (rep_const) */   ((dist) < 1 ? dist_code[dist] : dist_code[256+((dist)>>7)])
318: /* MUTANT (rep_const) */   ((dist) < -1 ? dist_code[dist] : dist_code[256+((dist)>>7)])
318: /* MUTANT (rep_const) */   ((dist) < ((256)+1) ? dist_code[dist] : dist_code[256+((dist)>>7)])
318: /* MUTANT (rep_const) */   ((dist) < ((256)-1) ? dist_code[dist] : dist_code[256+((dist)>>7)])
318: /* MUTANT (rep_const) */   ((dist) < 256 ? dist_code[dist] : dist_code[0+((dist)>>7)])
318: /* MUTANT (rep_const) */   ((dist) < 256 ? dist_code[dist] : dist_code[1+((dist)>>7)])
318: /* MUTANT (rep_const) */   ((dist) < 256 ? dist_code[dist] : dist_code[-1+((dist)>>7)])
318: /* MUTANT (rep_const) */   ((dist) < 256 ? dist_code[dist] : dist_code[((256)+1)+((dist)>>7)])
318: /* MUTANT (rep_const) */   ((dist) < 256 ? dist_code[dist] : dist_code[((256)-1)+((dist)>>7)])
318: /* MUTANT (rep_const) */   ((dist) < 256 ? dist_code[dist] : dist_code[256+((dist)>>0)])
318: /* MUTANT (rep_const) */   ((dist) < 256 ? dist_code[dist] : dist_code[256+((dist)>>1)])
318: /* MUTANT (rep_const) */   ((dist) < 256 ? dist_code[dist] : dist_code[256+((dist)>>-1)])
318: /* MUTANT (rep_const) */   ((dist) < 256 ? dist_code[dist] : dist_code[256+((dist)>>((7)+1))])
318: /* MUTANT (rep_const) */   ((dist) < 256 ? dist_code[dist] : dist_code[256+((dist)>>((7)-1))])
334: /* MUTANT (del_stmt) */ /*     int  *methodp; */  /* pointer to compression method */
336: /* MUTANT (del_stmt) */ /*     int n; */         /* iterates over tree elements */
337: /* MUTANT (del_stmt) */ /*     int bits; */      /* bit counter */
338: /* MUTANT (del_stmt) */ /*     int length; */    /* length value */
339: /* MUTANT (del_stmt) */ /*     int code; */      /* code value */
340: /* MUTANT (del_stmt) */ /*     int dist; */      /* distance index */
342: /* MUTANT (del_stmt) */ /*     file_type = attr; */ 
343: /* MUTANT (del_stmt) */ /*     file_method = methodp; */ 
344: /* MUTANT (del_stmt) */ /*     compressed_len = input_len = 0L; */ 
344: /* MUTANT (rep_const) */    compressed_len = input_len = 1L;
344: /* MUTANT (rep_const) */    compressed_len = input_len = -1L;
346: /* MUTANT (del_stmt) */ /*     if (static_dtree[0].Len != 0) return; */  /* ct_init already called */
346: /* MUTANT (rep_op) */    if (static_dtree[0].Len == 0) return; /* ct_init already called */
346: /* MUTANT (rep_const) */    if (static_dtree[1].Len != 0) return; /* ct_init already called */
346: /* MUTANT (rep_const) */    if (static_dtree[-1].Len != 0) return; /* ct_init already called */
346: /* MUTANT (rep_const) */    if (static_dtree[0].Len != 1) return; /* ct_init already called */
346: /* MUTANT (rep_const) */    if (static_dtree[0].Len != -1) return; /* ct_init already called */
346: /* MUTANT (negate) */    if(! (static_dtree[0].Len != 0)) return; /* ct_init already called */
349: /* MUTANT (del_stmt) */ /*     length = 0; */ 
349: /* MUTANT (rep_const) */    length = 1;
349: /* MUTANT (rep_const) */    length = -1;
350: /* MUTANT (rep_op) */    for (code = 0; code <= LENGTH_CODES-1; code++) {
350: /* MUTANT (rep_op) */    for (code = 0; code > LENGTH_CODES-1; code++) {
350: /* MUTANT (rep_op) */    for (code = 0; code >= LENGTH_CODES-1; code++) {
350: /* MUTANT (rep_op) */    for (code = 0; code == LENGTH_CODES-1; code++) {
350: /* MUTANT (rep_op) */    for (code = 0; code != LENGTH_CODES-1; code++) {
350: /* MUTANT (rep_op) */    for (code = 0; code < LENGTH_CODES-1; code--) {
350: /* MUTANT (rep_const) */    for (code = 1; code < LENGTH_CODES-1; code++) {
350: /* MUTANT (rep_const) */    for (code = -1; code < LENGTH_CODES-1; code++) {
350: /* MUTANT (rep_const) */    for (code = 0; code < LENGTH_CODES-0; code++) {
350: /* MUTANT (rep_const) */    for (code = 0; code < LENGTH_CODES--1; code++) {
350: /* MUTANT (rep_const) */    for (code = 0; code < LENGTH_CODES-((1)+1); code++) {
351: /* MUTANT (del_stmt) */ /*         base_length[code] = length; */ 
352: /* MUTANT (rep_op) */        for (n = 0; n <= (1<<extra_lbits[code]); n++) {
352: /* MUTANT (rep_op) */        for (n = 0; n > (1<<extra_lbits[code]); n++) {
352: /* MUTANT (rep_op) */        for (n = 0; n >= (1<<extra_lbits[code]); n++) {
352: /* MUTANT (rep_op) */        for (n = 0; n == (1<<extra_lbits[code]); n++) {
352: /* MUTANT (rep_op) */        for (n = 0; n != (1<<extra_lbits[code]); n++) {
352: /* MUTANT (rep_op) */        for (n = 0; n < (1<<extra_lbits[code]); n--) {
352: /* MUTANT (rep_const) */        for (n = 1; n < (1<<extra_lbits[code]); n++) {
352: /* MUTANT (rep_const) */        for (n = -1; n < (1<<extra_lbits[code]); n++) {
352: /* MUTANT (rep_const) */        for (n = 0; n < (0<<extra_lbits[code]); n++) {
352: /* MUTANT (rep_const) */        for (n = 0; n < (-1<<extra_lbits[code]); n++) {
352: /* MUTANT (rep_const) */        for (n = 0; n < (((1)+1)<<extra_lbits[code]); n++) {
353: /* MUTANT (del_stmt) */ /*             length_code[length++] = (uch)code; */ 
353: /* MUTANT (rep_op) */            length_code[length--] = (uch)code;
356: /* MUTANT (rep_op) */    Assert (length != 256, "ct_init: length != 256");
356: /* MUTANT (rep_const) */    Assert (length == 0, "ct_init: length != 256");
356: /* MUTANT (rep_const) */    Assert (length == 1, "ct_init: length != 256");
356: /* MUTANT (rep_const) */    Assert (length == -1, "ct_init: length != 256");
356: /* MUTANT (rep_const) */    Assert (length == ((256)+1), "ct_init: length != 256");
356: /* MUTANT (rep_const) */    Assert (length == ((256)-1), "ct_init: length != 256");
356: /* MUTANT (rep_const) */    Assert (length == 256, "ct_init: length != 0");
356: /* MUTANT (rep_const) */    Assert (length == 256, "ct_init: length != 1");
356: /* MUTANT (rep_const) */    Assert (length == 256, "ct_init: length != -1");
356: /* MUTANT (rep_const) */    Assert (length == 256, "ct_init: length != ((256)+1)");
356: /* MUTANT (rep_const) */    Assert (length == 256, "ct_init: length != ((256)-1)");
361: /* MUTANT (del_stmt) */ /*     length_code[length-1] = (uch)code; */ 
361: /* MUTANT (rep_const) */    length_code[length-0] = (uch)code;
361: /* MUTANT (rep_const) */    length_code[length--1] = (uch)code;
361: /* MUTANT (rep_const) */    length_code[length-((1)+1)] = (uch)code;
364: /* MUTANT (del_stmt) */ /*     dist = 0; */ 
364: /* MUTANT (rep_const) */    dist = 1;
364: /* MUTANT (rep_const) */    dist = -1;
365: /* MUTANT (rep_op) */    for (code = 0 ; code <= 16; code++) {
365: /* MUTANT (rep_op) */    for (code = 0 ; code > 16; code++) {
365: /* MUTANT (rep_op) */    for (code = 0 ; code >= 16; code++) {
365: /* MUTANT (rep_op) */    for (code = 0 ; code == 16; code++) {
365: /* MUTANT (rep_op) */    for (code = 0 ; code != 16; code++) {
365: /* MUTANT (rep_op) */    for (code = 0 ; code < 16; code--) {
365: /* MUTANT (rep_const) */    for (code = 1 ; code < 16; code++) {
365: /* MUTANT (rep_const) */    for (code = -1 ; code < 16; code++) {
365: /* MUTANT (rep_const) */    for (code = 0 ; code < 0; code++) {
365: /* MUTANT (rep_const) */    for (code = 0 ; code < 1; code++) {
365: /* MUTANT (rep_const) */    for (code = 0 ; code < -1; code++) {
365: /* MUTANT (rep_const) */    for (code = 0 ; code < ((16)+1); code++) {
365: /* MUTANT (rep_const) */    for (code = 0 ; code < ((16)-1); code++) {
366: /* MUTANT (del_stmt) */ /*         base_dist[code] = dist; */ 
367: /* MUTANT (rep_op) */        for (n = 0; n <= (1<<extra_dbits[code]); n++) {
367: /* MUTANT (rep_op) */        for (n = 0; n > (1<<extra_dbits[code]); n++) {
367: /* MUTANT (rep_op) */        for (n = 0; n >= (1<<extra_dbits[code]); n++) {
367: /* MUTANT (rep_op) */        for (n = 0; n == (1<<extra_dbits[code]); n++) {
367: /* MUTANT (rep_op) */        for (n = 0; n != (1<<extra_dbits[code]); n++) {
367: /* MUTANT (rep_op) */        for (n = 0; n < (1<<extra_dbits[code]); n--) {
367: /* MUTANT (rep_const) */        for (n = 1; n < (1<<extra_dbits[code]); n++) {
367: /* MUTANT (rep_const) */        for (n = -1; n < (1<<extra_dbits[code]); n++) {
367: /* MUTANT (rep_const) */        for (n = 0; n < (0<<extra_dbits[code]); n++) {
367: /* MUTANT (rep_const) */        for (n = 0; n < (-1<<extra_dbits[code]); n++) {
367: /* MUTANT (rep_const) */        for (n = 0; n < (((1)+1)<<extra_dbits[code]); n++) {
368: /* MUTANT (del_stmt) */ /*             dist_code[dist++] = (uch)code; */ 
368: /* MUTANT (rep_op) */            dist_code[dist--] = (uch)code;
371: /* MUTANT (rep_op) */    Assert (dist != 256, "ct_init: dist != 256");
371: /* MUTANT (rep_const) */    Assert (dist == 0, "ct_init: dist != 256");
371: /* MUTANT (rep_const) */    Assert (dist == 1, "ct_init: dist != 256");
371: /* MUTANT (rep_const) */    Assert (dist == -1, "ct_init: dist != 256");
371: /* MUTANT (rep_const) */    Assert (dist == ((256)+1), "ct_init: dist != 256");
371: /* MUTANT (rep_const) */    Assert (dist == ((256)-1), "ct_init: dist != 256");
371: /* MUTANT (rep_const) */    Assert (dist == 256, "ct_init: dist != 0");
371: /* MUTANT (rep_const) */    Assert (dist == 256, "ct_init: dist != 1");
371: /* MUTANT (rep_const) */    Assert (dist == 256, "ct_init: dist != -1");
371: /* MUTANT (rep_const) */    Assert (dist == 256, "ct_init: dist != ((256)+1)");
371: /* MUTANT (rep_const) */    Assert (dist == 256, "ct_init: dist != ((256)-1)");
372: /* MUTANT (del_stmt) */ /*     dist >>= 7; */  /* from now on, all distances are divided by 128 */
372: /* MUTANT (rep_const) */    dist >>= 0; /* from now on, all distances are divided by 128 */
372: /* MUTANT (rep_const) */    dist >>= 1; /* from now on, all distances are divided by 128 */
372: /* MUTANT (rep_const) */    dist >>= -1; /* from now on, all distances are divided by 128 */
372: /* MUTANT (rep_const) */    dist >>= ((7)+1); /* from now on, all distances are divided by 128 */
372: /* MUTANT (rep_const) */    dist >>= ((7)-1); /* from now on, all distances are divided by 128 */
373: /* MUTANT (rep_op) */    for ( ; code <= D_CODES; code++) {
373: /* MUTANT (rep_op) */    for ( ; code > D_CODES; code++) {
373: /* MUTANT (rep_op) */    for ( ; code >= D_CODES; code++) {
373: /* MUTANT (rep_op) */    for ( ; code == D_CODES; code++) {
373: /* MUTANT (rep_op) */    for ( ; code != D_CODES; code++) {
373: /* MUTANT (rep_op) */    for ( ; code < D_CODES; code--) {
374: /* MUTANT (del_stmt) */ /*         base_dist[code] = dist << 7; */ 
374: /* MUTANT (rep_const) */        base_dist[code] = dist << 0;
374: /* MUTANT (rep_const) */        base_dist[code] = dist << 1;
374: /* MUTANT (rep_const) */        base_dist[code] = dist << -1;
374: /* MUTANT (rep_const) */        base_dist[code] = dist << ((7)+1);
374: /* MUTANT (rep_const) */        base_dist[code] = dist << ((7)-1);
375: /* MUTANT (rep_op) */        for (n = 0; n <= (1<<(extra_dbits[code]-7)); n++) {
375: /* MUTANT (rep_op) */        for (n = 0; n > (1<<(extra_dbits[code]-7)); n++) {
375: /* MUTANT (rep_op) */        for (n = 0; n >= (1<<(extra_dbits[code]-7)); n++) {
375: /* MUTANT (rep_op) */        for (n = 0; n == (1<<(extra_dbits[code]-7)); n++) {
375: /* MUTANT (rep_op) */        for (n = 0; n != (1<<(extra_dbits[code]-7)); n++) {
375: /* MUTANT (rep_op) */        for (n = 0; n < (1<<(extra_dbits[code]-7)); n--) {
375: /* MUTANT (rep_const) */        for (n = 1; n < (1<<(extra_dbits[code]-7)); n++) {
375: /* MUTANT (rep_const) */        for (n = -1; n < (1<<(extra_dbits[code]-7)); n++) {
375: /* MUTANT (rep_const) */        for (n = 0; n < (0<<(extra_dbits[code]-7)); n++) {
375: /* MUTANT (rep_const) */        for (n = 0; n < (-1<<(extra_dbits[code]-7)); n++) {
375: /* MUTANT (rep_const) */        for (n = 0; n < (((1)+1)<<(extra_dbits[code]-7)); n++) {
375: /* MUTANT (rep_const) */        for (n = 0; n < (1<<(extra_dbits[code]0)); n++) {
375: /* MUTANT (rep_const) */        for (n = 0; n < (1<<(extra_dbits[code]1)); n++) {
375: /* MUTANT (rep_const) */        for (n = 0; n < (1<<(extra_dbits[code]-1)); n++) {
375: /* MUTANT (rep_const) */        for (n = 0; n < (1<<(extra_dbits[code]((-7)+1))); n++) {
375: /* MUTANT (rep_const) */        for (n = 0; n < (1<<(extra_dbits[code]((-7)-1))); n++) {
376: /* MUTANT (del_stmt) */ /*             dist_code[256 + dist++] = (uch)code; */ 
376: /* MUTANT (rep_op) */            dist_code[256 - dist++] = (uch)code;
376: /* MUTANT (rep_op) */            dist_code[256 * dist++] = (uch)code;
376: /* MUTANT (rep_op) */            dist_code[256 % dist++] = (uch)code;
376: /* MUTANT (rep_op) */            dist_code[256 + dist--] = (uch)code;
376: /* MUTANT (rep_const) */            dist_code[0 + dist++] = (uch)code;
376: /* MUTANT (rep_const) */            dist_code[1 + dist++] = (uch)code;
376: /* MUTANT (rep_const) */            dist_code[-1 + dist++] = (uch)code;
376: /* MUTANT (rep_const) */            dist_code[((256)+1) + dist++] = (uch)code;
376: /* MUTANT (rep_const) */            dist_code[((256)-1) + dist++] = (uch)code;
379: /* MUTANT (rep_op) */    Assert (dist != 256, "ct_init: 256+dist != 512");
379: /* MUTANT (rep_const) */    Assert (dist == 0, "ct_init: 256+dist != 512");
379: /* MUTANT (rep_const) */    Assert (dist == 1, "ct_init: 256+dist != 512");
379: /* MUTANT (rep_const) */    Assert (dist == -1, "ct_init: 256+dist != 512");
379: /* MUTANT (rep_const) */    Assert (dist == ((256)+1), "ct_init: 256+dist != 512");
379: /* MUTANT (rep_const) */    Assert (dist == ((256)-1), "ct_init: 256+dist != 512");
379: /* MUTANT (rep_const) */    Assert (dist == 256, "ct_init: 0+dist != 512");
379: /* MUTANT (rep_const) */    Assert (dist == 256, "ct_init: 1+dist != 512");
379: /* MUTANT (rep_const) */    Assert (dist == 256, "ct_init: -1+dist != 512");
379: /* MUTANT (rep_const) */    Assert (dist == 256, "ct_init: ((256)+1)+dist != 512");
379: /* MUTANT (rep_const) */    Assert (dist == 256, "ct_init: ((256)-1)+dist != 512");
379: /* MUTANT (rep_const) */    Assert (dist == 256, "ct_init: 256+dist != 0");
379: /* MUTANT (rep_const) */    Assert (dist == 256, "ct_init: 256+dist != 1");
379: /* MUTANT (rep_const) */    Assert (dist == 256, "ct_init: 256+dist != -1");
379: /* MUTANT (rep_const) */    Assert (dist == 256, "ct_init: 256+dist != ((512)+1)");
379: /* MUTANT (rep_const) */    Assert (dist == 256, "ct_init: 256+dist != ((512)-1)");
382: /* MUTANT (del_stmt) */ /*     for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0; */ 
382: /* MUTANT (rep_op) */    for (bits = 0; bits < MAX_BITS; bits++) bl_count[bits] = 0;
382: /* MUTANT (rep_op) */    for (bits = 0; bits > MAX_BITS; bits++) bl_count[bits] = 0;
382: /* MUTANT (rep_op) */    for (bits = 0; bits >= MAX_BITS; bits++) bl_count[bits] = 0;
382: /* MUTANT (rep_op) */    for (bits = 0; bits == MAX_BITS; bits++) bl_count[bits] = 0;
382: /* MUTANT (rep_op) */    for (bits = 0; bits != MAX_BITS; bits++) bl_count[bits] = 0;
382: /* MUTANT (rep_op) */    for (bits = 0; bits <= MAX_BITS; bits--) bl_count[bits] = 0;
382: /* MUTANT (rep_const) */    for (bits = 1; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
382: /* MUTANT (rep_const) */    for (bits = -1; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
382: /* MUTANT (rep_const) */    for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 1;
382: /* MUTANT (rep_const) */    for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = -1;
383: /* MUTANT (del_stmt) */ /*     n = 0; */ 
383: /* MUTANT (rep_const) */    n = 1;
383: /* MUTANT (rep_const) */    n = -1;
384: /* MUTANT (del_stmt) */ /*     while (n <= 143) static_ltree[n++].Len = 8, bl_count[8]++; */ 
384: /* MUTANT (rep_op) */    while (n < 143) static_ltree[n++].Len = 8, bl_count[8]++;
384: /* MUTANT (rep_op) */    while (n > 143) static_ltree[n++].Len = 8, bl_count[8]++;
384: /* MUTANT (rep_op) */    while (n >= 143) static_ltree[n++].Len = 8, bl_count[8]++;
384: /* MUTANT (rep_op) */    while (n == 143) static_ltree[n++].Len = 8, bl_count[8]++;
384: /* MUTANT (rep_op) */    while (n != 143) static_ltree[n++].Len = 8, bl_count[8]++;
384: /* MUTANT (rep_op) */    while (n <= 143) static_ltree[n--].Len = 8, bl_count[8]++;
384: /* MUTANT (rep_op) */    while (n <= 143) static_ltree[n++].Len = 8, bl_count[8]--;
384: /* MUTANT (rep_const) */    while (n <= 0) static_ltree[n++].Len = 8, bl_count[8]++;
384: /* MUTANT (rep_const) */    while (n <= 1) static_ltree[n++].Len = 8, bl_count[8]++;
384: /* MUTANT (rep_const) */    while (n <= -1) static_ltree[n++].Len = 8, bl_count[8]++;
384: /* MUTANT (rep_const) */    while (n <= ((143)+1)) static_ltree[n++].Len = 8, bl_count[8]++;
384: /* MUTANT (rep_const) */    while (n <= ((143)-1)) static_ltree[n++].Len = 8, bl_count[8]++;
384: /* MUTANT (rep_const) */    while (n <= 143) static_ltree[n++].Len = 0, bl_count[8]++;
384: /* MUTANT (rep_const) */    while (n <= 143) static_ltree[n++].Len = 1, bl_count[8]++;
384: /* MUTANT (rep_const) */    while (n <= 143) static_ltree[n++].Len = -1, bl_count[8]++;
384: /* MUTANT (rep_const) */    while (n <= 143) static_ltree[n++].Len = ((8)+1), bl_count[8]++;
384: /* MUTANT (rep_const) */    while (n <= 143) static_ltree[n++].Len = ((8)-1), bl_count[8]++;
384: /* MUTANT (rep_const) */    while (n <= 143) static_ltree[n++].Len = 8, bl_count[0]++;
384: /* MUTANT (rep_const) */    while (n <= 143) static_ltree[n++].Len = 8, bl_count[1]++;
384: /* MUTANT (rep_const) */    while (n <= 143) static_ltree[n++].Len = 8, bl_count[-1]++;
384: /* MUTANT (rep_const) */    while (n <= 143) static_ltree[n++].Len = 8, bl_count[((8)+1)]++;
384: /* MUTANT (rep_const) */    while (n <= 143) static_ltree[n++].Len = 8, bl_count[((8)-1)]++;
384: /* MUTANT (negate) */    while(! (n <= 143)) static_ltree[n++].Len = 8, bl_count[8]++;
385: /* MUTANT (del_stmt) */ /*     while (n <= 255) static_ltree[n++].Len = 9, bl_count[9]++; */ 
385: /* MUTANT (rep_op) */    while (n < 255) static_ltree[n++].Len = 9, bl_count[9]++;
385: /* MUTANT (rep_op) */    while (n > 255) static_ltree[n++].Len = 9, bl_count[9]++;
385: /* MUTANT (rep_op) */    while (n >= 255) static_ltree[n++].Len = 9, bl_count[9]++;
385: /* MUTANT (rep_op) */    while (n == 255) static_ltree[n++].Len = 9, bl_count[9]++;
385: /* MUTANT (rep_op) */    while (n != 255) static_ltree[n++].Len = 9, bl_count[9]++;
385: /* MUTANT (rep_op) */    while (n <= 255) static_ltree[n--].Len = 9, bl_count[9]++;
385: /* MUTANT (rep_op) */    while (n <= 255) static_ltree[n++].Len = 9, bl_count[9]--;
385: /* MUTANT (rep_const) */    while (n <= 0) static_ltree[n++].Len = 9, bl_count[9]++;
385: /* MUTANT (rep_const) */    while (n <= 1) static_ltree[n++].Len = 9, bl_count[9]++;
385: /* MUTANT (rep_const) */    while (n <= -1) static_ltree[n++].Len = 9, bl_count[9]++;
385: /* MUTANT (rep_const) */    while (n <= ((255)+1)) static_ltree[n++].Len = 9, bl_count[9]++;
385: /* MUTANT (rep_const) */    while (n <= ((255)-1)) static_ltree[n++].Len = 9, bl_count[9]++;
385: /* MUTANT (rep_const) */    while (n <= 255) static_ltree[n++].Len = 0, bl_count[9]++;
385: /* MUTANT (rep_const) */    while (n <= 255) static_ltree[n++].Len = 1, bl_count[9]++;
385: /* MUTANT (rep_const) */    while (n <= 255) static_ltree[n++].Len = -1, bl_count[9]++;
385: /* MUTANT (rep_const) */    while (n <= 255) static_ltree[n++].Len = ((9)+1), bl_count[9]++;
385: /* MUTANT (rep_const) */    while (n <= 255) static_ltree[n++].Len = ((9)-1), bl_count[9]++;
385: /* MUTANT (rep_const) */    while (n <= 255) static_ltree[n++].Len = 9, bl_count[0]++;
385: /* MUTANT (rep_const) */    while (n <= 255) static_ltree[n++].Len = 9, bl_count[1]++;
385: /* MUTANT (rep_const) */    while (n <= 255) static_ltree[n++].Len = 9, bl_count[-1]++;
385: /* MUTANT (rep_const) */    while (n <= 255) static_ltree[n++].Len = 9, bl_count[((9)+1)]++;
385: /* MUTANT (rep_const) */    while (n <= 255) static_ltree[n++].Len = 9, bl_count[((9)-1)]++;
385: /* MUTANT (negate) */    while(! (n <= 255)) static_ltree[n++].Len = 9, bl_count[9]++;
386: /* MUTANT (del_stmt) */ /*     while (n <= 279) static_ltree[n++].Len = 7, bl_count[7]++; */ 
386: /* MUTANT (rep_op) */    while (n < 279) static_ltree[n++].Len = 7, bl_count[7]++;
386: /* MUTANT (rep_op) */    while (n > 279) static_ltree[n++].Len = 7, bl_count[7]++;
386: /* MUTANT (rep_op) */    while (n >= 279) static_ltree[n++].Len = 7, bl_count[7]++;
386: /* MUTANT (rep_op) */    while (n == 279) static_ltree[n++].Len = 7, bl_count[7]++;
386: /* MUTANT (rep_op) */    while (n != 279) static_ltree[n++].Len = 7, bl_count[7]++;
386: /* MUTANT (rep_op) */    while (n <= 279) static_ltree[n--].Len = 7, bl_count[7]++;
386: /* MUTANT (rep_op) */    while (n <= 279) static_ltree[n++].Len = 7, bl_count[7]--;
386: /* MUTANT (rep_const) */    while (n <= 0) static_ltree[n++].Len = 7, bl_count[7]++;
386: /* MUTANT (rep_const) */    while (n <= 1) static_ltree[n++].Len = 7, bl_count[7]++;
386: /* MUTANT (rep_const) */    while (n <= -1) static_ltree[n++].Len = 7, bl_count[7]++;
386: /* MUTANT (rep_const) */    while (n <= ((279)+1)) static_ltree[n++].Len = 7, bl_count[7]++;
386: /* MUTANT (rep_const) */    while (n <= ((279)-1)) static_ltree[n++].Len = 7, bl_count[7]++;
386: /* MUTANT (rep_const) */    while (n <= 279) static_ltree[n++].Len = 0, bl_count[7]++;
386: /* MUTANT (rep_const) */    while (n <= 279) static_ltree[n++].Len = 1, bl_count[7]++;
386: /* MUTANT (rep_const) */    while (n <= 279) static_ltree[n++].Len = -1, bl_count[7]++;
386: /* MUTANT (rep_const) */    while (n <= 279) static_ltree[n++].Len = ((7)+1), bl_count[7]++;
386: /* MUTANT (rep_const) */    while (n <= 279) static_ltree[n++].Len = ((7)-1), bl_count[7]++;
386: /* MUTANT (rep_const) */    while (n <= 279) static_ltree[n++].Len = 7, bl_count[0]++;
386: /* MUTANT (rep_const) */    while (n <= 279) static_ltree[n++].Len = 7, bl_count[1]++;
386: /* MUTANT (rep_const) */    while (n <= 279) static_ltree[n++].Len = 7, bl_count[-1]++;
386: /* MUTANT (rep_const) */    while (n <= 279) static_ltree[n++].Len = 7, bl_count[((7)+1)]++;
386: /* MUTANT (rep_const) */    while (n <= 279) static_ltree[n++].Len = 7, bl_count[((7)-1)]++;
386: /* MUTANT (negate) */    while(! (n <= 279)) static_ltree[n++].Len = 7, bl_count[7]++;
387: /* MUTANT (del_stmt) */ /*     while (n <= 287) static_ltree[n++].Len = 8, bl_count[8]++; */ 
387: /* MUTANT (rep_op) */    while (n < 287) static_ltree[n++].Len = 8, bl_count[8]++;
387: /* MUTANT (rep_op) */    while (n > 287) static_ltree[n++].Len = 8, bl_count[8]++;
387: /* MUTANT (rep_op) */    while (n >= 287) static_ltree[n++].Len = 8, bl_count[8]++;
387: /* MUTANT (rep_op) */    while (n == 287) static_ltree[n++].Len = 8, bl_count[8]++;
387: /* MUTANT (rep_op) */    while (n != 287) static_ltree[n++].Len = 8, bl_count[8]++;
387: /* MUTANT (rep_op) */    while (n <= 287) static_ltree[n--].Len = 8, bl_count[8]++;
387: /* MUTANT (rep_op) */    while (n <= 287) static_ltree[n++].Len = 8, bl_count[8]--;
387: /* MUTANT (rep_const) */    while (n <= 0) static_ltree[n++].Len = 8, bl_count[8]++;
387: /* MUTANT (rep_const) */    while (n <= 1) static_ltree[n++].Len = 8, bl_count[8]++;
387: /* MUTANT (rep_const) */    while (n <= -1) static_ltree[n++].Len = 8, bl_count[8]++;
387: /* MUTANT (rep_const) */    while (n <= ((287)+1)) static_ltree[n++].Len = 8, bl_count[8]++;
387: /* MUTANT (rep_const) */    while (n <= ((287)-1)) static_ltree[n++].Len = 8, bl_count[8]++;
387: /* MUTANT (rep_const) */    while (n <= 287) static_ltree[n++].Len = 0, bl_count[8]++;
387: /* MUTANT (rep_const) */    while (n <= 287) static_ltree[n++].Len = 1, bl_count[8]++;
387: /* MUTANT (rep_const) */    while (n <= 287) static_ltree[n++].Len = -1, bl_count[8]++;
387: /* MUTANT (rep_const) */    while (n <= 287) static_ltree[n++].Len = ((8)+1), bl_count[8]++;
387: /* MUTANT (rep_const) */    while (n <= 287) static_ltree[n++].Len = ((8)-1), bl_count[8]++;
387: /* MUTANT (rep_const) */    while (n <= 287) static_ltree[n++].Len = 8, bl_count[0]++;
387: /* MUTANT (rep_const) */    while (n <= 287) static_ltree[n++].Len = 8, bl_count[1]++;
387: /* MUTANT (rep_const) */    while (n <= 287) static_ltree[n++].Len = 8, bl_count[-1]++;
387: /* MUTANT (rep_const) */    while (n <= 287) static_ltree[n++].Len = 8, bl_count[((8)+1)]++;
387: /* MUTANT (rep_const) */    while (n <= 287) static_ltree[n++].Len = 8, bl_count[((8)-1)]++;
387: /* MUTANT (negate) */    while(! (n <= 287)) static_ltree[n++].Len = 8, bl_count[8]++;
392: /* MUTANT (del_stmt) */ /*     gen_codes((ct_data near *)static_ltree, L_CODES+1); */ 
392: /* MUTANT (rep_op) */    gen_codes((ct_data near *)static_ltree, L_CODES-1);
392: /* MUTANT (rep_op) */    gen_codes((ct_data near *)static_ltree, L_CODES*1);
392: /* MUTANT (rep_op) */    gen_codes((ct_data near *)static_ltree, L_CODES%1);
392: /* MUTANT (rep_const) */    gen_codes((ct_data near *)static_ltree, L_CODES+0);
392: /* MUTANT (rep_const) */    gen_codes((ct_data near *)static_ltree, L_CODES+-1);
392: /* MUTANT (rep_const) */    gen_codes((ct_data near *)static_ltree, L_CODES+((1)+1));
395: /* MUTANT (rep_op) */    for (n = 0; n <= D_CODES; n++) {
395: /* MUTANT (rep_op) */    for (n = 0; n > D_CODES; n++) {
395: /* MUTANT (rep_op) */    for (n = 0; n >= D_CODES; n++) {
395: /* MUTANT (rep_op) */    for (n = 0; n == D_CODES; n++) {
395: /* MUTANT (rep_op) */    for (n = 0; n != D_CODES; n++) {
395: /* MUTANT (rep_op) */    for (n = 0; n < D_CODES; n--) {
395: /* MUTANT (rep_const) */    for (n = 1; n < D_CODES; n++) {
395: /* MUTANT (rep_const) */    for (n = -1; n < D_CODES; n++) {
396: /* MUTANT (del_stmt) */ /*         static_dtree[n].Len = 5; */ 
396: /* MUTANT (rep_const) */        static_dtree[n].Len = 0;
396: /* MUTANT (rep_const) */        static_dtree[n].Len = 1;
396: /* MUTANT (rep_const) */        static_dtree[n].Len = -1;
396: /* MUTANT (rep_const) */        static_dtree[n].Len = ((5)+1);
396: /* MUTANT (rep_const) */        static_dtree[n].Len = ((5)-1);
397: /* MUTANT (del_stmt) */ /*         static_dtree[n].Code = bi_reverse(n, 5); */ 
397: /* MUTANT (rep_const) */        static_dtree[n].Code = bi_reverse(n, 0);
397: /* MUTANT (rep_const) */        static_dtree[n].Code = bi_reverse(n, 1);
397: /* MUTANT (rep_const) */        static_dtree[n].Code = bi_reverse(n, -1);
397: /* MUTANT (rep_const) */        static_dtree[n].Code = bi_reverse(n, ((5)+1));
397: /* MUTANT (rep_const) */        static_dtree[n].Code = bi_reverse(n, ((5)-1));
409: /* MUTANT (del_stmt) */ /*     int n; */  /* iterates over tree elements */
412: /* MUTANT (del_stmt) */ /*     for (n = 0; n < L_CODES;  n++) dyn_ltree[n].Freq = 0; */ 
412: /* MUTANT (rep_op) */    for (n = 0; n <= L_CODES;  n++) dyn_ltree[n].Freq = 0;
412: /* MUTANT (rep_op) */    for (n = 0; n > L_CODES;  n++) dyn_ltree[n].Freq = 0;
412: /* MUTANT (rep_op) */    for (n = 0; n >= L_CODES;  n++) dyn_ltree[n].Freq = 0;
412: /* MUTANT (rep_op) */    for (n = 0; n == L_CODES;  n++) dyn_ltree[n].Freq = 0;
412: /* MUTANT (rep_op) */    for (n = 0; n != L_CODES;  n++) dyn_ltree[n].Freq = 0;
412: /* MUTANT (rep_op) */    for (n = 0; n < L_CODES;  n--) dyn_ltree[n].Freq = 0;
412: /* MUTANT (rep_const) */    for (n = 1; n < L_CODES;  n++) dyn_ltree[n].Freq = 0;
412: /* MUTANT (rep_const) */    for (n = -1; n < L_CODES;  n++) dyn_ltree[n].Freq = 0;
412: /* MUTANT (rep_const) */    for (n = 0; n < L_CODES;  n++) dyn_ltree[n].Freq = 1;
412: /* MUTANT (rep_const) */    for (n = 0; n < L_CODES;  n++) dyn_ltree[n].Freq = -1;
413: /* MUTANT (del_stmt) */ /*     for (n = 0; n < D_CODES;  n++) dyn_dtree[n].Freq = 0; */ 
413: /* MUTANT (rep_op) */    for (n = 0; n <= D_CODES;  n++) dyn_dtree[n].Freq = 0;
413: /* MUTANT (rep_op) */    for (n = 0; n > D_CODES;  n++) dyn_dtree[n].Freq = 0;
413: /* MUTANT (rep_op) */    for (n = 0; n >= D_CODES;  n++) dyn_dtree[n].Freq = 0;
413: /* MUTANT (rep_op) */    for (n = 0; n == D_CODES;  n++) dyn_dtree[n].Freq = 0;
413: /* MUTANT (rep_op) */    for (n = 0; n != D_CODES;  n++) dyn_dtree[n].Freq = 0;
413: /* MUTANT (rep_op) */    for (n = 0; n < D_CODES;  n--) dyn_dtree[n].Freq = 0;
413: /* MUTANT (rep_const) */    for (n = 1; n < D_CODES;  n++) dyn_dtree[n].Freq = 0;
413: /* MUTANT (rep_const) */    for (n = -1; n < D_CODES;  n++) dyn_dtree[n].Freq = 0;
413: /* MUTANT (rep_const) */    for (n = 0; n < D_CODES;  n++) dyn_dtree[n].Freq = 1;
413: /* MUTANT (rep_const) */    for (n = 0; n < D_CODES;  n++) dyn_dtree[n].Freq = -1;
414: /* MUTANT (del_stmt) */ /*     for (n = 0; n < BL_CODES; n++) bl_tree[n].Freq = 0; */ 
414: /* MUTANT (rep_op) */    for (n = 0; n <= BL_CODES; n++) bl_tree[n].Freq = 0;
414: /* MUTANT (rep_op) */    for (n = 0; n > BL_CODES; n++) bl_tree[n].Freq = 0;
414: /* MUTANT (rep_op) */    for (n = 0; n >= BL_CODES; n++) bl_tree[n].Freq = 0;
414: /* MUTANT (rep_op) */    for (n = 0; n == BL_CODES; n++) bl_tree[n].Freq = 0;
414: /* MUTANT (rep_op) */    for (n = 0; n != BL_CODES; n++) bl_tree[n].Freq = 0;
414: /* MUTANT (rep_op) */    for (n = 0; n < BL_CODES; n--) bl_tree[n].Freq = 0;
414: /* MUTANT (rep_const) */    for (n = 1; n < BL_CODES; n++) bl_tree[n].Freq = 0;
414: /* MUTANT (rep_const) */    for (n = -1; n < BL_CODES; n++) bl_tree[n].Freq = 0;
414: /* MUTANT (rep_const) */    for (n = 0; n < BL_CODES; n++) bl_tree[n].Freq = 1;
414: /* MUTANT (rep_const) */    for (n = 0; n < BL_CODES; n++) bl_tree[n].Freq = -1;
416: /* MUTANT (del_stmt) */ /*     dyn_ltree[END_BLOCK].Freq = 1; */ 
416: /* MUTANT (rep_const) */    dyn_ltree[END_BLOCK].Freq = 0;
416: /* MUTANT (rep_const) */    dyn_ltree[END_BLOCK].Freq = -1;
416: /* MUTANT (rep_const) */    dyn_ltree[END_BLOCK].Freq = ((1)+1);
417: /* MUTANT (del_stmt) */ /*     opt_len = static_len = 0L; */ 
417: /* MUTANT (rep_const) */    opt_len = static_len = 1L;
417: /* MUTANT (rep_const) */    opt_len = static_len = -1L;
418: /* MUTANT (del_stmt) */ /*     last_lit = last_dist = last_flags = 0; */ 
418: /* MUTANT (rep_const) */    last_lit = last_dist = last_flags = 1;
418: /* MUTANT (rep_const) */    last_lit = last_dist = last_flags = -1;
419: /* MUTANT (del_stmt) */ /*     flags = 0; */  flag_bit = 1;
419: /* MUTANT (del_stmt) */ /*     flags = 0; */  /*  flag_bit = 1; */ 
419: /* MUTANT (del_stmt) */    flags = 0; /*  flag_bit = 1; */ 
419: /* MUTANT (rep_const) */    flags = 1; flag_bit = 1;
419: /* MUTANT (rep_const) */    flags = -1; flag_bit = 1;
419: /* MUTANT (rep_const) */    flags = 0; flag_bit = 0;
419: /* MUTANT (rep_const) */    flags = 0; flag_bit = -1;
419: /* MUTANT (rep_const) */    flags = 0; flag_bit = ((1)+1);
422: #define SMALLEST 0 /* MUTANT (rep_const) */
422: #define SMALLEST -1 /* MUTANT (rep_const) */
422: #define SMALLEST ((1)+1) /* MUTANT (rep_const) */
433: /* MUTANT (rep_op) */    heap[SMALLEST] = heap[heap_len++]; \
442: /* MUTANT (rep_op) */   (tree[n].Freq <= tree[m].Freq || \
442: /* MUTANT (rep_op) */   (tree[n].Freq > tree[m].Freq || \
442: /* MUTANT (rep_op) */   (tree[n].Freq >= tree[m].Freq || \
442: /* MUTANT (rep_op) */   (tree[n].Freq == tree[m].Freq || \
442: /* MUTANT (rep_op) */   (tree[n].Freq != tree[m].Freq || \
442: /* MUTANT (rep_op) */   (tree[n].Freq < tree[m].Freq && \
443: /* MUTANT (rep_op) */   (tree[n].Freq != tree[m].Freq && depth[n] <= depth[m]))
443: /* MUTANT (rep_op) */   (tree[n].Freq == tree[m].Freq || depth[n] <= depth[m]))
443: /* MUTANT (rep_op) */   (tree[n].Freq == tree[m].Freq && depth[n] < depth[m]))
443: /* MUTANT (rep_op) */   (tree[n].Freq == tree[m].Freq && depth[n] > depth[m]))
443: /* MUTANT (rep_op) */   (tree[n].Freq == tree[m].Freq && depth[n] >= depth[m]))
443: /* MUTANT (rep_op) */   (tree[n].Freq == tree[m].Freq && depth[n] == depth[m]))
443: /* MUTANT (rep_op) */   (tree[n].Freq == tree[m].Freq && depth[n] != depth[m]))
453: /* MUTANT (del_stmt) */ /*     int k; */                /* node to move down */
455: /* MUTANT (del_stmt) */ /*     int v = heap[k]; */ 
456: /* MUTANT (del_stmt) */ /*     int j = k << 1; */   /* left son of k */
456: /* MUTANT (rep_const) */    int j = k << 0;  /* left son of k */
456: /* MUTANT (rep_const) */    int j = k << -1;  /* left son of k */
456: /* MUTANT (rep_const) */    int j = k << ((1)+1);  /* left son of k */
457: /* MUTANT (rep_op) */    while (j < heap_len) {
457: /* MUTANT (rep_op) */    while (j > heap_len) {
457: /* MUTANT (rep_op) */    while (j >= heap_len) {
457: /* MUTANT (rep_op) */    while (j == heap_len) {
457: /* MUTANT (rep_op) */    while (j != heap_len) {
457: /* MUTANT (negate) */    while(! (j <= heap_len)) {
459: /* MUTANT (del_stmt) */ /*         if (j < heap_len && smaller(tree, heap[j+1], heap[j])) j++; */ 
459: /* MUTANT (rep_op) */        if (j <= heap_len && smaller(tree, heap[j+1], heap[j])) j++;
459: /* MUTANT (rep_op) */        if (j > heap_len && smaller(tree, heap[j+1], heap[j])) j++;
459: /* MUTANT (rep_op) */        if (j >= heap_len && smaller(tree, heap[j+1], heap[j])) j++;
459: /* MUTANT (rep_op) */        if (j == heap_len && smaller(tree, heap[j+1], heap[j])) j++;
459: /* MUTANT (rep_op) */        if (j != heap_len && smaller(tree, heap[j+1], heap[j])) j++;
459: /* MUTANT (rep_op) */        if (j < heap_len || smaller(tree, heap[j+1], heap[j])) j++;
459: /* MUTANT (rep_op) */        if (j < heap_len && smaller(tree, heap[j-1], heap[j])) j++;
459: /* MUTANT (rep_op) */        if (j < heap_len && smaller(tree, heap[j*1], heap[j])) j++;
459: /* MUTANT (rep_op) */        if (j < heap_len && smaller(tree, heap[j%1], heap[j])) j++;
459: /* MUTANT (rep_op) */        if (j < heap_len && smaller(tree, heap[j+1], heap[j])) j--;
459: /* MUTANT (rep_const) */        if (j < heap_len && smaller(tree, heap[j+0], heap[j])) j++;
459: /* MUTANT (rep_const) */        if (j < heap_len && smaller(tree, heap[j+-1], heap[j])) j++;
459: /* MUTANT (rep_const) */        if (j < heap_len && smaller(tree, heap[j+((1)+1)], heap[j])) j++;
459: /* MUTANT (negate) */        if(! (j < heap_len && smaller(tree, heap[j+1], heap[j]))) j++;
462: /* MUTANT (del_stmt) */ /*         if (smaller(tree, v, heap[j])) break; */ 
462: /* MUTANT (negate) */        if(! (smaller(tree, v, heap[j]))) break;
465: /* MUTANT (del_stmt) */ /*         heap[k] = heap[j]; */   k = j;
465: /* MUTANT (del_stmt) */ /*         heap[k] = heap[j]; */  /*   k = j; */ 
465: /* MUTANT (del_stmt) */        heap[k] = heap[j]; /*   k = j; */ 
468: /* MUTANT (del_stmt) */ /*         j <<= 1; */ 
468: /* MUTANT (rep_const) */        j <<= 0;
468: /* MUTANT (rep_const) */        j <<= -1;
468: /* MUTANT (rep_const) */        j <<= ((1)+1);
486: /* MUTANT (del_stmt) */ /*     ct_data near *tree  = desc->dyn_tree; */ 
487: /* MUTANT (del_stmt) */ /*     int near *extra     = desc->extra_bits; */ 
488: /* MUTANT (del_stmt) */ /*     int base            = desc->extra_base; */ 
489: /* MUTANT (del_stmt) */ /*     int max_code        = desc->max_code; */ 
490: /* MUTANT (del_stmt) */ /*     int max_length      = desc->max_length; */ 
491: /* MUTANT (del_stmt) */ /*     ct_data near *stree = desc->static_tree; */ 
492: /* MUTANT (del_stmt) */ /*     int h; */               /* heap index */
493: /* MUTANT (del_stmt) */ /*     int n, m; */            /* iterate over the tree elements */
494: /* MUTANT (del_stmt) */ /*     int bits; */            /* bit length */
495: /* MUTANT (del_stmt) */ /*     int xbits; */           /* extra bits */
496: /* MUTANT (del_stmt) */ /*     ush f; */               /* frequency */
497: /* MUTANT (del_stmt) */ /*     int overflow = 0; */    /* number of elements with bit length too large */
497: /* MUTANT (rep_const) */    int overflow = 1;   /* number of elements with bit length too large */
497: /* MUTANT (rep_const) */    int overflow = -1;   /* number of elements with bit length too large */
499: /* MUTANT (del_stmt) */ /*     for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0; */ 
499: /* MUTANT (rep_op) */    for (bits = 0; bits < MAX_BITS; bits++) bl_count[bits] = 0;
499: /* MUTANT (rep_op) */    for (bits = 0; bits > MAX_BITS; bits++) bl_count[bits] = 0;
499: /* MUTANT (rep_op) */    for (bits = 0; bits >= MAX_BITS; bits++) bl_count[bits] = 0;
499: /* MUTANT (rep_op) */    for (bits = 0; bits == MAX_BITS; bits++) bl_count[bits] = 0;
499: /* MUTANT (rep_op) */    for (bits = 0; bits != MAX_BITS; bits++) bl_count[bits] = 0;
499: /* MUTANT (rep_op) */    for (bits = 0; bits <= MAX_BITS; bits--) bl_count[bits] = 0;
499: /* MUTANT (rep_const) */    for (bits = 1; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
499: /* MUTANT (rep_const) */    for (bits = -1; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
499: /* MUTANT (rep_const) */    for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 1;
499: /* MUTANT (rep_const) */    for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = -1;
504: /* MUTANT (del_stmt) */ /*     tree[heap[heap_max]].Len = 0; */  /* root of the heap */
504: /* MUTANT (rep_const) */    tree[heap[heap_max]].Len = 1; /* root of the heap */
504: /* MUTANT (rep_const) */    tree[heap[heap_max]].Len = -1; /* root of the heap */
506: /* MUTANT (rep_op) */    for (h = heap_max-1; h < HEAP_SIZE; h++) {
506: /* MUTANT (rep_op) */    for (h = heap_max*1; h < HEAP_SIZE; h++) {
506: /* MUTANT (rep_op) */    for (h = heap_max%1; h < HEAP_SIZE; h++) {
506: /* MUTANT (rep_op) */    for (h = heap_max+1; h <= HEAP_SIZE; h++) {
506: /* MUTANT (rep_op) */    for (h = heap_max+1; h > HEAP_SIZE; h++) {
506: /* MUTANT (rep_op) */    for (h = heap_max+1; h >= HEAP_SIZE; h++) {
506: /* MUTANT (rep_op) */    for (h = heap_max+1; h == HEAP_SIZE; h++) {
506: /* MUTANT (rep_op) */    for (h = heap_max+1; h != HEAP_SIZE; h++) {
506: /* MUTANT (rep_op) */    for (h = heap_max+1; h < HEAP_SIZE; h--) {
506: /* MUTANT (rep_const) */    for (h = heap_max+0; h < HEAP_SIZE; h++) {
506: /* MUTANT (rep_const) */    for (h = heap_max+-1; h < HEAP_SIZE; h++) {
506: /* MUTANT (rep_const) */    for (h = heap_max+((1)+1); h < HEAP_SIZE; h++) {
507: /* MUTANT (del_stmt) */ /*         n = heap[h]; */ 
508: /* MUTANT (del_stmt) */ /*         bits = tree[tree[n].Dad].Len + 1; */ 
508: /* MUTANT (rep_op) */        bits = tree[tree[n].Dad].Len - 1;
508: /* MUTANT (rep_op) */        bits = tree[tree[n].Dad].Len * 1;
508: /* MUTANT (rep_op) */        bits = tree[tree[n].Dad].Len % 1;
508: /* MUTANT (rep_const) */        bits = tree[tree[n].Dad].Len + 0;
508: /* MUTANT (rep_const) */        bits = tree[tree[n].Dad].Len + -1;
508: /* MUTANT (rep_const) */        bits = tree[tree[n].Dad].Len + ((1)+1);
509: /* MUTANT (del_stmt) */ /*         if (bits > max_length) bits = max_length, overflow++; */ 
509: /* MUTANT (rep_op) */        if (bits <= max_length) bits = max_length, overflow++;
509: /* MUTANT (rep_op) */        if (bits < max_length) bits = max_length, overflow++;
509: /* MUTANT (rep_op) */        if (bits >= max_length) bits = max_length, overflow++;
509: /* MUTANT (rep_op) */        if (bits == max_length) bits = max_length, overflow++;
509: /* MUTANT (rep_op) */        if (bits != max_length) bits = max_length, overflow++;
509: /* MUTANT (rep_op) */        if (bits > max_length) bits = max_length, overflow--;
509: /* MUTANT (negate) */        if(! (bits > max_length)) bits = max_length, overflow++;
510: /* MUTANT (del_stmt) */ /*         tree[n].Len = (ush)bits; */ 
513: /* MUTANT (del_stmt) */ /*         if (n > max_code) continue; */  /* not a leaf node */
513: /* MUTANT (rep_op) */        if (n <= max_code) continue; /* not a leaf node */
513: /* MUTANT (rep_op) */        if (n < max_code) continue; /* not a leaf node */
513: /* MUTANT (rep_op) */        if (n >= max_code) continue; /* not a leaf node */
513: /* MUTANT (rep_op) */        if (n == max_code) continue; /* not a leaf node */
513: /* MUTANT (rep_op) */        if (n != max_code) continue; /* not a leaf node */
513: /* MUTANT (negate) */        if(! (n > max_code)) continue; /* not a leaf node */
515: /* MUTANT (del_stmt) */ /*         bl_count[bits]++; */ 
515: /* MUTANT (rep_op) */        bl_count[bits]--;
516: /* MUTANT (del_stmt) */ /*         xbits = 0; */ 
516: /* MUTANT (rep_const) */        xbits = 1;
516: /* MUTANT (rep_const) */        xbits = -1;
517: /* MUTANT (del_stmt) */ /*         if (n >= base) xbits = extra[n-base]; */ 
517: /* MUTANT (rep_op) */        if (n <= base) xbits = extra[n-base];
517: /* MUTANT (rep_op) */        if (n < base) xbits = extra[n-base];
517: /* MUTANT (rep_op) */        if (n > base) xbits = extra[n-base];
517: /* MUTANT (rep_op) */        if (n == base) xbits = extra[n-base];
517: /* MUTANT (rep_op) */        if (n != base) xbits = extra[n-base];
517: /* MUTANT (negate) */        if(! (n >= base)) xbits = extra[n-base];
518: /* MUTANT (del_stmt) */ /*         f = tree[n].Freq; */ 
519: /* MUTANT (del_stmt) */ /*         opt_len += (ulg)f * (bits + xbits); */ 
519: /* MUTANT (rep_op) */        opt_len -= (ulg)f * (bits + xbits);
519: /* MUTANT (rep_op) */        opt_len *= (ulg)f * (bits + xbits);
519: /* MUTANT (rep_op) */        opt_len %= (ulg)f * (bits + xbits);
519: /* MUTANT (rep_op) */        opt_len += (ulg)f * (bits - xbits);
519: /* MUTANT (rep_op) */        opt_len += (ulg)f * (bits * xbits);
519: /* MUTANT (rep_op) */        opt_len += (ulg)f * (bits % xbits);
520: /* MUTANT (del_stmt) */ /*         if (stree) static_len += (ulg)f * (stree[n].Len + xbits); */ 
520: /* MUTANT (rep_op) */        if (stree) static_len -= (ulg)f * (stree[n].Len + xbits);
520: /* MUTANT (rep_op) */        if (stree) static_len *= (ulg)f * (stree[n].Len + xbits);
520: /* MUTANT (rep_op) */        if (stree) static_len %= (ulg)f * (stree[n].Len + xbits);
520: /* MUTANT (rep_op) */        if (stree) static_len += (ulg)f * (stree[n].Len - xbits);
520: /* MUTANT (rep_op) */        if (stree) static_len += (ulg)f * (stree[n].Len * xbits);
520: /* MUTANT (rep_op) */        if (stree) static_len += (ulg)f * (stree[n].Len % xbits);
520: /* MUTANT (negate) */        if(! (stree)) static_len += (ulg)f * (stree[n].Len + xbits);
522: /* MUTANT (rep_op) */    if (overflow != 0) return;
522: /* MUTANT (rep_const) */    if (overflow == 1) return;
522: /* MUTANT (rep_const) */    if (overflow == -1) return;
522: /* MUTANT (negate) */    if(! (overflow == 0)) return;
524: /* MUTANT (del_stmt) */ /*     Trace((stderr,"\nbit length overflow\n")); */ 
529: /* MUTANT (del_stmt) */ /*         bits = max_length-1; */ 
529: /* MUTANT (rep_const) */        bits = max_length-0;
529: /* MUTANT (rep_const) */        bits = max_length--1;
529: /* MUTANT (rep_const) */        bits = max_length-((1)+1);
530: /* MUTANT (del_stmt) */ /*         while (bl_count[bits] == 0) bits--; */ 
530: /* MUTANT (rep_op) */        while (bl_count[bits] != 0) bits--;
530: /* MUTANT (rep_op) */        while (bl_count[bits] == 0) bits++;
530: /* MUTANT (rep_const) */        while (bl_count[bits] == 1) bits--;
530: /* MUTANT (rep_const) */        while (bl_count[bits] == -1) bits--;
530: /* MUTANT (negate) */        while(! (bl_count[bits] == 0)) bits--;
531: /* MUTANT (del_stmt) */ /*         bl_count[bits]--; */       /* move one leaf down the tree */
531: /* MUTANT (rep_op) */        bl_count[bits]++;      /* move one leaf down the tree */
532: /* MUTANT (del_stmt) */ /*         bl_count[bits+1] += 2; */  /* move one overflow item as its brother */
532: /* MUTANT (rep_op) */        bl_count[bits-1] += 2; /* move one overflow item as its brother */
532: /* MUTANT (rep_op) */        bl_count[bits*1] += 2; /* move one overflow item as its brother */
532: /* MUTANT (rep_op) */        bl_count[bits%1] += 2; /* move one overflow item as its brother */
532: /* MUTANT (rep_op) */        bl_count[bits+1] -= 2; /* move one overflow item as its brother */
532: /* MUTANT (rep_op) */        bl_count[bits+1] *= 2; /* move one overflow item as its brother */
532: /* MUTANT (rep_op) */        bl_count[bits+1] %= 2; /* move one overflow item as its brother */
532: /* MUTANT (rep_const) */        bl_count[bits+0] += 2; /* move one overflow item as its brother */
532: /* MUTANT (rep_const) */        bl_count[bits+-1] += 2; /* move one overflow item as its brother */
532: /* MUTANT (rep_const) */        bl_count[bits+((1)+1)] += 2; /* move one overflow item as its brother */
532: /* MUTANT (rep_const) */        bl_count[bits+1] += 0; /* move one overflow item as its brother */
532: /* MUTANT (rep_const) */        bl_count[bits+1] += 1; /* move one overflow item as its brother */
532: /* MUTANT (rep_const) */        bl_count[bits+1] += -1; /* move one overflow item as its brother */
532: /* MUTANT (rep_const) */        bl_count[bits+1] += ((2)+1); /* move one overflow item as its brother */
532: /* MUTANT (rep_const) */        bl_count[bits+1] += ((2)-1); /* move one overflow item as its brother */
533: /* MUTANT (del_stmt) */ /*         bl_count[max_length]--; */ 
533: /* MUTANT (rep_op) */        bl_count[max_length]++;
537: /* MUTANT (del_stmt) */ /*         overflow -= 2; */ 
537: /* MUTANT (rep_op) */        overflow += 2;
537: /* MUTANT (rep_op) */        overflow *= 2;
537: /* MUTANT (rep_op) */        overflow %= 2;
537: /* MUTANT (rep_const) */        overflow -= 0;
537: /* MUTANT (rep_const) */        overflow -= 1;
537: /* MUTANT (rep_const) */        overflow -= -1;
537: /* MUTANT (rep_const) */        overflow -= ((2)+1);
537: /* MUTANT (rep_const) */        overflow -= ((2)-1);
538: /* MUTANT (del_stmt) */ /*     } while (overflow > 0); */ 
538: /* MUTANT (rep_op) */    } while (overflow <= 0);
538: /* MUTANT (rep_op) */    } while (overflow < 0);
538: /* MUTANT (rep_op) */    } while (overflow >= 0);
538: /* MUTANT (rep_op) */    } while (overflow == 0);
538: /* MUTANT (rep_op) */    } while (overflow != 0);
538: /* MUTANT (rep_const) */    } while (overflow > 1);
538: /* MUTANT (rep_const) */    } while (overflow > -1);
538: /* MUTANT (negate) */    } while(! (overflow > 0));
545: /* MUTANT (rep_op) */    for (bits = max_length; bits == 0; bits--) {
545: /* MUTANT (rep_op) */    for (bits = max_length; bits != 0; bits++) {
545: /* MUTANT (rep_const) */    for (bits = max_length; bits != 1; bits--) {
545: /* MUTANT (rep_const) */    for (bits = max_length; bits != -1; bits--) {
546: /* MUTANT (del_stmt) */ /*         n = bl_count[bits]; */ 
547: /* MUTANT (rep_op) */        while (n == 0) {
547: /* MUTANT (rep_const) */        while (n != 1) {
547: /* MUTANT (rep_const) */        while (n != -1) {
547: /* MUTANT (negate) */        while(! (n != 0)) {
548: /* MUTANT (del_stmt) */ /*             m = heap[--h]; */ 
548: /* MUTANT (rep_op) */            m = heap[++h];
549: /* MUTANT (del_stmt) */ /*             if (m > max_code) continue; */ 
549: /* MUTANT (rep_op) */            if (m <= max_code) continue;
549: /* MUTANT (rep_op) */            if (m < max_code) continue;
549: /* MUTANT (rep_op) */            if (m >= max_code) continue;
549: /* MUTANT (rep_op) */            if (m == max_code) continue;
549: /* MUTANT (rep_op) */            if (m != max_code) continue;
549: /* MUTANT (negate) */            if(! (m > max_code)) continue;
550: /* MUTANT (rep_op) */            if (tree[m].Len == (unsigned) bits) {
550: /* MUTANT (negate) */            if(! (tree[m].Len != (unsigned) bits)) {
551: /* MUTANT (del_stmt) */ /*                 Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits)); */ 
552: /* MUTANT (del_stmt) */ /*                 opt_len += ((long)bits-(long)tree[m].Len)*(long)tree[m].Freq; */ 
552: /* MUTANT (rep_op) */                opt_len -= ((long)bits-(long)tree[m].Len)*(long)tree[m].Freq;
552: /* MUTANT (rep_op) */                opt_len *= ((long)bits-(long)tree[m].Len)*(long)tree[m].Freq;
552: /* MUTANT (rep_op) */                opt_len %= ((long)bits-(long)tree[m].Len)*(long)tree[m].Freq;
553: /* MUTANT (del_stmt) */ /*                 tree[m].Len = (ush)bits; */ 
555: /* MUTANT (rep_op) */            n++;
570: /* MUTANT (del_stmt) */ /*     int max_code; */               /* largest code with non zero frequency */
572: /* MUTANT (del_stmt) */ /*     ush next_code[MAX_BITS+1]; */  /* next code value for each bit length */
572: /* MUTANT (rep_op) */    ush next_code[MAX_BITS-1]; /* next code value for each bit length */
572: /* MUTANT (rep_op) */    ush next_code[MAX_BITS*1]; /* next code value for each bit length */
572: /* MUTANT (rep_op) */    ush next_code[MAX_BITS%1]; /* next code value for each bit length */
572: /* MUTANT (rep_const) */    ush next_code[MAX_BITS+0]; /* next code value for each bit length */
572: /* MUTANT (rep_const) */    ush next_code[MAX_BITS+-1]; /* next code value for each bit length */
572: /* MUTANT (rep_const) */    ush next_code[MAX_BITS+((1)+1)]; /* next code value for each bit length */
573: /* MUTANT (del_stmt) */ /*     ush code = 0; */               /* running code value */
573: /* MUTANT (rep_const) */    ush code = 1;              /* running code value */
573: /* MUTANT (rep_const) */    ush code = -1;              /* running code value */
574: /* MUTANT (del_stmt) */ /*     int bits; */                   /* bit index */
575: /* MUTANT (del_stmt) */ /*     int n; */                      /* code index */
580: /* MUTANT (rep_op) */    for (bits = 1; bits < MAX_BITS; bits++) {
580: /* MUTANT (rep_op) */    for (bits = 1; bits > MAX_BITS; bits++) {
580: /* MUTANT (rep_op) */    for (bits = 1; bits >= MAX_BITS; bits++) {
580: /* MUTANT (rep_op) */    for (bits = 1; bits == MAX_BITS; bits++) {
580: /* MUTANT (rep_op) */    for (bits = 1; bits != MAX_BITS; bits++) {
580: /* MUTANT (rep_op) */    for (bits = 1; bits <= MAX_BITS; bits--) {
580: /* MUTANT (rep_const) */    for (bits = 0; bits <= MAX_BITS; bits++) {
580: /* MUTANT (rep_const) */    for (bits = -1; bits <= MAX_BITS; bits++) {
580: /* MUTANT (rep_const) */    for (bits = ((1)+1); bits <= MAX_BITS; bits++) {
581: /* MUTANT (del_stmt) */ /*         next_code[bits] = code = (code + bl_count[bits-1]) << 1; */ 
581: /* MUTANT (rep_op) */        next_code[bits] = code = (code - bl_count[bits-1]) << 1;
581: /* MUTANT (rep_op) */        next_code[bits] = code = (code * bl_count[bits-1]) << 1;
581: /* MUTANT (rep_op) */        next_code[bits] = code = (code % bl_count[bits-1]) << 1;
581: /* MUTANT (rep_const) */        next_code[bits] = code = (code + bl_count[bits-0]) << 1;
581: /* MUTANT (rep_const) */        next_code[bits] = code = (code + bl_count[bits--1]) << 1;
581: /* MUTANT (rep_const) */        next_code[bits] = code = (code + bl_count[bits-((1)+1)]) << 1;
581: /* MUTANT (rep_const) */        next_code[bits] = code = (code + bl_count[bits-1]) << 0;
581: /* MUTANT (rep_const) */        next_code[bits] = code = (code + bl_count[bits-1]) << -1;
581: /* MUTANT (rep_const) */        next_code[bits] = code = (code + bl_count[bits-1]) << ((1)+1);
586: /* MUTANT (rep_op) */    Assert (code - bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
586: /* MUTANT (rep_op) */    Assert (code * bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
586: /* MUTANT (rep_op) */    Assert (code % bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
586: /* MUTANT (rep_op) */    Assert (code + bl_count[MAX_BITS]-1 != (1<<MAX_BITS)-1,
586: /* MUTANT (rep_const) */    Assert (code + bl_count[MAX_BITS]0 == (1<<MAX_BITS)-1,
586: /* MUTANT (rep_const) */    Assert (code + bl_count[MAX_BITS]1 == (1<<MAX_BITS)-1,
586: /* MUTANT (rep_const) */    Assert (code + bl_count[MAX_BITS]((-1)+1) == (1<<MAX_BITS)-1,
586: /* MUTANT (rep_const) */    Assert (code + bl_count[MAX_BITS]((-1)-1) == (1<<MAX_BITS)-1,
586: /* MUTANT (rep_const) */    Assert (code + bl_count[MAX_BITS]-1 == (0<<MAX_BITS)-1,
586: /* MUTANT (rep_const) */    Assert (code + bl_count[MAX_BITS]-1 == (-1<<MAX_BITS)-1,
586: /* MUTANT (rep_const) */    Assert (code + bl_count[MAX_BITS]-1 == (((1)+1)<<MAX_BITS)-1,
586: /* MUTANT (rep_const) */    Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)0,
586: /* MUTANT (rep_const) */    Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)1,
586: /* MUTANT (rep_const) */    Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)((-1)+1),
586: /* MUTANT (rep_const) */    Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)((-1)-1),
588: /* MUTANT (del_stmt) */ /*     Tracev((stderr,"\ngen_codes: max_code %d ", max_code)); */ 
590: /* MUTANT (rep_op) */    for (n = 0;  n < max_code; n++) {
590: /* MUTANT (rep_op) */    for (n = 0;  n > max_code; n++) {
590: /* MUTANT (rep_op) */    for (n = 0;  n >= max_code; n++) {
590: /* MUTANT (rep_op) */    for (n = 0;  n == max_code; n++) {
590: /* MUTANT (rep_op) */    for (n = 0;  n != max_code; n++) {
590: /* MUTANT (rep_op) */    for (n = 0;  n <= max_code; n--) {
590: /* MUTANT (rep_const) */    for (n = 1;  n <= max_code; n++) {
590: /* MUTANT (rep_const) */    for (n = -1;  n <= max_code; n++) {
591: /* MUTANT (del_stmt) */ /*         int len = tree[n].Len; */ 
592: /* MUTANT (del_stmt) */ /*         if (len == 0) continue; */ 
592: /* MUTANT (rep_op) */        if (len != 0) continue;
592: /* MUTANT (rep_const) */        if (len == 1) continue;
592: /* MUTANT (rep_const) */        if (len == -1) continue;
592: /* MUTANT (negate) */        if(! (len == 0)) continue;
594: /* MUTANT (del_stmt) */ /*         tree[n].Code = bi_reverse(next_code[len]++, len); */ 
594: /* MUTANT (rep_op) */        tree[n].Code = bi_reverse(next_code[len]--, len);
596: /* MUTANT (rep_op) */        Tracec(tree == static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
596: /* MUTANT (rep_const) */        Tracec(tree != static_ltree, (stderr,"\nn %0d %c l %2d c %4x (%x) ",
596: /* MUTANT (rep_const) */        Tracec(tree != static_ltree, (stderr,"\nn %1d %c l %2d c %4x (%x) ",
596: /* MUTANT (rep_const) */        Tracec(tree != static_ltree, (stderr,"\nn %-1d %c l %2d c %4x (%x) ",
596: /* MUTANT (rep_const) */        Tracec(tree != static_ltree, (stderr,"\nn %((3)+1)d %c l %2d c %4x (%x) ",
596: /* MUTANT (rep_const) */        Tracec(tree != static_ltree, (stderr,"\nn %((3)-1)d %c l %2d c %4x (%x) ",
596: /* MUTANT (rep_const) */        Tracec(tree != static_ltree, (stderr,"\nn %3d %c l %0d c %4x (%x) ",
596: /* MUTANT (rep_const) */        Tracec(tree != static_ltree, (stderr,"\nn %3d %c l %1d c %4x (%x) ",
596: /* MUTANT (rep_const) */        Tracec(tree != static_ltree, (stderr,"\nn %3d %c l %-1d c %4x (%x) ",
596: /* MUTANT (rep_const) */        Tracec(tree != static_ltree, (stderr,"\nn %3d %c l %((2)+1)d c %4x (%x) ",
596: /* MUTANT (rep_const) */        Tracec(tree != static_ltree, (stderr,"\nn %3d %c l %((2)-1)d c %4x (%x) ",
596: /* MUTANT (rep_const) */        Tracec(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %0x (%x) ",
596: /* MUTANT (rep_const) */        Tracec(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %1x (%x) ",
596: /* MUTANT (rep_const) */        Tracec(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %-1x (%x) ",
596: /* MUTANT (rep_const) */        Tracec(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %((4)+1)x (%x) ",
596: /* MUTANT (rep_const) */        Tracec(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %((4)-1)x (%x) ",
597: /* MUTANT (rep_const) */             n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]0));
597: /* MUTANT (rep_const) */             n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]1));
597: /* MUTANT (rep_const) */             n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]((-1)+1)));
597: /* MUTANT (rep_const) */             n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]((-1)-1)));
612: /* MUTANT (del_stmt) */ /*     ct_data near *tree   = desc->dyn_tree; */ 
613: /* MUTANT (del_stmt) */ /*     ct_data near *stree  = desc->static_tree; */ 
614: /* MUTANT (del_stmt) */ /*     int elems            = desc->elems; */ 
615: /* MUTANT (del_stmt) */ /*     int n, m; */           /* iterate over heap elements */
616: /* MUTANT (del_stmt) */ /*     int max_code = -1; */  /* largest code with non zero frequency */
616: /* MUTANT (rep_const) */    int max_code = 0; /* largest code with non zero frequency */
616: /* MUTANT (rep_const) */    int max_code = 1; /* largest code with non zero frequency */
616: /* MUTANT (rep_const) */    int max_code = ((-1)+1); /* largest code with non zero frequency */
616: /* MUTANT (rep_const) */    int max_code = ((-1)-1); /* largest code with non zero frequency */
617: /* MUTANT (del_stmt) */ /*     int node = elems; */   /* next internal node of the tree */
623: /* MUTANT (del_stmt) */ /*     heap_len = 0, heap_max = HEAP_SIZE; */ 
623: /* MUTANT (rep_const) */    heap_len = 1, heap_max = HEAP_SIZE;
623: /* MUTANT (rep_const) */    heap_len = -1, heap_max = HEAP_SIZE;
625: /* MUTANT (rep_op) */    for (n = 0; n <= elems; n++) {
625: /* MUTANT (rep_op) */    for (n = 0; n > elems; n++) {
625: /* MUTANT (rep_op) */    for (n = 0; n >= elems; n++) {
625: /* MUTANT (rep_op) */    for (n = 0; n == elems; n++) {
625: /* MUTANT (rep_op) */    for (n = 0; n != elems; n++) {
625: /* MUTANT (rep_op) */    for (n = 0; n < elems; n--) {
625: /* MUTANT (rep_const) */    for (n = 1; n < elems; n++) {
625: /* MUTANT (rep_const) */    for (n = -1; n < elems; n++) {
626: /* MUTANT (rep_op) */        if (tree[n].Freq == 0) {
626: /* MUTANT (rep_const) */        if (tree[n].Freq != 1) {
626: /* MUTANT (rep_const) */        if (tree[n].Freq != -1) {
626: /* MUTANT (negate) */        if(! (tree[n].Freq != 0)) {
627: /* MUTANT (del_stmt) */ /*             heap[++heap_len] = max_code = n; */ 
627: /* MUTANT (rep_op) */            heap[--heap_len] = max_code = n;
628: /* MUTANT (del_stmt) */ /*             depth[n] = 0; */ 
628: /* MUTANT (rep_const) */            depth[n] = 1;
628: /* MUTANT (rep_const) */            depth[n] = -1;
630: /* MUTANT (del_stmt) */ /*             tree[n].Len = 0; */ 
630: /* MUTANT (rep_const) */            tree[n].Len = 1;
630: /* MUTANT (rep_const) */            tree[n].Len = -1;
639: /* MUTANT (rep_op) */    while (heap_len <= 2) {
639: /* MUTANT (rep_op) */    while (heap_len > 2) {
639: /* MUTANT (rep_op) */    while (heap_len >= 2) {
639: /* MUTANT (rep_op) */    while (heap_len == 2) {
639: /* MUTANT (rep_op) */    while (heap_len != 2) {
639: /* MUTANT (rep_const) */    while (heap_len < 0) {
639: /* MUTANT (rep_const) */    while (heap_len < 1) {
639: /* MUTANT (rep_const) */    while (heap_len < -1) {
639: /* MUTANT (rep_const) */    while (heap_len < ((2)+1)) {
639: /* MUTANT (rep_const) */    while (heap_len < ((2)-1)) {
639: /* MUTANT (negate) */    while(! (heap_len < 2)) {
640: /* MUTANT (del_stmt) */ /*         int new = heap[++heap_len] = (max_code < 2 ? ++max_code : 0); */ 
640: /* MUTANT (rep_op) */        int new = heap[--heap_len] = (max_code < 2 ? ++max_code : 0);
640: /* MUTANT (rep_op) */        int new = heap[++heap_len] = (max_code <= 2 ? ++max_code : 0);
640: /* MUTANT (rep_op) */        int new = heap[++heap_len] = (max_code > 2 ? ++max_code : 0);
640: /* MUTANT (rep_op) */        int new = heap[++heap_len] = (max_code >= 2 ? ++max_code : 0);
640: /* MUTANT (rep_op) */        int new = heap[++heap_len] = (max_code == 2 ? ++max_code : 0);
640: /* MUTANT (rep_op) */        int new = heap[++heap_len] = (max_code != 2 ? ++max_code : 0);
640: /* MUTANT (rep_op) */        int new = heap[++heap_len] = (max_code < 2 ? --max_code : 0);
640: /* MUTANT (rep_const) */        int new = heap[++heap_len] = (max_code < 0 ? ++max_code : 0);
640: /* MUTANT (rep_const) */        int new = heap[++heap_len] = (max_code < 1 ? ++max_code : 0);
640: /* MUTANT (rep_const) */        int new = heap[++heap_len] = (max_code < -1 ? ++max_code : 0);
640: /* MUTANT (rep_const) */        int new = heap[++heap_len] = (max_code < ((2)+1) ? ++max_code : 0);
640: /* MUTANT (rep_const) */        int new = heap[++heap_len] = (max_code < ((2)-1) ? ++max_code : 0);
640: /* MUTANT (rep_const) */        int new = heap[++heap_len] = (max_code < 2 ? ++max_code : 1);
640: /* MUTANT (rep_const) */        int new = heap[++heap_len] = (max_code < 2 ? ++max_code : -1);
641: /* MUTANT (del_stmt) */ /*         tree[new].Freq = 1; */ 
641: /* MUTANT (rep_const) */        tree[new].Freq = 0;
641: /* MUTANT (rep_const) */        tree[new].Freq = -1;
641: /* MUTANT (rep_const) */        tree[new].Freq = ((1)+1);
642: /* MUTANT (del_stmt) */ /*         depth[new] = 0; */ 
642: /* MUTANT (rep_const) */        depth[new] = 1;
642: /* MUTANT (rep_const) */        depth[new] = -1;
643: /* MUTANT (del_stmt) */ /*         opt_len--; */  if (stree) static_len -= stree[new].Len;
643: /* MUTANT (del_stmt) */ /*         opt_len--; */  /*  if (stree) static_len -= stree[new].Len; */ 
643: /* MUTANT (del_stmt) */        opt_len--; /*  if (stree) static_len -= stree[new].Len; */ 
643: /* MUTANT (rep_op) */        opt_len++; if (stree) static_len -= stree[new].Len;
643: /* MUTANT (rep_op) */        opt_len--; if (stree) static_len += stree[new].Len;
643: /* MUTANT (rep_op) */        opt_len--; if (stree) static_len *= stree[new].Len;
643: /* MUTANT (rep_op) */        opt_len--; if (stree) static_len %= stree[new].Len;
643: /* MUTANT (negate) */        opt_len--; if(! (stree)) static_len -= stree[new].Len;
651: /* MUTANT (del_stmt) */ /*     for (n = heap_len/2; n >= 1; n--) pqdownheap(tree, n); */ 
651: /* MUTANT (rep_op) */    for (n = heap_len/2; n <= 1; n--) pqdownheap(tree, n);
651: /* MUTANT (rep_op) */    for (n = heap_len/2; n < 1; n--) pqdownheap(tree, n);
651: /* MUTANT (rep_op) */    for (n = heap_len/2; n > 1; n--) pqdownheap(tree, n);
651: /* MUTANT (rep_op) */    for (n = heap_len/2; n == 1; n--) pqdownheap(tree, n);
651: /* MUTANT (rep_op) */    for (n = heap_len/2; n != 1; n--) pqdownheap(tree, n);
651: /* MUTANT (rep_op) */    for (n = heap_len/2; n >= 1; n++) pqdownheap(tree, n);
651: /* MUTANT (rep_const) */    for (n = heap_len/0; n >= 1; n--) pqdownheap(tree, n);
651: /* MUTANT (rep_const) */    for (n = heap_len/1; n >= 1; n--) pqdownheap(tree, n);
651: /* MUTANT (rep_const) */    for (n = heap_len/-1; n >= 1; n--) pqdownheap(tree, n);
651: /* MUTANT (rep_const) */    for (n = heap_len/((2)+1); n >= 1; n--) pqdownheap(tree, n);
651: /* MUTANT (rep_const) */    for (n = heap_len/((2)-1); n >= 1; n--) pqdownheap(tree, n);
651: /* MUTANT (rep_const) */    for (n = heap_len/2; n >= 0; n--) pqdownheap(tree, n);
651: /* MUTANT (rep_const) */    for (n = heap_len/2; n >= -1; n--) pqdownheap(tree, n);
651: /* MUTANT (rep_const) */    for (n = heap_len/2; n >= ((1)+1); n--) pqdownheap(tree, n);
657: /* MUTANT (del_stmt) */ /*         pqremove(tree, n); */    /* n = node of least frequency */
658: /* MUTANT (del_stmt) */ /*         m = heap[SMALLEST]; */   /* m = node of next least frequency */
660: /* MUTANT (del_stmt) */ /*         heap[--heap_max] = n; */  /* keep the nodes sorted by frequency */
660: /* MUTANT (rep_op) */        heap[++heap_max] = n; /* keep the nodes sorted by frequency */
661: /* MUTANT (del_stmt) */ /*         heap[--heap_max] = m; */ 
661: /* MUTANT (rep_op) */        heap[++heap_max] = m;
664: /* MUTANT (del_stmt) */ /*         tree[node].Freq = tree[n].Freq + tree[m].Freq; */ 
664: /* MUTANT (rep_op) */        tree[node].Freq = tree[n].Freq - tree[m].Freq;
664: /* MUTANT (rep_op) */        tree[node].Freq = tree[n].Freq * tree[m].Freq;
664: /* MUTANT (rep_op) */        tree[node].Freq = tree[n].Freq % tree[m].Freq;
665: /* MUTANT (del_stmt) */ /*         depth[node] = (uch) (MAX(depth[n], depth[m]) + 1); */ 
665: /* MUTANT (rep_op) */        depth[node] = (uch) (MAX(depth[n], depth[m]) - 1);
665: /* MUTANT (rep_op) */        depth[node] = (uch) (MAX(depth[n], depth[m]) * 1);
665: /* MUTANT (rep_op) */        depth[node] = (uch) (MAX(depth[n], depth[m]) % 1);
665: /* MUTANT (rep_const) */        depth[node] = (uch) (MAX(depth[n], depth[m]) + 0);
665: /* MUTANT (rep_const) */        depth[node] = (uch) (MAX(depth[n], depth[m]) + -1);
665: /* MUTANT (rep_const) */        depth[node] = (uch) (MAX(depth[n], depth[m]) + ((1)+1));
666: /* MUTANT (del_stmt) */ /*         tree[n].Dad = tree[m].Dad = (ush)node; */ 
668: /* MUTANT (rep_op) */        if (tree != bl_tree) {
668: /* MUTANT (negate) */        if(! (tree == bl_tree)) {
674: /* MUTANT (rep_op) */        heap[SMALLEST] = node--;
675: /* MUTANT (del_stmt) */ /*         pqdownheap(tree, SMALLEST); */ 
677: /* MUTANT (del_stmt) */ /*     } while (heap_len >= 2); */ 
677: /* MUTANT (rep_op) */    } while (heap_len <= 2);
677: /* MUTANT (rep_op) */    } while (heap_len < 2);
677: /* MUTANT (rep_op) */    } while (heap_len > 2);
677: /* MUTANT (rep_op) */    } while (heap_len == 2);
677: /* MUTANT (rep_op) */    } while (heap_len != 2);
677: /* MUTANT (rep_const) */    } while (heap_len >= 0);
677: /* MUTANT (rep_const) */    } while (heap_len >= 1);
677: /* MUTANT (rep_const) */    } while (heap_len >= -1);
677: /* MUTANT (rep_const) */    } while (heap_len >= ((2)+1));
677: /* MUTANT (rep_const) */    } while (heap_len >= ((2)-1));
677: /* MUTANT (negate) */    } while(! (heap_len >= 2));
679: /* MUTANT (del_stmt) */ /*     heap[--heap_max] = heap[SMALLEST]; */ 
679: /* MUTANT (rep_op) */    heap[++heap_max] = heap[SMALLEST];
684: /* MUTANT (del_stmt) */ /*     gen_bitlen((tree_desc near *)desc); */ 
687: /* MUTANT (del_stmt) */ /*     gen_codes ((ct_data near *)tree, max_code); */ 
698: /* MUTANT (del_stmt) */ /*     int max_code; */        /* and its largest code of non zero frequency */
700: /* MUTANT (del_stmt) */ /*     int n; */                      /* iterates over all tree elements */
701: /* MUTANT (del_stmt) */ /*     int prevlen = -1; */           /* last emitted length */
701: /* MUTANT (rep_const) */    int prevlen = 0;          /* last emitted length */
701: /* MUTANT (rep_const) */    int prevlen = 1;          /* last emitted length */
701: /* MUTANT (rep_const) */    int prevlen = ((-1)+1);          /* last emitted length */
701: /* MUTANT (rep_const) */    int prevlen = ((-1)-1);          /* last emitted length */
702: /* MUTANT (del_stmt) */ /*     int curlen; */                 /* length of current code */
703: /* MUTANT (del_stmt) */ /*     int nextlen = tree[0].Len; */  /* length of next code */
703: /* MUTANT (rep_const) */    int nextlen = tree[1].Len; /* length of next code */
703: /* MUTANT (rep_const) */    int nextlen = tree[-1].Len; /* length of next code */
704: /* MUTANT (del_stmt) */ /*     int count = 0; */              /* repeat count of the current code */
704: /* MUTANT (rep_const) */    int count = 1;             /* repeat count of the current code */
704: /* MUTANT (rep_const) */    int count = -1;             /* repeat count of the current code */
705: /* MUTANT (del_stmt) */ /*     int max_count = 7; */          /* max repeat count */
705: /* MUTANT (rep_const) */    int max_count = 0;         /* max repeat count */
705: /* MUTANT (rep_const) */    int max_count = 1;         /* max repeat count */
705: /* MUTANT (rep_const) */    int max_count = -1;         /* max repeat count */
705: /* MUTANT (rep_const) */    int max_count = ((7)+1);         /* max repeat count */
705: /* MUTANT (rep_const) */    int max_count = ((7)-1);         /* max repeat count */
706: /* MUTANT (del_stmt) */ /*     int min_count = 4; */          /* min repeat count */
706: /* MUTANT (rep_const) */    int min_count = 0;         /* min repeat count */
706: /* MUTANT (rep_const) */    int min_count = 1;         /* min repeat count */
706: /* MUTANT (rep_const) */    int min_count = -1;         /* min repeat count */
706: /* MUTANT (rep_const) */    int min_count = ((4)+1);         /* min repeat count */
706: /* MUTANT (rep_const) */    int min_count = ((4)-1);         /* min repeat count */
708: /* MUTANT (del_stmt) */ /*     if (nextlen == 0) max_count = 138, min_count = 3; */ 
708: /* MUTANT (rep_op) */    if (nextlen != 0) max_count = 138, min_count = 3;
708: /* MUTANT (rep_const) */    if (nextlen == 1) max_count = 138, min_count = 3;
708: /* MUTANT (rep_const) */    if (nextlen == -1) max_count = 138, min_count = 3;
708: /* MUTANT (rep_const) */    if (nextlen == 0) max_count = 0, min_count = 3;
708: /* MUTANT (rep_const) */    if (nextlen == 0) max_count = 1, min_count = 3;
708: /* MUTANT (rep_const) */    if (nextlen == 0) max_count = -1, min_count = 3;
708: /* MUTANT (rep_const) */    if (nextlen == 0) max_count = ((138)+1), min_count = 3;
708: /* MUTANT (rep_const) */    if (nextlen == 0) max_count = ((138)-1), min_count = 3;
708: /* MUTANT (rep_const) */    if (nextlen == 0) max_count = 138, min_count = 0;
708: /* MUTANT (rep_const) */    if (nextlen == 0) max_count = 138, min_count = 1;
708: /* MUTANT (rep_const) */    if (nextlen == 0) max_count = 138, min_count = -1;
708: /* MUTANT (rep_const) */    if (nextlen == 0) max_count = 138, min_count = ((3)+1);
708: /* MUTANT (rep_const) */    if (nextlen == 0) max_count = 138, min_count = ((3)-1);
708: /* MUTANT (negate) */    if(! (nextlen == 0)) max_count = 138, min_count = 3;
709: /* MUTANT (del_stmt) */ /*     tree[max_code+1].Len = (ush)0xffff; */  /* guard */
709: /* MUTANT (rep_op) */    tree[max_code-1].Len = (ush)0xffff; /* guard */
709: /* MUTANT (rep_op) */    tree[max_code*1].Len = (ush)0xffff; /* guard */
709: /* MUTANT (rep_op) */    tree[max_code%1].Len = (ush)0xffff; /* guard */
709: /* MUTANT (rep_const) */    tree[max_code+0].Len = (ush)0xffff; /* guard */
709: /* MUTANT (rep_const) */    tree[max_code+-1].Len = (ush)0xffff; /* guard */
709: /* MUTANT (rep_const) */    tree[max_code+((1)+1)].Len = (ush)0xffff; /* guard */
709: /* MUTANT (rep_const) */    tree[max_code+1].Len = (ush)1xffff; /* guard */
709: /* MUTANT (rep_const) */    tree[max_code+1].Len = (ush)-1xffff; /* guard */
711: /* MUTANT (rep_op) */    for (n = 0; n < max_code; n++) {
711: /* MUTANT (rep_op) */    for (n = 0; n > max_code; n++) {
711: /* MUTANT (rep_op) */    for (n = 0; n >= max_code; n++) {
711: /* MUTANT (rep_op) */    for (n = 0; n == max_code; n++) {
711: /* MUTANT (rep_op) */    for (n = 0; n != max_code; n++) {
711: /* MUTANT (rep_op) */    for (n = 0; n <= max_code; n--) {
711: /* MUTANT (rep_const) */    for (n = 1; n <= max_code; n++) {
711: /* MUTANT (rep_const) */    for (n = -1; n <= max_code; n++) {
712: /* MUTANT (del_stmt) */ /*         curlen = nextlen; */  nextlen = tree[n+1].Len;
712: /* MUTANT (del_stmt) */ /*         curlen = nextlen; */  /*  nextlen = tree[n+1].Len; */ 
712: /* MUTANT (del_stmt) */        curlen = nextlen; /*  nextlen = tree[n+1].Len; */ 
712: /* MUTANT (rep_op) */        curlen = nextlen; nextlen = tree[n-1].Len;
712: /* MUTANT (rep_op) */        curlen = nextlen; nextlen = tree[n*1].Len;
712: /* MUTANT (rep_op) */        curlen = nextlen; nextlen = tree[n%1].Len;
712: /* MUTANT (rep_const) */        curlen = nextlen; nextlen = tree[n+0].Len;
712: /* MUTANT (rep_const) */        curlen = nextlen; nextlen = tree[n+-1].Len;
712: /* MUTANT (rep_const) */        curlen = nextlen; nextlen = tree[n+((1)+1)].Len;
713: /* MUTANT (rep_op) */        if (--count < max_count && curlen == nextlen) {
713: /* MUTANT (rep_op) */        if (++count <= max_count && curlen == nextlen) {
713: /* MUTANT (rep_op) */        if (++count > max_count && curlen == nextlen) {
713: /* MUTANT (rep_op) */        if (++count >= max_count && curlen == nextlen) {
713: /* MUTANT (rep_op) */        if (++count == max_count && curlen == nextlen) {
713: /* MUTANT (rep_op) */        if (++count != max_count && curlen == nextlen) {
713: /* MUTANT (rep_op) */        if (++count < max_count || curlen == nextlen) {
713: /* MUTANT (rep_op) */        if (++count < max_count && curlen != nextlen) {
713: /* MUTANT (negate) */        if(! (++count < max_count && curlen == nextlen)) {
714: /* MUTANT (del_stmt) */ /*             continue; */ 
715: /* MUTANT (rep_op) */        } else if (count <= min_count) {
715: /* MUTANT (rep_op) */        } else if (count > min_count) {
715: /* MUTANT (rep_op) */        } else if (count >= min_count) {
715: /* MUTANT (rep_op) */        } else if (count == min_count) {
715: /* MUTANT (rep_op) */        } else if (count != min_count) {
715: /* MUTANT (negate) */        } else if(! (count < min_count)) {
716: /* MUTANT (del_stmt) */ /*             bl_tree[curlen].Freq += count; */ 
716: /* MUTANT (rep_op) */            bl_tree[curlen].Freq -= count;
716: /* MUTANT (rep_op) */            bl_tree[curlen].Freq *= count;
716: /* MUTANT (rep_op) */            bl_tree[curlen].Freq %= count;
717: /* MUTANT (rep_op) */        } else if (curlen == 0) {
717: /* MUTANT (rep_const) */        } else if (curlen != 1) {
717: /* MUTANT (rep_const) */        } else if (curlen != -1) {
717: /* MUTANT (negate) */        } else if(! (curlen != 0)) {
718: /* MUTANT (del_stmt) */ /*             if (curlen != prevlen) bl_tree[curlen].Freq++; */ 
718: /* MUTANT (rep_op) */            if (curlen == prevlen) bl_tree[curlen].Freq++;
718: /* MUTANT (rep_op) */            if (curlen != prevlen) bl_tree[curlen].Freq--;
718: /* MUTANT (negate) */            if(! (curlen != prevlen)) bl_tree[curlen].Freq++;
719: /* MUTANT (del_stmt) */ /*             bl_tree[REP_3_6].Freq++; */ 
719: /* MUTANT (rep_op) */            bl_tree[REP_3_6].Freq--;
720: /* MUTANT (rep_op) */        } else if (count < 10) {
720: /* MUTANT (rep_op) */        } else if (count > 10) {
720: /* MUTANT (rep_op) */        } else if (count >= 10) {
720: /* MUTANT (rep_op) */        } else if (count == 10) {
720: /* MUTANT (rep_op) */        } else if (count != 10) {
720: /* MUTANT (rep_const) */        } else if (count <= 0) {
720: /* MUTANT (rep_const) */        } else if (count <= 1) {
720: /* MUTANT (rep_const) */        } else if (count <= -1) {
720: /* MUTANT (rep_const) */        } else if (count <= ((10)+1)) {
720: /* MUTANT (rep_const) */        } else if (count <= ((10)-1)) {
720: /* MUTANT (negate) */        } else if(! (count <= 10)) {
721: /* MUTANT (del_stmt) */ /*             bl_tree[REPZ_3_10].Freq++; */ 
721: /* MUTANT (rep_op) */            bl_tree[REPZ_3_10].Freq--;
723: /* MUTANT (del_stmt) */ /*             bl_tree[REPZ_11_138].Freq++; */ 
723: /* MUTANT (rep_op) */            bl_tree[REPZ_11_138].Freq--;
725: /* MUTANT (rep_const) */        count = 1; prevlen = curlen;
725: /* MUTANT (rep_const) */        count = -1; prevlen = curlen;
726: /* MUTANT (rep_op) */        if (nextlen != 0) {
726: /* MUTANT (rep_const) */        if (nextlen == 1) {
726: /* MUTANT (rep_const) */        if (nextlen == -1) {
726: /* MUTANT (negate) */        if(! (nextlen == 0)) {
727: /* MUTANT (del_stmt) */ /*             max_count = 138, min_count = 3; */ 
727: /* MUTANT (rep_const) */            max_count = 0, min_count = 3;
727: /* MUTANT (rep_const) */            max_count = 1, min_count = 3;
727: /* MUTANT (rep_const) */            max_count = -1, min_count = 3;
727: /* MUTANT (rep_const) */            max_count = ((138)+1), min_count = 3;
727: /* MUTANT (rep_const) */            max_count = ((138)-1), min_count = 3;
727: /* MUTANT (rep_const) */            max_count = 138, min_count = 0;
727: /* MUTANT (rep_const) */            max_count = 138, min_count = 1;
727: /* MUTANT (rep_const) */            max_count = 138, min_count = -1;
727: /* MUTANT (rep_const) */            max_count = 138, min_count = ((3)+1);
727: /* MUTANT (rep_const) */            max_count = 138, min_count = ((3)-1);
728: /* MUTANT (rep_op) */        } else if (curlen != nextlen) {
728: /* MUTANT (negate) */        } else if(! (curlen == nextlen)) {
729: /* MUTANT (del_stmt) */ /*             max_count = 6, min_count = 3; */ 
729: /* MUTANT (rep_const) */            max_count = 0, min_count = 3;
729: /* MUTANT (rep_const) */            max_count = 1, min_count = 3;
729: /* MUTANT (rep_const) */            max_count = -1, min_count = 3;
729: /* MUTANT (rep_const) */            max_count = ((6)+1), min_count = 3;
729: /* MUTANT (rep_const) */            max_count = ((6)-1), min_count = 3;
729: /* MUTANT (rep_const) */            max_count = 6, min_count = 0;
729: /* MUTANT (rep_const) */            max_count = 6, min_count = 1;
729: /* MUTANT (rep_const) */            max_count = 6, min_count = -1;
729: /* MUTANT (rep_const) */            max_count = 6, min_count = ((3)+1);
729: /* MUTANT (rep_const) */            max_count = 6, min_count = ((3)-1);
731: /* MUTANT (del_stmt) */ /*             max_count = 7, min_count = 4; */ 
731: /* MUTANT (rep_const) */            max_count = 0, min_count = 4;
731: /* MUTANT (rep_const) */            max_count = 1, min_count = 4;
731: /* MUTANT (rep_const) */            max_count = -1, min_count = 4;
731: /* MUTANT (rep_const) */            max_count = ((7)+1), min_count = 4;
731: /* MUTANT (rep_const) */            max_count = ((7)-1), min_count = 4;
731: /* MUTANT (rep_const) */            max_count = 7, min_count = 0;
731: /* MUTANT (rep_const) */            max_count = 7, min_count = 1;
731: /* MUTANT (rep_const) */            max_count = 7, min_count = -1;
731: /* MUTANT (rep_const) */            max_count = 7, min_count = ((4)+1);
731: /* MUTANT (rep_const) */            max_count = 7, min_count = ((4)-1);
742: /* MUTANT (del_stmt) */ /*     int max_code; */        /* and its largest code of non zero frequency */
744: /* MUTANT (del_stmt) */ /*     int n; */                      /* iterates over all tree elements */
745: /* MUTANT (del_stmt) */ /*     int prevlen = -1; */           /* last emitted length */
745: /* MUTANT (rep_const) */    int prevlen = 0;          /* last emitted length */
745: /* MUTANT (rep_const) */    int prevlen = 1;          /* last emitted length */
745: /* MUTANT (rep_const) */    int prevlen = ((-1)+1);          /* last emitted length */
745: /* MUTANT (rep_const) */    int prevlen = ((-1)-1);          /* last emitted length */
746: /* MUTANT (del_stmt) */ /*     int curlen; */                 /* length of current code */
747: /* MUTANT (del_stmt) */ /*     int nextlen = tree[0].Len; */  /* length of next code */
747: /* MUTANT (rep_const) */    int nextlen = tree[1].Len; /* length of next code */
747: /* MUTANT (rep_const) */    int nextlen = tree[-1].Len; /* length of next code */
748: /* MUTANT (del_stmt) */ /*     int count = 0; */              /* repeat count of the current code */
748: /* MUTANT (rep_const) */    int count = 1;             /* repeat count of the current code */
748: /* MUTANT (rep_const) */    int count = -1;             /* repeat count of the current code */
749: /* MUTANT (del_stmt) */ /*     int max_count = 7; */          /* max repeat count */
749: /* MUTANT (rep_const) */    int max_count = 0;         /* max repeat count */
749: /* MUTANT (rep_const) */    int max_count = 1;         /* max repeat count */
749: /* MUTANT (rep_const) */    int max_count = -1;         /* max repeat count */
749: /* MUTANT (rep_const) */    int max_count = ((7)+1);         /* max repeat count */
749: /* MUTANT (rep_const) */    int max_count = ((7)-1);         /* max repeat count */
750: /* MUTANT (del_stmt) */ /*     int min_count = 4; */          /* min repeat count */
750: /* MUTANT (rep_const) */    int min_count = 0;         /* min repeat count */
750: /* MUTANT (rep_const) */    int min_count = 1;         /* min repeat count */
750: /* MUTANT (rep_const) */    int min_count = -1;         /* min repeat count */
750: /* MUTANT (rep_const) */    int min_count = ((4)+1);         /* min repeat count */
750: /* MUTANT (rep_const) */    int min_count = ((4)-1);         /* min repeat count */
753: /* MUTANT (del_stmt) */ /*     if (nextlen == 0) max_count = 138, min_count = 3; */ 
753: /* MUTANT (rep_op) */    if (nextlen != 0) max_count = 138, min_count = 3;
753: /* MUTANT (rep_const) */    if (nextlen == 1) max_count = 138, min_count = 3;
753: /* MUTANT (rep_const) */    if (nextlen == -1) max_count = 138, min_count = 3;
753: /* MUTANT (rep_const) */    if (nextlen == 0) max_count = 0, min_count = 3;
753: /* MUTANT (rep_const) */    if (nextlen == 0) max_count = 1, min_count = 3;
753: /* MUTANT (rep_const) */    if (nextlen == 0) max_count = -1, min_count = 3;
753: /* MUTANT (rep_const) */    if (nextlen == 0) max_count = ((138)+1), min_count = 3;
753: /* MUTANT (rep_const) */    if (nextlen == 0) max_count = ((138)-1), min_count = 3;
753: /* MUTANT (rep_const) */    if (nextlen == 0) max_count = 138, min_count = 0;
753: /* MUTANT (rep_const) */    if (nextlen == 0) max_count = 138, min_count = 1;
753: /* MUTANT (rep_const) */    if (nextlen == 0) max_count = 138, min_count = -1;
753: /* MUTANT (rep_const) */    if (nextlen == 0) max_count = 138, min_count = ((3)+1);
753: /* MUTANT (rep_const) */    if (nextlen == 0) max_count = 138, min_count = ((3)-1);
753: /* MUTANT (negate) */    if(! (nextlen == 0)) max_count = 138, min_count = 3;
755: /* MUTANT (rep_op) */    for (n = 0; n < max_code; n++) {
755: /* MUTANT (rep_op) */    for (n = 0; n > max_code; n++) {
755: /* MUTANT (rep_op) */    for (n = 0; n >= max_code; n++) {
755: /* MUTANT (rep_op) */    for (n = 0; n == max_code; n++) {
755: /* MUTANT (rep_op) */    for (n = 0; n != max_code; n++) {
755: /* MUTANT (rep_op) */    for (n = 0; n <= max_code; n--) {
755: /* MUTANT (rep_const) */    for (n = 1; n <= max_code; n++) {
755: /* MUTANT (rep_const) */    for (n = -1; n <= max_code; n++) {
756: /* MUTANT (del_stmt) */ /*         curlen = nextlen; */  nextlen = tree[n+1].Len;
756: /* MUTANT (del_stmt) */ /*         curlen = nextlen; */  /*  nextlen = tree[n+1].Len; */ 
756: /* MUTANT (del_stmt) */        curlen = nextlen; /*  nextlen = tree[n+1].Len; */ 
756: /* MUTANT (rep_op) */        curlen = nextlen; nextlen = tree[n-1].Len;
756: /* MUTANT (rep_op) */        curlen = nextlen; nextlen = tree[n*1].Len;
756: /* MUTANT (rep_op) */        curlen = nextlen; nextlen = tree[n%1].Len;
756: /* MUTANT (rep_const) */        curlen = nextlen; nextlen = tree[n+0].Len;
756: /* MUTANT (rep_const) */        curlen = nextlen; nextlen = tree[n+-1].Len;
756: /* MUTANT (rep_const) */        curlen = nextlen; nextlen = tree[n+((1)+1)].Len;
757: /* MUTANT (rep_op) */        if (--count < max_count && curlen == nextlen) {
757: /* MUTANT (rep_op) */        if (++count <= max_count && curlen == nextlen) {
757: /* MUTANT (rep_op) */        if (++count > max_count && curlen == nextlen) {
757: /* MUTANT (rep_op) */        if (++count >= max_count && curlen == nextlen) {
757: /* MUTANT (rep_op) */        if (++count == max_count && curlen == nextlen) {
757: /* MUTANT (rep_op) */        if (++count != max_count && curlen == nextlen) {
757: /* MUTANT (rep_op) */        if (++count < max_count || curlen == nextlen) {
757: /* MUTANT (rep_op) */        if (++count < max_count && curlen != nextlen) {
757: /* MUTANT (negate) */        if(! (++count < max_count && curlen == nextlen)) {
758: /* MUTANT (del_stmt) */ /*             continue; */ 
759: /* MUTANT (rep_op) */        } else if (count <= min_count) {
759: /* MUTANT (rep_op) */        } else if (count > min_count) {
759: /* MUTANT (rep_op) */        } else if (count >= min_count) {
759: /* MUTANT (rep_op) */        } else if (count == min_count) {
759: /* MUTANT (rep_op) */        } else if (count != min_count) {
759: /* MUTANT (negate) */        } else if(! (count < min_count)) {
760: /* MUTANT (del_stmt) */ /*             do { send_code(curlen, bl_tree); */  } while (--count != 0);
760: /* MUTANT (del_stmt) */ /*             do { send_code(curlen, bl_tree); */  /*  } while (--count != 0); */ 
760: /* MUTANT (del_stmt) */            do { send_code(curlen, bl_tree); /*  } while (--count != 0); */ 
760: /* MUTANT (rep_op) */            do { send_code(curlen, bl_tree); } while (++count != 0);
760: /* MUTANT (rep_op) */            do { send_code(curlen, bl_tree); } while (--count == 0);
760: /* MUTANT (rep_const) */            do { send_code(curlen, bl_tree); } while (--count != 1);
760: /* MUTANT (rep_const) */            do { send_code(curlen, bl_tree); } while (--count != -1);
760: /* MUTANT (negate) */            do { send_code(curlen, bl_tree); } while(! (--count != 0));
762: /* MUTANT (rep_op) */        } else if (curlen == 0) {
762: /* MUTANT (rep_const) */        } else if (curlen != 1) {
762: /* MUTANT (rep_const) */        } else if (curlen != -1) {
762: /* MUTANT (negate) */        } else if(! (curlen != 0)) {
763: /* MUTANT (rep_op) */            if (curlen == prevlen) {
763: /* MUTANT (negate) */            if(! (curlen != prevlen)) {
764: /* MUTANT (del_stmt) */ /*                 send_code(curlen, bl_tree); */  count--;
764: /* MUTANT (del_stmt) */ /*                 send_code(curlen, bl_tree); */  /*  count--; */ 
764: /* MUTANT (del_stmt) */                send_code(curlen, bl_tree); /*  count--; */ 
764: /* MUTANT (rep_op) */                send_code(curlen, bl_tree); count++;
766: /* MUTANT (rep_op) */            Assert(count <= 3 && count <= 6, " 3_6?");
766: /* MUTANT (rep_op) */            Assert(count < 3 && count <= 6, " 3_6?");
766: /* MUTANT (rep_op) */            Assert(count > 3 && count <= 6, " 3_6?");
766: /* MUTANT (rep_op) */            Assert(count == 3 && count <= 6, " 3_6?");
766: /* MUTANT (rep_op) */            Assert(count != 3 && count <= 6, " 3_6?");
766: /* MUTANT (rep_op) */            Assert(count >= 3 || count <= 6, " 3_6?");
766: /* MUTANT (rep_op) */            Assert(count >= 3 && count < 6, " 3_6?");
766: /* MUTANT (rep_op) */            Assert(count >= 3 && count > 6, " 3_6?");
766: /* MUTANT (rep_op) */            Assert(count >= 3 && count >= 6, " 3_6?");
766: /* MUTANT (rep_op) */            Assert(count >= 3 && count == 6, " 3_6?");
766: /* MUTANT (rep_op) */            Assert(count >= 3 && count != 6, " 3_6?");
766: /* MUTANT (rep_const) */            Assert(count >= 0 && count <= 6, " 3_6?");
766: /* MUTANT (rep_const) */            Assert(count >= 1 && count <= 6, " 3_6?");
766: /* MUTANT (rep_const) */            Assert(count >= -1 && count <= 6, " 3_6?");
766: /* MUTANT (rep_const) */            Assert(count >= ((3)+1) && count <= 6, " 3_6?");
766: /* MUTANT (rep_const) */            Assert(count >= ((3)-1) && count <= 6, " 3_6?");
766: /* MUTANT (rep_const) */            Assert(count >= 3 && count <= 0, " 3_6?");
766: /* MUTANT (rep_const) */            Assert(count >= 3 && count <= 1, " 3_6?");
766: /* MUTANT (rep_const) */            Assert(count >= 3 && count <= -1, " 3_6?");
766: /* MUTANT (rep_const) */            Assert(count >= 3 && count <= ((6)+1), " 3_6?");
766: /* MUTANT (rep_const) */            Assert(count >= 3 && count <= ((6)-1), " 3_6?");
766: /* MUTANT (rep_const) */            Assert(count >= 3 && count <= 6, " 0_6?");
766: /* MUTANT (rep_const) */            Assert(count >= 3 && count <= 6, " 1_6?");
766: /* MUTANT (rep_const) */            Assert(count >= 3 && count <= 6, " -1_6?");
766: /* MUTANT (rep_const) */            Assert(count >= 3 && count <= 6, " ((3)+1)_6?");
766: /* MUTANT (rep_const) */            Assert(count >= 3 && count <= 6, " ((3)-1)_6?");
767: /* MUTANT (del_stmt) */ /*             send_code(REP_3_6, bl_tree); */  send_bits(count-3, 2);
767: /* MUTANT (del_stmt) */ /*             send_code(REP_3_6, bl_tree); */  /*  send_bits(count-3, 2); */ 
767: /* MUTANT (del_stmt) */            send_code(REP_3_6, bl_tree); /*  send_bits(count-3, 2); */ 
767: /* MUTANT (rep_const) */            send_code(REP_3_6, bl_tree); send_bits(count-0, 2);
767: /* MUTANT (rep_const) */            send_code(REP_3_6, bl_tree); send_bits(count-1, 2);
767: /* MUTANT (rep_const) */            send_code(REP_3_6, bl_tree); send_bits(count--1, 2);
767: /* MUTANT (rep_const) */            send_code(REP_3_6, bl_tree); send_bits(count-((3)+1), 2);
767: /* MUTANT (rep_const) */            send_code(REP_3_6, bl_tree); send_bits(count-((3)-1), 2);
767: /* MUTANT (rep_const) */            send_code(REP_3_6, bl_tree); send_bits(count-3, 0);
767: /* MUTANT (rep_const) */            send_code(REP_3_6, bl_tree); send_bits(count-3, 1);
767: /* MUTANT (rep_const) */            send_code(REP_3_6, bl_tree); send_bits(count-3, -1);
767: /* MUTANT (rep_const) */            send_code(REP_3_6, bl_tree); send_bits(count-3, ((2)+1));
767: /* MUTANT (rep_const) */            send_code(REP_3_6, bl_tree); send_bits(count-3, ((2)-1));
769: /* MUTANT (rep_op) */        } else if (count < 10) {
769: /* MUTANT (rep_op) */        } else if (count > 10) {
769: /* MUTANT (rep_op) */        } else if (count >= 10) {
769: /* MUTANT (rep_op) */        } else if (count == 10) {
769: /* MUTANT (rep_op) */        } else if (count != 10) {
769: /* MUTANT (rep_const) */        } else if (count <= 0) {
769: /* MUTANT (rep_const) */        } else if (count <= 1) {
769: /* MUTANT (rep_const) */        } else if (count <= -1) {
769: /* MUTANT (rep_const) */        } else if (count <= ((10)+1)) {
769: /* MUTANT (rep_const) */        } else if (count <= ((10)-1)) {
769: /* MUTANT (negate) */        } else if(! (count <= 10)) {
770: /* MUTANT (del_stmt) */ /*             send_code(REPZ_3_10, bl_tree); */  send_bits(count-3, 3);
770: /* MUTANT (del_stmt) */ /*             send_code(REPZ_3_10, bl_tree); */  /*  send_bits(count-3, 3); */ 
770: /* MUTANT (del_stmt) */            send_code(REPZ_3_10, bl_tree); /*  send_bits(count-3, 3); */ 
770: /* MUTANT (rep_const) */            send_code(REPZ_3_10, bl_tree); send_bits(count-0, 3);
770: /* MUTANT (rep_const) */            send_code(REPZ_3_10, bl_tree); send_bits(count-1, 3);
770: /* MUTANT (rep_const) */            send_code(REPZ_3_10, bl_tree); send_bits(count--1, 3);
770: /* MUTANT (rep_const) */            send_code(REPZ_3_10, bl_tree); send_bits(count-((3)+1), 3);
770: /* MUTANT (rep_const) */            send_code(REPZ_3_10, bl_tree); send_bits(count-((3)-1), 3);
770: /* MUTANT (rep_const) */            send_code(REPZ_3_10, bl_tree); send_bits(count-3, 0);
770: /* MUTANT (rep_const) */            send_code(REPZ_3_10, bl_tree); send_bits(count-3, 1);
770: /* MUTANT (rep_const) */            send_code(REPZ_3_10, bl_tree); send_bits(count-3, -1);
770: /* MUTANT (rep_const) */            send_code(REPZ_3_10, bl_tree); send_bits(count-3, ((3)+1));
770: /* MUTANT (rep_const) */            send_code(REPZ_3_10, bl_tree); send_bits(count-3, ((3)-1));
773: /* MUTANT (del_stmt) */ /*             send_code(REPZ_11_138, bl_tree); */  send_bits(count-11, 7);
773: /* MUTANT (del_stmt) */ /*             send_code(REPZ_11_138, bl_tree); */  /*  send_bits(count-11, 7); */ 
773: /* MUTANT (del_stmt) */            send_code(REPZ_11_138, bl_tree); /*  send_bits(count-11, 7); */ 
773: /* MUTANT (rep_const) */            send_code(REPZ_11_138, bl_tree); send_bits(count-0, 7);
773: /* MUTANT (rep_const) */            send_code(REPZ_11_138, bl_tree); send_bits(count-1, 7);
773: /* MUTANT (rep_const) */            send_code(REPZ_11_138, bl_tree); send_bits(count--1, 7);
773: /* MUTANT (rep_const) */            send_code(REPZ_11_138, bl_tree); send_bits(count-((11)+1), 7);
773: /* MUTANT (rep_const) */            send_code(REPZ_11_138, bl_tree); send_bits(count-((11)-1), 7);
773: /* MUTANT (rep_const) */            send_code(REPZ_11_138, bl_tree); send_bits(count-11, 0);
773: /* MUTANT (rep_const) */            send_code(REPZ_11_138, bl_tree); send_bits(count-11, 1);
773: /* MUTANT (rep_const) */            send_code(REPZ_11_138, bl_tree); send_bits(count-11, -1);
773: /* MUTANT (rep_const) */            send_code(REPZ_11_138, bl_tree); send_bits(count-11, ((7)+1));
773: /* MUTANT (rep_const) */            send_code(REPZ_11_138, bl_tree); send_bits(count-11, ((7)-1));
775: /* MUTANT (rep_const) */        count = 1; prevlen = curlen;
775: /* MUTANT (rep_const) */        count = -1; prevlen = curlen;
776: /* MUTANT (rep_op) */        if (nextlen != 0) {
776: /* MUTANT (rep_const) */        if (nextlen == 1) {
776: /* MUTANT (rep_const) */        if (nextlen == -1) {
776: /* MUTANT (negate) */        if(! (nextlen == 0)) {
777: /* MUTANT (del_stmt) */ /*             max_count = 138, min_count = 3; */ 
777: /* MUTANT (rep_const) */            max_count = 0, min_count = 3;
777: /* MUTANT (rep_const) */            max_count = 1, min_count = 3;
777: /* MUTANT (rep_const) */            max_count = -1, min_count = 3;
777: /* MUTANT (rep_const) */            max_count = ((138)+1), min_count = 3;
777: /* MUTANT (rep_const) */            max_count = ((138)-1), min_count = 3;
777: /* MUTANT (rep_const) */            max_count = 138, min_count = 0;
777: /* MUTANT (rep_const) */            max_count = 138, min_count = 1;
777: /* MUTANT (rep_const) */            max_count = 138, min_count = -1;
777: /* MUTANT (rep_const) */            max_count = 138, min_count = ((3)+1);
777: /* MUTANT (rep_const) */            max_count = 138, min_count = ((3)-1);
778: /* MUTANT (rep_op) */        } else if (curlen != nextlen) {
778: /* MUTANT (negate) */        } else if(! (curlen == nextlen)) {
779: /* MUTANT (del_stmt) */ /*             max_count = 6, min_count = 3; */ 
779: /* MUTANT (rep_const) */            max_count = 0, min_count = 3;
779: /* MUTANT (rep_const) */            max_count = 1, min_count = 3;
779: /* MUTANT (rep_const) */            max_count = -1, min_count = 3;
779: /* MUTANT (rep_const) */            max_count = ((6)+1), min_count = 3;
779: /* MUTANT (rep_const) */            max_count = ((6)-1), min_count = 3;
779: /* MUTANT (rep_const) */            max_count = 6, min_count = 0;
779: /* MUTANT (rep_const) */            max_count = 6, min_count = 1;
779: /* MUTANT (rep_const) */            max_count = 6, min_count = -1;
779: /* MUTANT (rep_const) */            max_count = 6, min_count = ((3)+1);
779: /* MUTANT (rep_const) */            max_count = 6, min_count = ((3)-1);
781: /* MUTANT (del_stmt) */ /*             max_count = 7, min_count = 4; */ 
781: /* MUTANT (rep_const) */            max_count = 0, min_count = 4;
781: /* MUTANT (rep_const) */            max_count = 1, min_count = 4;
781: /* MUTANT (rep_const) */            max_count = -1, min_count = 4;
781: /* MUTANT (rep_const) */            max_count = ((7)+1), min_count = 4;
781: /* MUTANT (rep_const) */            max_count = ((7)-1), min_count = 4;
781: /* MUTANT (rep_const) */            max_count = 7, min_count = 0;
781: /* MUTANT (rep_const) */            max_count = 7, min_count = 1;
781: /* MUTANT (rep_const) */            max_count = 7, min_count = -1;
781: /* MUTANT (rep_const) */            max_count = 7, min_count = ((4)+1);
781: /* MUTANT (rep_const) */            max_count = 7, min_count = ((4)-1);
792: /* MUTANT (del_stmt) */ /*     int max_blindex; */   /* index of last bit length code of non zero freq */
795: /* MUTANT (del_stmt) */ /*     scan_tree((ct_data near *)dyn_ltree, l_desc.max_code); */ 
796: /* MUTANT (del_stmt) */ /*     scan_tree((ct_data near *)dyn_dtree, d_desc.max_code); */ 
799: /* MUTANT (del_stmt) */ /*     build_tree((tree_desc near *)(&bl_desc)); */ 
808: /* MUTANT (rep_op) */    for (max_blindex = BL_CODES-1; max_blindex <= 3; max_blindex--) {
808: /* MUTANT (rep_op) */    for (max_blindex = BL_CODES-1; max_blindex < 3; max_blindex--) {
808: /* MUTANT (rep_op) */    for (max_blindex = BL_CODES-1; max_blindex > 3; max_blindex--) {
808: /* MUTANT (rep_op) */    for (max_blindex = BL_CODES-1; max_blindex == 3; max_blindex--) {
808: /* MUTANT (rep_op) */    for (max_blindex = BL_CODES-1; max_blindex != 3; max_blindex--) {
808: /* MUTANT (rep_op) */    for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex++) {
808: /* MUTANT (rep_const) */    for (max_blindex = BL_CODES-0; max_blindex >= 3; max_blindex--) {
808: /* MUTANT (rep_const) */    for (max_blindex = BL_CODES--1; max_blindex >= 3; max_blindex--) {
808: /* MUTANT (rep_const) */    for (max_blindex = BL_CODES-((1)+1); max_blindex >= 3; max_blindex--) {
808: /* MUTANT (rep_const) */    for (max_blindex = BL_CODES-1; max_blindex >= 0; max_blindex--) {
808: /* MUTANT (rep_const) */    for (max_blindex = BL_CODES-1; max_blindex >= 1; max_blindex--) {
808: /* MUTANT (rep_const) */    for (max_blindex = BL_CODES-1; max_blindex >= -1; max_blindex--) {
808: /* MUTANT (rep_const) */    for (max_blindex = BL_CODES-1; max_blindex >= ((3)+1); max_blindex--) {
808: /* MUTANT (rep_const) */    for (max_blindex = BL_CODES-1; max_blindex >= ((3)-1); max_blindex--) {
809: /* MUTANT (del_stmt) */ /*         if (bl_tree[bl_order[max_blindex]].Len != 0) break; */ 
809: /* MUTANT (rep_op) */        if (bl_tree[bl_order[max_blindex]].Len == 0) break;
809: /* MUTANT (rep_const) */        if (bl_tree[bl_order[max_blindex]].Len != 1) break;
809: /* MUTANT (rep_const) */        if (bl_tree[bl_order[max_blindex]].Len != -1) break;
809: /* MUTANT (negate) */        if(! (bl_tree[bl_order[max_blindex]].Len != 0)) break;
812: /* MUTANT (rep_op) */    opt_len -= 3*(max_blindex+1) + 5+5+4;
812: /* MUTANT (rep_op) */    opt_len *= 3*(max_blindex+1) + 5+5+4;
812: /* MUTANT (rep_op) */    opt_len %= 3*(max_blindex+1) + 5+5+4;
812: /* MUTANT (rep_op) */    opt_len += 3*(max_blindex-1) + 5+5+4;
812: /* MUTANT (rep_op) */    opt_len += 3*(max_blindex*1) + 5+5+4;
812: /* MUTANT (rep_op) */    opt_len += 3*(max_blindex%1) + 5+5+4;
812: /* MUTANT (rep_op) */    opt_len += 3*(max_blindex+1) - 5+5+4;
812: /* MUTANT (rep_op) */    opt_len += 3*(max_blindex+1) * 5+5+4;
812: /* MUTANT (rep_op) */    opt_len += 3*(max_blindex+1) % 5+5+4;
812: /* MUTANT (rep_op) */    opt_len += 3*(max_blindex+1) + 5-5+4;
812: /* MUTANT (rep_op) */    opt_len += 3*(max_blindex+1) + 5*5+4;
812: /* MUTANT (rep_op) */    opt_len += 3*(max_blindex+1) + 5%5+4;
812: /* MUTANT (rep_op) */    opt_len += 3*(max_blindex+1) + 5+5-4;
812: /* MUTANT (rep_op) */    opt_len += 3*(max_blindex+1) + 5+5*4;
812: /* MUTANT (rep_op) */    opt_len += 3*(max_blindex+1) + 5+5%4;
812: /* MUTANT (rep_const) */    opt_len += 0*(max_blindex+1) + 5+5+4;
812: /* MUTANT (rep_const) */    opt_len += 1*(max_blindex+1) + 5+5+4;
812: /* MUTANT (rep_const) */    opt_len += -1*(max_blindex+1) + 5+5+4;
812: /* MUTANT (rep_const) */    opt_len += ((3)+1)*(max_blindex+1) + 5+5+4;
812: /* MUTANT (rep_const) */    opt_len += ((3)-1)*(max_blindex+1) + 5+5+4;
812: /* MUTANT (rep_const) */    opt_len += 3*(max_blindex+0) + 5+5+4;
812: /* MUTANT (rep_const) */    opt_len += 3*(max_blindex+-1) + 5+5+4;
812: /* MUTANT (rep_const) */    opt_len += 3*(max_blindex+((1)+1)) + 5+5+4;
812: /* MUTANT (rep_const) */    opt_len += 3*(max_blindex+1) + 0+5+4;
812: /* MUTANT (rep_const) */    opt_len += 3*(max_blindex+1) + 1+5+4;
812: /* MUTANT (rep_const) */    opt_len += 3*(max_blindex+1) + -1+5+4;
812: /* MUTANT (rep_const) */    opt_len += 3*(max_blindex+1) + ((5)+1)+5+4;
812: /* MUTANT (rep_const) */    opt_len += 3*(max_blindex+1) + ((5)-1)+5+4;
812: /* MUTANT (rep_const) */    opt_len += 3*(max_blindex+1) + 5+0+4;
812: /* MUTANT (rep_const) */    opt_len += 3*(max_blindex+1) + 5+1+4;
812: /* MUTANT (rep_const) */    opt_len += 3*(max_blindex+1) + 5+-1+4;
812: /* MUTANT (rep_const) */    opt_len += 3*(max_blindex+1) + 5+((5)+1)+4;
812: /* MUTANT (rep_const) */    opt_len += 3*(max_blindex+1) + 5+((5)-1)+4;
812: /* MUTANT (rep_const) */    opt_len += 3*(max_blindex+1) + 5+5+0;
812: /* MUTANT (rep_const) */    opt_len += 3*(max_blindex+1) + 5+5+1;
812: /* MUTANT (rep_const) */    opt_len += 3*(max_blindex+1) + 5+5+-1;
812: /* MUTANT (rep_const) */    opt_len += 3*(max_blindex+1) + 5+5+((4)+1);
812: /* MUTANT (rep_const) */    opt_len += 3*(max_blindex+1) + 5+5+((4)-1);
813: /* MUTANT (del_stmt) */ /*     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld", opt_len, static_len)); */ 
815: /* MUTANT (del_stmt) */ /*     return max_blindex; */ 
826: /* MUTANT (del_stmt) */ /*     int rank; */                     /* index in bl_order */
828: /* MUTANT (del_stmt) */ /*     Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes"); */ 
828: /* MUTANT (rep_op) */    Assert (lcodes <= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
828: /* MUTANT (rep_op) */    Assert (lcodes < 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
828: /* MUTANT (rep_op) */    Assert (lcodes > 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
828: /* MUTANT (rep_op) */    Assert (lcodes == 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
828: /* MUTANT (rep_op) */    Assert (lcodes != 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
828: /* MUTANT (rep_op) */    Assert (lcodes >= 257 || dcodes >= 1 && blcodes >= 4, "not enough codes");
828: /* MUTANT (rep_op) */    Assert (lcodes >= 257 && dcodes <= 1 && blcodes >= 4, "not enough codes");
828: /* MUTANT (rep_op) */    Assert (lcodes >= 257 && dcodes < 1 && blcodes >= 4, "not enough codes");
828: /* MUTANT (rep_op) */    Assert (lcodes >= 257 && dcodes > 1 && blcodes >= 4, "not enough codes");
828: /* MUTANT (rep_op) */    Assert (lcodes >= 257 && dcodes == 1 && blcodes >= 4, "not enough codes");
828: /* MUTANT (rep_op) */    Assert (lcodes >= 257 && dcodes != 1 && blcodes >= 4, "not enough codes");
828: /* MUTANT (rep_op) */    Assert (lcodes >= 257 && dcodes >= 1 || blcodes >= 4, "not enough codes");
828: /* MUTANT (rep_op) */    Assert (lcodes >= 257 && dcodes >= 1 && blcodes <= 4, "not enough codes");
828: /* MUTANT (rep_op) */    Assert (lcodes >= 257 && dcodes >= 1 && blcodes < 4, "not enough codes");
828: /* MUTANT (rep_op) */    Assert (lcodes >= 257 && dcodes >= 1 && blcodes > 4, "not enough codes");
828: /* MUTANT (rep_op) */    Assert (lcodes >= 257 && dcodes >= 1 && blcodes == 4, "not enough codes");
828: /* MUTANT (rep_op) */    Assert (lcodes >= 257 && dcodes >= 1 && blcodes != 4, "not enough codes");
828: /* MUTANT (rep_const) */    Assert (lcodes >= 0 && dcodes >= 1 && blcodes >= 4, "not enough codes");
828: /* MUTANT (rep_const) */    Assert (lcodes >= 1 && dcodes >= 1 && blcodes >= 4, "not enough codes");
828: /* MUTANT (rep_const) */    Assert (lcodes >= -1 && dcodes >= 1 && blcodes >= 4, "not enough codes");
828: /* MUTANT (rep_const) */    Assert (lcodes >= ((257)+1) && dcodes >= 1 && blcodes >= 4, "not enough codes");
828: /* MUTANT (rep_const) */    Assert (lcodes >= ((257)-1) && dcodes >= 1 && blcodes >= 4, "not enough codes");
828: /* MUTANT (rep_const) */    Assert (lcodes >= 257 && dcodes >= 0 && blcodes >= 4, "not enough codes");
828: /* MUTANT (rep_const) */    Assert (lcodes >= 257 && dcodes >= -1 && blcodes >= 4, "not enough codes");
828: /* MUTANT (rep_const) */    Assert (lcodes >= 257 && dcodes >= ((1)+1) && blcodes >= 4, "not enough codes");
828: /* MUTANT (rep_const) */    Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 0, "not enough codes");
828: /* MUTANT (rep_const) */    Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 1, "not enough codes");
828: /* MUTANT (rep_const) */    Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= -1, "not enough codes");
828: /* MUTANT (rep_const) */    Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= ((4)+1), "not enough codes");
828: /* MUTANT (rep_const) */    Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= ((4)-1), "not enough codes");
829: /* MUTANT (rep_op) */    Assert (lcodes < L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
829: /* MUTANT (rep_op) */    Assert (lcodes > L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
829: /* MUTANT (rep_op) */    Assert (lcodes >= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
829: /* MUTANT (rep_op) */    Assert (lcodes == L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
829: /* MUTANT (rep_op) */    Assert (lcodes != L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
829: /* MUTANT (rep_op) */    Assert (lcodes <= L_CODES || dcodes <= D_CODES && blcodes <= BL_CODES,
829: /* MUTANT (rep_op) */    Assert (lcodes <= L_CODES && dcodes < D_CODES && blcodes <= BL_CODES,
829: /* MUTANT (rep_op) */    Assert (lcodes <= L_CODES && dcodes > D_CODES && blcodes <= BL_CODES,
829: /* MUTANT (rep_op) */    Assert (lcodes <= L_CODES && dcodes >= D_CODES && blcodes <= BL_CODES,
829: /* MUTANT (rep_op) */    Assert (lcodes <= L_CODES && dcodes == D_CODES && blcodes <= BL_CODES,
829: /* MUTANT (rep_op) */    Assert (lcodes <= L_CODES && dcodes != D_CODES && blcodes <= BL_CODES,
829: /* MUTANT (rep_op) */    Assert (lcodes <= L_CODES && dcodes <= D_CODES || blcodes <= BL_CODES,
829: /* MUTANT (rep_op) */    Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes < BL_CODES,
829: /* MUTANT (rep_op) */    Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes > BL_CODES,
829: /* MUTANT (rep_op) */    Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes >= BL_CODES,
829: /* MUTANT (rep_op) */    Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes == BL_CODES,
829: /* MUTANT (rep_op) */    Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes != BL_CODES,
831: /* MUTANT (del_stmt) */ /*     Tracev((stderr, "\nbl counts: ")); */ 
832: /* MUTANT (del_stmt) */ /*     send_bits(lcodes-257, 5); */  /* not +255 as stated in appnote.txt */
832: /* MUTANT (rep_const) */    send_bits(lcodes-0, 5); /* not +255 as stated in appnote.txt */
832: /* MUTANT (rep_const) */    send_bits(lcodes-1, 5); /* not +255 as stated in appnote.txt */
832: /* MUTANT (rep_const) */    send_bits(lcodes--1, 5); /* not +255 as stated in appnote.txt */
832: /* MUTANT (rep_const) */    send_bits(lcodes-((257)+1), 5); /* not +255 as stated in appnote.txt */
832: /* MUTANT (rep_const) */    send_bits(lcodes-((257)-1), 5); /* not +255 as stated in appnote.txt */
832: /* MUTANT (rep_const) */    send_bits(lcodes-257, 0); /* not +255 as stated in appnote.txt */
832: /* MUTANT (rep_const) */    send_bits(lcodes-257, 1); /* not +255 as stated in appnote.txt */
832: /* MUTANT (rep_const) */    send_bits(lcodes-257, -1); /* not +255 as stated in appnote.txt */
832: /* MUTANT (rep_const) */    send_bits(lcodes-257, ((5)+1)); /* not +255 as stated in appnote.txt */
832: /* MUTANT (rep_const) */    send_bits(lcodes-257, ((5)-1)); /* not +255 as stated in appnote.txt */
833: /* MUTANT (del_stmt) */ /*     send_bits(dcodes-1,   5); */ 
833: /* MUTANT (rep_const) */    send_bits(dcodes-0,   5);
833: /* MUTANT (rep_const) */    send_bits(dcodes--1,   5);
833: /* MUTANT (rep_const) */    send_bits(dcodes-((1)+1),   5);
833: /* MUTANT (rep_const) */    send_bits(dcodes-1,   0);
833: /* MUTANT (rep_const) */    send_bits(dcodes-1,   1);
833: /* MUTANT (rep_const) */    send_bits(dcodes-1,   -1);
833: /* MUTANT (rep_const) */    send_bits(dcodes-1,   ((5)+1));
833: /* MUTANT (rep_const) */    send_bits(dcodes-1,   ((5)-1));
834: /* MUTANT (del_stmt) */ /*     send_bits(blcodes-4,  4); */  /* not -3 as stated in appnote.txt */
834: /* MUTANT (rep_const) */    send_bits(blcodes-0,  4); /* not -3 as stated in appnote.txt */
834: /* MUTANT (rep_const) */    send_bits(blcodes-1,  4); /* not -3 as stated in appnote.txt */
834: /* MUTANT (rep_const) */    send_bits(blcodes--1,  4); /* not -3 as stated in appnote.txt */
834: /* MUTANT (rep_const) */    send_bits(blcodes-((4)+1),  4); /* not -3 as stated in appnote.txt */
834: /* MUTANT (rep_const) */    send_bits(blcodes-((4)-1),  4); /* not -3 as stated in appnote.txt */
834: /* MUTANT (rep_const) */    send_bits(blcodes-4,  0); /* not -3 as stated in appnote.txt */
834: /* MUTANT (rep_const) */    send_bits(blcodes-4,  1); /* not -3 as stated in appnote.txt */
834: /* MUTANT (rep_const) */    send_bits(blcodes-4,  -1); /* not -3 as stated in appnote.txt */
834: /* MUTANT (rep_const) */    send_bits(blcodes-4,  ((4)+1)); /* not -3 as stated in appnote.txt */
834: /* MUTANT (rep_const) */    send_bits(blcodes-4,  ((4)-1)); /* not -3 as stated in appnote.txt */
835: /* MUTANT (rep_op) */    for (rank = 0; rank <= blcodes; rank++) {
835: /* MUTANT (rep_op) */    for (rank = 0; rank > blcodes; rank++) {
835: /* MUTANT (rep_op) */    for (rank = 0; rank >= blcodes; rank++) {
835: /* MUTANT (rep_op) */    for (rank = 0; rank == blcodes; rank++) {
835: /* MUTANT (rep_op) */    for (rank = 0; rank != blcodes; rank++) {
835: /* MUTANT (rep_op) */    for (rank = 0; rank < blcodes; rank--) {
835: /* MUTANT (rep_const) */    for (rank = 1; rank < blcodes; rank++) {
835: /* MUTANT (rep_const) */    for (rank = -1; rank < blcodes; rank++) {
836: /* MUTANT (del_stmt) */ /*         Tracev((stderr, "\nbl code %2d ", bl_order[rank])); */ 
836: /* MUTANT (rep_const) */        Tracev((stderr, "\nbl code %0d ", bl_order[rank]));
836: /* MUTANT (rep_const) */        Tracev((stderr, "\nbl code %1d ", bl_order[rank]));
836: /* MUTANT (rep_const) */        Tracev((stderr, "\nbl code %-1d ", bl_order[rank]));
836: /* MUTANT (rep_const) */        Tracev((stderr, "\nbl code %((2)+1)d ", bl_order[rank]));
836: /* MUTANT (rep_const) */        Tracev((stderr, "\nbl code %((2)-1)d ", bl_order[rank]));
837: /* MUTANT (del_stmt) */ /*         send_bits(bl_tree[bl_order[rank]].Len, 3); */ 
837: /* MUTANT (rep_const) */        send_bits(bl_tree[bl_order[rank]].Len, 0);
837: /* MUTANT (rep_const) */        send_bits(bl_tree[bl_order[rank]].Len, 1);
837: /* MUTANT (rep_const) */        send_bits(bl_tree[bl_order[rank]].Len, -1);
837: /* MUTANT (rep_const) */        send_bits(bl_tree[bl_order[rank]].Len, ((3)+1));
837: /* MUTANT (rep_const) */        send_bits(bl_tree[bl_order[rank]].Len, ((3)-1));
841: /* MUTANT (del_stmt) */ /*     send_tree((ct_data near *)dyn_ltree, lcodes-1); */  /* send the literal tree */
841: /* MUTANT (rep_const) */    send_tree((ct_data near *)dyn_ltree, lcodes-0); /* send the literal tree */
841: /* MUTANT (rep_const) */    send_tree((ct_data near *)dyn_ltree, lcodes--1); /* send the literal tree */
841: /* MUTANT (rep_const) */    send_tree((ct_data near *)dyn_ltree, lcodes-((1)+1)); /* send the literal tree */
842: /* MUTANT (del_stmt) */ /*     Tracev((stderr, "\nlit tree: sent %ld", bits_sent)); */ 
844: /* MUTANT (del_stmt) */ /*     send_tree((ct_data near *)dyn_dtree, dcodes-1); */  /* send the distance tree */
844: /* MUTANT (rep_const) */    send_tree((ct_data near *)dyn_dtree, dcodes-0); /* send the distance tree */
844: /* MUTANT (rep_const) */    send_tree((ct_data near *)dyn_dtree, dcodes--1); /* send the distance tree */
844: /* MUTANT (rep_const) */    send_tree((ct_data near *)dyn_dtree, dcodes-((1)+1)); /* send the distance tree */
845: /* MUTANT (del_stmt) */ /*     Tracev((stderr, "\ndist tree: sent %ld", bits_sent)); */ 
855: /* MUTANT (del_stmt) */ /*     ulg stored_len; */    /* length of input block */
856: /* MUTANT (del_stmt) */ /*     int eof; */           /* true if this is the last block for a file */
858: /* MUTANT (del_stmt) */ /*     ulg opt_lenb, static_lenb; */  /* opt_len and static_len in bytes */
859: /* MUTANT (del_stmt) */ /*     int max_blindex; */   /* index of last bit length code of non zero freq */
861: /* MUTANT (del_stmt) */ /*     flag_buf[last_flags] = flags; */  /* Save the flags for the last 8 items */
864: /* MUTANT (del_stmt) */ /*     if (*file_type == (ush)UNKNOWN) set_file_type(); */ 
864: /* MUTANT (rep_op) */    if (*file_type != (ush)UNKNOWN) set_file_type();
864: /* MUTANT (negate) */    if(! (*file_type == (ush)UNKNOWN)) set_file_type();
867: /* MUTANT (del_stmt) */ /*     build_tree((tree_desc near *)(&l_desc)); */ 
868: /* MUTANT (del_stmt) */ /*     Tracev((stderr, "\nlit data: dyn %ld, stat %ld", opt_len, static_len)); */ 
870: /* MUTANT (del_stmt) */ /*     build_tree((tree_desc near *)(&d_desc)); */ 
871: /* MUTANT (del_stmt) */ /*     Tracev((stderr, "\ndist data: dyn %ld, stat %ld", opt_len, static_len)); */ 
879: /* MUTANT (del_stmt) */ /*     max_blindex = build_bl_tree(); */ 
882: /* MUTANT (del_stmt) */ /*     opt_lenb = (opt_len+3+7)>>3; */ 
882: /* MUTANT (rep_op) */    opt_lenb = (opt_len-3+7)>>3;
882: /* MUTANT (rep_op) */    opt_lenb = (opt_len*3+7)>>3;
882: /* MUTANT (rep_op) */    opt_lenb = (opt_len%3+7)>>3;
882: /* MUTANT (rep_op) */    opt_lenb = (opt_len+3-7)>>3;
882: /* MUTANT (rep_op) */    opt_lenb = (opt_len+3*7)>>3;
882: /* MUTANT (rep_op) */    opt_lenb = (opt_len+3%7)>>3;
882: /* MUTANT (rep_const) */    opt_lenb = (opt_len+0+7)>>3;
882: /* MUTANT (rep_const) */    opt_lenb = (opt_len+1+7)>>3;
882: /* MUTANT (rep_const) */    opt_lenb = (opt_len+-1+7)>>3;
882: /* MUTANT (rep_const) */    opt_lenb = (opt_len+((3)+1)+7)>>3;
882: /* MUTANT (rep_const) */    opt_lenb = (opt_len+((3)-1)+7)>>3;
882: /* MUTANT (rep_const) */    opt_lenb = (opt_len+3+0)>>3;
882: /* MUTANT (rep_const) */    opt_lenb = (opt_len+3+1)>>3;
882: /* MUTANT (rep_const) */    opt_lenb = (opt_len+3+-1)>>3;
882: /* MUTANT (rep_const) */    opt_lenb = (opt_len+3+((7)+1))>>3;
882: /* MUTANT (rep_const) */    opt_lenb = (opt_len+3+((7)-1))>>3;
882: /* MUTANT (rep_const) */    opt_lenb = (opt_len+3+7)>>0;
882: /* MUTANT (rep_const) */    opt_lenb = (opt_len+3+7)>>1;
882: /* MUTANT (rep_const) */    opt_lenb = (opt_len+3+7)>>-1;
882: /* MUTANT (rep_const) */    opt_lenb = (opt_len+3+7)>>((3)+1);
882: /* MUTANT (rep_const) */    opt_lenb = (opt_len+3+7)>>((3)-1);
883: /* MUTANT (del_stmt) */ /*     static_lenb = (static_len+3+7)>>3; */ 
883: /* MUTANT (rep_op) */    static_lenb = (static_len-3+7)>>3;
883: /* MUTANT (rep_op) */    static_lenb = (static_len*3+7)>>3;
883: /* MUTANT (rep_op) */    static_lenb = (static_len%3+7)>>3;
883: /* MUTANT (rep_op) */    static_lenb = (static_len+3-7)>>3;
883: /* MUTANT (rep_op) */    static_lenb = (static_len+3*7)>>3;
883: /* MUTANT (rep_op) */    static_lenb = (static_len+3%7)>>3;
883: /* MUTANT (rep_const) */    static_lenb = (static_len+0+7)>>3;
883: /* MUTANT (rep_const) */    static_lenb = (static_len+1+7)>>3;
883: /* MUTANT (rep_const) */    static_lenb = (static_len+-1+7)>>3;
883: /* MUTANT (rep_const) */    static_lenb = (static_len+((3)+1)+7)>>3;
883: /* MUTANT (rep_const) */    static_lenb = (static_len+((3)-1)+7)>>3;
883: /* MUTANT (rep_const) */    static_lenb = (static_len+3+0)>>3;
883: /* MUTANT (rep_const) */    static_lenb = (static_len+3+1)>>3;
883: /* MUTANT (rep_const) */    static_lenb = (static_len+3+-1)>>3;
883: /* MUTANT (rep_const) */    static_lenb = (static_len+3+((7)+1))>>3;
883: /* MUTANT (rep_const) */    static_lenb = (static_len+3+((7)-1))>>3;
883: /* MUTANT (rep_const) */    static_lenb = (static_len+3+7)>>0;
883: /* MUTANT (rep_const) */    static_lenb = (static_len+3+7)>>1;
883: /* MUTANT (rep_const) */    static_lenb = (static_len+3+7)>>-1;
883: /* MUTANT (rep_const) */    static_lenb = (static_len+3+7)>>((3)+1);
883: /* MUTANT (rep_const) */    static_lenb = (static_len+3+7)>>((3)-1);
884: /* MUTANT (del_stmt) */ /*     input_len += stored_len; */  /* for debugging only */
884: /* MUTANT (rep_op) */    input_len -= stored_len; /* for debugging only */
884: /* MUTANT (rep_op) */    input_len *= stored_len; /* for debugging only */
884: /* MUTANT (rep_op) */    input_len %= stored_len; /* for debugging only */
890: /* MUTANT (del_stmt) */ /*     if (static_lenb <= opt_lenb) opt_lenb = static_lenb; */ 
890: /* MUTANT (rep_op) */    if (static_lenb < opt_lenb) opt_lenb = static_lenb;
890: /* MUTANT (rep_op) */    if (static_lenb > opt_lenb) opt_lenb = static_lenb;
890: /* MUTANT (rep_op) */    if (static_lenb >= opt_lenb) opt_lenb = static_lenb;
890: /* MUTANT (rep_op) */    if (static_lenb == opt_lenb) opt_lenb = static_lenb;
890: /* MUTANT (rep_op) */    if (static_lenb != opt_lenb) opt_lenb = static_lenb;
890: /* MUTANT (negate) */    if(! (static_lenb <= opt_lenb)) opt_lenb = static_lenb;
897: /* MUTANT (rep_op) */    if (level != 1 && eof && compressed_len == 0L) { /* force stored file */
897: /* MUTANT (rep_op) */    if (level == 1 || eof && compressed_len == 0L) { /* force stored file */
897: /* MUTANT (rep_op) */    if (level == 1 && eof || compressed_len == 0L) { /* force stored file */
897: /* MUTANT (rep_op) */    if (level == 1 && eof && compressed_len != 0L) { /* force stored file */
897: /* MUTANT (rep_const) */    if (level == 0 && eof && compressed_len == 0L) { /* force stored file */
897: /* MUTANT (rep_const) */    if (level == -1 && eof && compressed_len == 0L) { /* force stored file */
897: /* MUTANT (rep_const) */    if (level == ((1)+1) && eof && compressed_len == 0L) { /* force stored file */
897: /* MUTANT (rep_const) */    if (level == 1 && eof && compressed_len == 1L) { /* force stored file */
897: /* MUTANT (rep_const) */    if (level == 1 && eof && compressed_len == -1L) { /* force stored file */
897: /* MUTANT (negate) */    if(! (level == 1 && eof && compressed_len == 0L)) { /* force stored file */
899: /* MUTANT (rep_op) */    if (stored_len < opt_lenb && eof && compressed_len == 0L && seekable()) {
899: /* MUTANT (rep_op) */    if (stored_len > opt_lenb && eof && compressed_len == 0L && seekable()) {
899: /* MUTANT (rep_op) */    if (stored_len >= opt_lenb && eof && compressed_len == 0L && seekable()) {
899: /* MUTANT (rep_op) */    if (stored_len == opt_lenb && eof && compressed_len == 0L && seekable()) {
899: /* MUTANT (rep_op) */    if (stored_len != opt_lenb && eof && compressed_len == 0L && seekable()) {
899: /* MUTANT (rep_op) */    if (stored_len <= opt_lenb || eof && compressed_len == 0L && seekable()) {
899: /* MUTANT (rep_op) */    if (stored_len <= opt_lenb && eof || compressed_len == 0L && seekable()) {
899: /* MUTANT (rep_op) */    if (stored_len <= opt_lenb && eof && compressed_len != 0L && seekable()) {
899: /* MUTANT (rep_op) */    if (stored_len <= opt_lenb && eof && compressed_len == 0L || seekable()) {
899: /* MUTANT (rep_const) */    if (stored_len <= opt_lenb && eof && compressed_len == 1L && seekable()) {
899: /* MUTANT (rep_const) */    if (stored_len <= opt_lenb && eof && compressed_len == -1L && seekable()) {
899: /* MUTANT (negate) */    if(! (stored_len <= opt_lenb && eof && compressed_len == 0L && seekable())) {
902: /* MUTANT (rep_op) */        if (buf != (char*)0) error ("block vanished");
902: /* MUTANT (rep_const) */        if (buf == (char*)1) error ("block vanished");
902: /* MUTANT (rep_const) */        if (buf == (char*)-1) error ("block vanished");
902: /* MUTANT (negate) */        if(! (buf == (char*)0)) error ("block vanished");
904: /* MUTANT (del_stmt) */ /*         copy_block(buf, (unsigned)stored_len, 0); */  /* without header */
904: /* MUTANT (rep_const) */        copy_block(buf, (unsigned)stored_len, 1); /* without header */
904: /* MUTANT (rep_const) */        copy_block(buf, (unsigned)stored_len, -1); /* without header */
905: /* MUTANT (del_stmt) */ /*         compressed_len = stored_len << 3; */ 
905: /* MUTANT (rep_const) */        compressed_len = stored_len << 0;
905: /* MUTANT (rep_const) */        compressed_len = stored_len << 1;
905: /* MUTANT (rep_const) */        compressed_len = stored_len << -1;
905: /* MUTANT (rep_const) */        compressed_len = stored_len << ((3)+1);
905: /* MUTANT (rep_const) */        compressed_len = stored_len << ((3)-1);
906: /* MUTANT (del_stmt) */ /*         *file_method = STORED; */ 
909: /* MUTANT (rep_op) */    } else if (level != 2 && buf != (char*)0) { /* force stored block */
909: /* MUTANT (rep_op) */    } else if (level == 2 || buf != (char*)0) { /* force stored block */
909: /* MUTANT (rep_op) */    } else if (level == 2 && buf == (char*)0) { /* force stored block */
909: /* MUTANT (rep_const) */    } else if (level == 0 && buf != (char*)0) { /* force stored block */
909: /* MUTANT (rep_const) */    } else if (level == 1 && buf != (char*)0) { /* force stored block */
909: /* MUTANT (rep_const) */    } else if (level == -1 && buf != (char*)0) { /* force stored block */
909: /* MUTANT (rep_const) */    } else if (level == ((2)+1) && buf != (char*)0) { /* force stored block */
909: /* MUTANT (rep_const) */    } else if (level == ((2)-1) && buf != (char*)0) { /* force stored block */
909: /* MUTANT (rep_const) */    } else if (level == 2 && buf != (char*)1) { /* force stored block */
909: /* MUTANT (rep_const) */    } else if (level == 2 && buf != (char*)-1) { /* force stored block */
909: /* MUTANT (negate) */    } else if(! (level == 2 && buf != (char*)0)) { /* force stored block */
911: /* MUTANT (rep_op) */    } else if (stored_len-4 <= opt_lenb && buf != (char*)0) {
911: /* MUTANT (rep_op) */    } else if (stored_len*4 <= opt_lenb && buf != (char*)0) {
911: /* MUTANT (rep_op) */    } else if (stored_len%4 <= opt_lenb && buf != (char*)0) {
911: /* MUTANT (rep_op) */    } else if (stored_len+4 < opt_lenb && buf != (char*)0) {
911: /* MUTANT (rep_op) */    } else if (stored_len+4 > opt_lenb && buf != (char*)0) {
911: /* MUTANT (rep_op) */    } else if (stored_len+4 >= opt_lenb && buf != (char*)0) {
911: /* MUTANT (rep_op) */    } else if (stored_len+4 == opt_lenb && buf != (char*)0) {
911: /* MUTANT (rep_op) */    } else if (stored_len+4 != opt_lenb && buf != (char*)0) {
911: /* MUTANT (rep_op) */    } else if (stored_len+4 <= opt_lenb || buf != (char*)0) {
911: /* MUTANT (rep_op) */    } else if (stored_len+4 <= opt_lenb && buf == (char*)0) {
911: /* MUTANT (rep_const) */    } else if (stored_len+0 <= opt_lenb && buf != (char*)0) {
911: /* MUTANT (rep_const) */    } else if (stored_len+1 <= opt_lenb && buf != (char*)0) {
911: /* MUTANT (rep_const) */    } else if (stored_len+-1 <= opt_lenb && buf != (char*)0) {
911: /* MUTANT (rep_const) */    } else if (stored_len+((4)+1) <= opt_lenb && buf != (char*)0) {
911: /* MUTANT (rep_const) */    } else if (stored_len+((4)-1) <= opt_lenb && buf != (char*)0) {
911: /* MUTANT (rep_const) */    } else if (stored_len+4 <= opt_lenb && buf != (char*)1) {
911: /* MUTANT (rep_const) */    } else if (stored_len+4 <= opt_lenb && buf != (char*)-1) {
911: /* MUTANT (negate) */    } else if(! (stored_len+4 <= opt_lenb && buf != (char*)0)) {
920: /* MUTANT (rep_op) */        send_bits((STORED_BLOCK<<1)-eof, 3);  /* send block type */
920: /* MUTANT (rep_op) */        send_bits((STORED_BLOCK<<1)*eof, 3);  /* send block type */
920: /* MUTANT (rep_op) */        send_bits((STORED_BLOCK<<1)%eof, 3);  /* send block type */
920: /* MUTANT (rep_const) */        send_bits((STORED_BLOCK<<0)+eof, 3);  /* send block type */
920: /* MUTANT (rep_const) */        send_bits((STORED_BLOCK<<-1)+eof, 3);  /* send block type */
920: /* MUTANT (rep_const) */        send_bits((STORED_BLOCK<<((1)+1))+eof, 3);  /* send block type */
920: /* MUTANT (rep_const) */        send_bits((STORED_BLOCK<<1)+eof, 0);  /* send block type */
920: /* MUTANT (rep_const) */        send_bits((STORED_BLOCK<<1)+eof, 1);  /* send block type */
920: /* MUTANT (rep_const) */        send_bits((STORED_BLOCK<<1)+eof, -1);  /* send block type */
920: /* MUTANT (rep_const) */        send_bits((STORED_BLOCK<<1)+eof, ((3)+1));  /* send block type */
920: /* MUTANT (rep_const) */        send_bits((STORED_BLOCK<<1)+eof, ((3)-1));  /* send block type */
921: /* MUTANT (del_stmt) */ /*         compressed_len = (compressed_len + 3 + 7) & ~7L; */ 
921: /* MUTANT (rep_op) */        compressed_len = (compressed_len - 3 + 7) & ~7L;
921: /* MUTANT (rep_op) */        compressed_len = (compressed_len * 3 + 7) & ~7L;
921: /* MUTANT (rep_op) */        compressed_len = (compressed_len % 3 + 7) & ~7L;
921: /* MUTANT (rep_op) */        compressed_len = (compressed_len + 3 - 7) & ~7L;
921: /* MUTANT (rep_op) */        compressed_len = (compressed_len + 3 * 7) & ~7L;
921: /* MUTANT (rep_op) */        compressed_len = (compressed_len + 3 % 7) & ~7L;
921: /* MUTANT (rep_const) */        compressed_len = (compressed_len + 0 + 7) & ~7L;
921: /* MUTANT (rep_const) */        compressed_len = (compressed_len + 1 + 7) & ~7L;
921: /* MUTANT (rep_const) */        compressed_len = (compressed_len + -1 + 7) & ~7L;
921: /* MUTANT (rep_const) */        compressed_len = (compressed_len + ((3)+1) + 7) & ~7L;
921: /* MUTANT (rep_const) */        compressed_len = (compressed_len + ((3)-1) + 7) & ~7L;
921: /* MUTANT (rep_const) */        compressed_len = (compressed_len + 3 + 0) & ~7L;
921: /* MUTANT (rep_const) */        compressed_len = (compressed_len + 3 + 1) & ~7L;
921: /* MUTANT (rep_const) */        compressed_len = (compressed_len + 3 + -1) & ~7L;
921: /* MUTANT (rep_const) */        compressed_len = (compressed_len + 3 + ((7)+1)) & ~7L;
921: /* MUTANT (rep_const) */        compressed_len = (compressed_len + 3 + ((7)-1)) & ~7L;
921: /* MUTANT (rep_const) */        compressed_len = (compressed_len + 3 + 7) & ~0L;
921: /* MUTANT (rep_const) */        compressed_len = (compressed_len + 3 + 7) & ~1L;
921: /* MUTANT (rep_const) */        compressed_len = (compressed_len + 3 + 7) & ~-1L;
921: /* MUTANT (rep_const) */        compressed_len = (compressed_len + 3 + 7) & ~((7)+1)L;
921: /* MUTANT (rep_const) */        compressed_len = (compressed_len + 3 + 7) & ~((7)-1)L;
922: /* MUTANT (del_stmt) */ /*         compressed_len += (stored_len + 4) << 3; */ 
922: /* MUTANT (rep_op) */        compressed_len -= (stored_len + 4) << 3;
922: /* MUTANT (rep_op) */        compressed_len *= (stored_len + 4) << 3;
922: /* MUTANT (rep_op) */        compressed_len %= (stored_len + 4) << 3;
922: /* MUTANT (rep_op) */        compressed_len += (stored_len - 4) << 3;
922: /* MUTANT (rep_op) */        compressed_len += (stored_len * 4) << 3;
922: /* MUTANT (rep_op) */        compressed_len += (stored_len % 4) << 3;
922: /* MUTANT (rep_const) */        compressed_len += (stored_len + 0) << 3;
922: /* MUTANT (rep_const) */        compressed_len += (stored_len + 1) << 3;
922: /* MUTANT (rep_const) */        compressed_len += (stored_len + -1) << 3;
922: /* MUTANT (rep_const) */        compressed_len += (stored_len + ((4)+1)) << 3;
922: /* MUTANT (rep_const) */        compressed_len += (stored_len + ((4)-1)) << 3;
922: /* MUTANT (rep_const) */        compressed_len += (stored_len + 4) << 0;
922: /* MUTANT (rep_const) */        compressed_len += (stored_len + 4) << 1;
922: /* MUTANT (rep_const) */        compressed_len += (stored_len + 4) << -1;
922: /* MUTANT (rep_const) */        compressed_len += (stored_len + 4) << ((3)+1);
922: /* MUTANT (rep_const) */        compressed_len += (stored_len + 4) << ((3)-1);
924: /* MUTANT (del_stmt) */ /*         copy_block(buf, (unsigned)stored_len, 1); */  /* with header */
924: /* MUTANT (rep_const) */        copy_block(buf, (unsigned)stored_len, 0); /* with header */
924: /* MUTANT (rep_const) */        copy_block(buf, (unsigned)stored_len, -1); /* with header */
924: /* MUTANT (rep_const) */        copy_block(buf, (unsigned)stored_len, ((1)+1)); /* with header */
927: /* MUTANT (rep_op) */    } else if (level != 3) { /* force static trees */
927: /* MUTANT (rep_const) */    } else if (level == 0) { /* force static trees */
927: /* MUTANT (rep_const) */    } else if (level == 1) { /* force static trees */
927: /* MUTANT (rep_const) */    } else if (level == -1) { /* force static trees */
927: /* MUTANT (rep_const) */    } else if (level == ((3)+1)) { /* force static trees */
927: /* MUTANT (rep_const) */    } else if (level == ((3)-1)) { /* force static trees */
927: /* MUTANT (negate) */    } else if(! (level == 3)) { /* force static trees */
929: /* MUTANT (rep_op) */    } else if (static_lenb != opt_lenb) {
929: /* MUTANT (negate) */    } else if(! (static_lenb == opt_lenb)) {
931: /* MUTANT (rep_op) */        send_bits((STATIC_TREES<<1)-eof, 3);
931: /* MUTANT (rep_op) */        send_bits((STATIC_TREES<<1)*eof, 3);
931: /* MUTANT (rep_op) */        send_bits((STATIC_TREES<<1)%eof, 3);
931: /* MUTANT (rep_const) */        send_bits((STATIC_TREES<<0)+eof, 3);
931: /* MUTANT (rep_const) */        send_bits((STATIC_TREES<<-1)+eof, 3);
931: /* MUTANT (rep_const) */        send_bits((STATIC_TREES<<((1)+1))+eof, 3);
931: /* MUTANT (rep_const) */        send_bits((STATIC_TREES<<1)+eof, 0);
931: /* MUTANT (rep_const) */        send_bits((STATIC_TREES<<1)+eof, 1);
931: /* MUTANT (rep_const) */        send_bits((STATIC_TREES<<1)+eof, -1);
931: /* MUTANT (rep_const) */        send_bits((STATIC_TREES<<1)+eof, ((3)+1));
931: /* MUTANT (rep_const) */        send_bits((STATIC_TREES<<1)+eof, ((3)-1));
932: /* MUTANT (del_stmt) */ /*         compress_block((ct_data near *)static_ltree, (ct_data near *)static_dtree); */ 
933: /* MUTANT (del_stmt) */ /*         compressed_len += 3 + static_len; */ 
933: /* MUTANT (rep_op) */        compressed_len -= 3 + static_len;
933: /* MUTANT (rep_op) */        compressed_len *= 3 + static_len;
933: /* MUTANT (rep_op) */        compressed_len %= 3 + static_len;
933: /* MUTANT (rep_op) */        compressed_len += 3 - static_len;
933: /* MUTANT (rep_op) */        compressed_len += 3 * static_len;
933: /* MUTANT (rep_op) */        compressed_len += 3 % static_len;
933: /* MUTANT (rep_const) */        compressed_len += 0 + static_len;
933: /* MUTANT (rep_const) */        compressed_len += 1 + static_len;
933: /* MUTANT (rep_const) */        compressed_len += -1 + static_len;
933: /* MUTANT (rep_const) */        compressed_len += ((3)+1) + static_len;
933: /* MUTANT (rep_const) */        compressed_len += ((3)-1) + static_len;
935: /* MUTANT (del_stmt) */ /*         send_bits((DYN_TREES<<1)+eof, 3); */ 
935: /* MUTANT (rep_op) */        send_bits((DYN_TREES<<1)-eof, 3);
935: /* MUTANT (rep_op) */        send_bits((DYN_TREES<<1)*eof, 3);
935: /* MUTANT (rep_op) */        send_bits((DYN_TREES<<1)%eof, 3);
935: /* MUTANT (rep_const) */        send_bits((DYN_TREES<<0)+eof, 3);
935: /* MUTANT (rep_const) */        send_bits((DYN_TREES<<-1)+eof, 3);
935: /* MUTANT (rep_const) */        send_bits((DYN_TREES<<((1)+1))+eof, 3);
935: /* MUTANT (rep_const) */        send_bits((DYN_TREES<<1)+eof, 0);
935: /* MUTANT (rep_const) */        send_bits((DYN_TREES<<1)+eof, 1);
935: /* MUTANT (rep_const) */        send_bits((DYN_TREES<<1)+eof, -1);
935: /* MUTANT (rep_const) */        send_bits((DYN_TREES<<1)+eof, ((3)+1));
935: /* MUTANT (rep_const) */        send_bits((DYN_TREES<<1)+eof, ((3)-1));
936: /* MUTANT (del_stmt) */ /*         send_all_trees(l_desc.max_code+1, d_desc.max_code+1, max_blindex+1); */ 
936: /* MUTANT (rep_op) */        send_all_trees(l_desc.max_code-1, d_desc.max_code+1, max_blindex+1);
936: /* MUTANT (rep_op) */        send_all_trees(l_desc.max_code*1, d_desc.max_code+1, max_blindex+1);
936: /* MUTANT (rep_op) */        send_all_trees(l_desc.max_code%1, d_desc.max_code+1, max_blindex+1);
936: /* MUTANT (rep_op) */        send_all_trees(l_desc.max_code+1, d_desc.max_code-1, max_blindex+1);
936: /* MUTANT (rep_op) */        send_all_trees(l_desc.max_code+1, d_desc.max_code*1, max_blindex+1);
936: /* MUTANT (rep_op) */        send_all_trees(l_desc.max_code+1, d_desc.max_code%1, max_blindex+1);
936: /* MUTANT (rep_op) */        send_all_trees(l_desc.max_code+1, d_desc.max_code+1, max_blindex-1);
936: /* MUTANT (rep_op) */        send_all_trees(l_desc.max_code+1, d_desc.max_code+1, max_blindex*1);
936: /* MUTANT (rep_op) */        send_all_trees(l_desc.max_code+1, d_desc.max_code+1, max_blindex%1);
936: /* MUTANT (rep_const) */        send_all_trees(l_desc.max_code+0, d_desc.max_code+1, max_blindex+1);
936: /* MUTANT (rep_const) */        send_all_trees(l_desc.max_code+-1, d_desc.max_code+1, max_blindex+1);
936: /* MUTANT (rep_const) */        send_all_trees(l_desc.max_code+((1)+1), d_desc.max_code+1, max_blindex+1);
936: /* MUTANT (rep_const) */        send_all_trees(l_desc.max_code+1, d_desc.max_code+0, max_blindex+1);
936: /* MUTANT (rep_const) */        send_all_trees(l_desc.max_code+1, d_desc.max_code+-1, max_blindex+1);
936: /* MUTANT (rep_const) */        send_all_trees(l_desc.max_code+1, d_desc.max_code+((1)+1), max_blindex+1);
936: /* MUTANT (rep_const) */        send_all_trees(l_desc.max_code+1, d_desc.max_code+1, max_blindex+0);
936: /* MUTANT (rep_const) */        send_all_trees(l_desc.max_code+1, d_desc.max_code+1, max_blindex+-1);
936: /* MUTANT (rep_const) */        send_all_trees(l_desc.max_code+1, d_desc.max_code+1, max_blindex+((1)+1));
937: /* MUTANT (del_stmt) */ /*         compress_block((ct_data near *)dyn_ltree, (ct_data near *)dyn_dtree); */ 
938: /* MUTANT (del_stmt) */ /*         compressed_len += 3 + opt_len; */ 
938: /* MUTANT (rep_op) */        compressed_len -= 3 + opt_len;
938: /* MUTANT (rep_op) */        compressed_len *= 3 + opt_len;
938: /* MUTANT (rep_op) */        compressed_len %= 3 + opt_len;
938: /* MUTANT (rep_op) */        compressed_len += 3 - opt_len;
938: /* MUTANT (rep_op) */        compressed_len += 3 * opt_len;
938: /* MUTANT (rep_op) */        compressed_len += 3 % opt_len;
938: /* MUTANT (rep_const) */        compressed_len += 0 + opt_len;
938: /* MUTANT (rep_const) */        compressed_len += 1 + opt_len;
938: /* MUTANT (rep_const) */        compressed_len += -1 + opt_len;
938: /* MUTANT (rep_const) */        compressed_len += ((3)+1) + opt_len;
938: /* MUTANT (rep_const) */        compressed_len += ((3)-1) + opt_len;
940: /* MUTANT (rep_op) */    Assert (compressed_len != bits_sent, "bad compressed size");
941: /* MUTANT (del_stmt) */ /*     init_block(); */ 
943: /* MUTANT (negate) */    if(! (eof)) {
944: /* MUTANT (del_stmt) */ /*         Assert (input_len == isize, "bad input size"); */ 
944: /* MUTANT (rep_op) */        Assert (input_len != isize, "bad input size");
945: /* MUTANT (del_stmt) */ /*         bi_windup(); */ 
946: /* MUTANT (del_stmt) */ /*         compressed_len += 7; */   /* align on byte boundary */
946: /* MUTANT (rep_op) */        compressed_len -= 7;  /* align on byte boundary */
946: /* MUTANT (rep_op) */        compressed_len *= 7;  /* align on byte boundary */
946: /* MUTANT (rep_op) */        compressed_len %= 7;  /* align on byte boundary */
946: /* MUTANT (rep_const) */        compressed_len += 0;  /* align on byte boundary */
946: /* MUTANT (rep_const) */        compressed_len += 1;  /* align on byte boundary */
946: /* MUTANT (rep_const) */        compressed_len += -1;  /* align on byte boundary */
946: /* MUTANT (rep_const) */        compressed_len += ((7)+1);  /* align on byte boundary */
946: /* MUTANT (rep_const) */        compressed_len += ((7)-1);  /* align on byte boundary */
948: /* MUTANT (rep_const) */    Tracev((stderr,"\ncomprlen %lu(%lu) ", compressed_len>>0,
948: /* MUTANT (rep_const) */    Tracev((stderr,"\ncomprlen %lu(%lu) ", compressed_len>>1,
948: /* MUTANT (rep_const) */    Tracev((stderr,"\ncomprlen %lu(%lu) ", compressed_len>>-1,
948: /* MUTANT (rep_const) */    Tracev((stderr,"\ncomprlen %lu(%lu) ", compressed_len>>((3)+1),
948: /* MUTANT (rep_const) */    Tracev((stderr,"\ncomprlen %lu(%lu) ", compressed_len>>((3)-1),
949: /* MUTANT (rep_const) */           compressed_len-0*eof));
949: /* MUTANT (rep_const) */           compressed_len-1*eof));
949: /* MUTANT (rep_const) */           compressed_len--1*eof));
949: /* MUTANT (rep_const) */           compressed_len-((7)+1)*eof));
949: /* MUTANT (rep_const) */           compressed_len-((7)-1)*eof));
951: /* MUTANT (del_stmt) */ /*     return compressed_len >> 3; */ 
951: /* MUTANT (rep_const) */    return compressed_len >> 0;
951: /* MUTANT (rep_const) */    return compressed_len >> 1;
951: /* MUTANT (rep_const) */    return compressed_len >> -1;
951: /* MUTANT (rep_const) */    return compressed_len >> ((3)+1);
951: /* MUTANT (rep_const) */    return compressed_len >> ((3)-1);
960: /* MUTANT (del_stmt) */ /*     int lc; */     /* match length-MIN_MATCH or unmatched char (if dist==0) */
962: /* MUTANT (del_stmt) */ /*     l_buf[last_lit++] = (uch)lc; */ 
962: /* MUTANT (rep_op) */    l_buf[last_lit--] = (uch)lc;
963: /* MUTANT (rep_op) */    if (dist != 0) {
963: /* MUTANT (rep_const) */    if (dist == 1) {
963: /* MUTANT (rep_const) */    if (dist == -1) {
963: /* MUTANT (negate) */    if(! (dist == 0)) {
965: /* MUTANT (del_stmt) */ /*         dyn_ltree[lc].Freq++; */ 
965: /* MUTANT (rep_op) */        dyn_ltree[lc].Freq--;
968: /* MUTANT (del_stmt) */ /*         dist--; */              /* dist = match distance - 1 */
968: /* MUTANT (rep_op) */        dist++;             /* dist = match distance - 1 */
969: /* MUTANT (rep_op) */        Assert((ush)dist <= (ush)MAX_DIST &&
969: /* MUTANT (rep_op) */        Assert((ush)dist > (ush)MAX_DIST &&
969: /* MUTANT (rep_op) */        Assert((ush)dist >= (ush)MAX_DIST &&
969: /* MUTANT (rep_op) */        Assert((ush)dist == (ush)MAX_DIST &&
969: /* MUTANT (rep_op) */        Assert((ush)dist != (ush)MAX_DIST &&
969: /* MUTANT (rep_op) */        Assert((ush)dist < (ush)MAX_DIST ||
970: /* MUTANT (rep_op) */               (ush)lc < (ush)(MAX_MATCH-MIN_MATCH) &&
970: /* MUTANT (rep_op) */               (ush)lc > (ush)(MAX_MATCH-MIN_MATCH) &&
970: /* MUTANT (rep_op) */               (ush)lc >= (ush)(MAX_MATCH-MIN_MATCH) &&
970: /* MUTANT (rep_op) */               (ush)lc == (ush)(MAX_MATCH-MIN_MATCH) &&
970: /* MUTANT (rep_op) */               (ush)lc != (ush)(MAX_MATCH-MIN_MATCH) &&
970: /* MUTANT (rep_op) */               (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) ||
971: /* MUTANT (rep_op) */               (ush)d_code(dist) <= (ush)D_CODES,  "ct_tally: bad match");
971: /* MUTANT (rep_op) */               (ush)d_code(dist) > (ush)D_CODES,  "ct_tally: bad match");
971: /* MUTANT (rep_op) */               (ush)d_code(dist) >= (ush)D_CODES,  "ct_tally: bad match");
971: /* MUTANT (rep_op) */               (ush)d_code(dist) == (ush)D_CODES,  "ct_tally: bad match");
971: /* MUTANT (rep_op) */               (ush)d_code(dist) != (ush)D_CODES,  "ct_tally: bad match");
973: /* MUTANT (del_stmt) */ /*         dyn_ltree[length_code[lc]+LITERALS+1].Freq++; */ 
973: /* MUTANT (rep_op) */        dyn_ltree[length_code[lc]-LITERALS+1].Freq++;
973: /* MUTANT (rep_op) */        dyn_ltree[length_code[lc]*LITERALS+1].Freq++;
973: /* MUTANT (rep_op) */        dyn_ltree[length_code[lc]%LITERALS+1].Freq++;
973: /* MUTANT (rep_op) */        dyn_ltree[length_code[lc]+LITERALS-1].Freq++;
973: /* MUTANT (rep_op) */        dyn_ltree[length_code[lc]+LITERALS*1].Freq++;
973: /* MUTANT (rep_op) */        dyn_ltree[length_code[lc]+LITERALS%1].Freq++;
973: /* MUTANT (rep_op) */        dyn_ltree[length_code[lc]+LITERALS+1].Freq--;
973: /* MUTANT (rep_const) */        dyn_ltree[length_code[lc]+LITERALS+0].Freq++;
973: /* MUTANT (rep_const) */        dyn_ltree[length_code[lc]+LITERALS+-1].Freq++;
973: /* MUTANT (rep_const) */        dyn_ltree[length_code[lc]+LITERALS+((1)+1)].Freq++;
974: /* MUTANT (del_stmt) */ /*         dyn_dtree[d_code(dist)].Freq++; */ 
974: /* MUTANT (rep_op) */        dyn_dtree[d_code(dist)].Freq--;
976: /* MUTANT (del_stmt) */ /*         d_buf[last_dist++] = (ush)dist; */ 
976: /* MUTANT (rep_op) */        d_buf[last_dist--] = (ush)dist;
977: /* MUTANT (del_stmt) */ /*         flags |= flag_bit; */ 
979: /* MUTANT (rep_const) */    flag_bit <<= 0;
979: /* MUTANT (rep_const) */    flag_bit <<= -1;
979: /* MUTANT (rep_const) */    flag_bit <<= ((1)+1);
982: /* MUTANT (rep_op) */    if ((last_lit & 7) != 0) {
982: /* MUTANT (rep_const) */    if ((last_lit & 0) == 0) {
982: /* MUTANT (rep_const) */    if ((last_lit & 1) == 0) {
982: /* MUTANT (rep_const) */    if ((last_lit & -1) == 0) {
982: /* MUTANT (rep_const) */    if ((last_lit & ((7)+1)) == 0) {
982: /* MUTANT (rep_const) */    if ((last_lit & ((7)-1)) == 0) {
982: /* MUTANT (rep_const) */    if ((last_lit & 7) == 1) {
982: /* MUTANT (rep_const) */    if ((last_lit & 7) == -1) {
982: /* MUTANT (negate) */    if(! ((last_lit & 7) == 0)) {
983: /* MUTANT (del_stmt) */ /*         flag_buf[last_flags++] = flags; */ 
983: /* MUTANT (rep_op) */        flag_buf[last_flags--] = flags;
984: /* MUTANT (del_stmt) */ /*         flags = 0, flag_bit = 1; */ 
984: /* MUTANT (rep_const) */        flags = 1, flag_bit = 1;
984: /* MUTANT (rep_const) */        flags = -1, flag_bit = 1;
984: /* MUTANT (rep_const) */        flags = 0, flag_bit = 0;
984: /* MUTANT (rep_const) */        flags = 0, flag_bit = -1;
984: /* MUTANT (rep_const) */        flags = 0, flag_bit = ((1)+1);
987: /* MUTANT (rep_op) */    if (level <= 2 && (last_lit & 0xfff) == 0) {
987: /* MUTANT (rep_op) */    if (level < 2 && (last_lit & 0xfff) == 0) {
987: /* MUTANT (rep_op) */    if (level >= 2 && (last_lit & 0xfff) == 0) {
987: /* MUTANT (rep_op) */    if (level == 2 && (last_lit & 0xfff) == 0) {
987: /* MUTANT (rep_op) */    if (level != 2 && (last_lit & 0xfff) == 0) {
987: /* MUTANT (rep_op) */    if (level > 2 || (last_lit & 0xfff) == 0) {
987: /* MUTANT (rep_op) */    if (level > 2 && (last_lit & 0xfff) != 0) {
987: /* MUTANT (rep_const) */    if (level > 0 && (last_lit & 0xfff) == 0) {
987: /* MUTANT (rep_const) */    if (level > 1 && (last_lit & 0xfff) == 0) {
987: /* MUTANT (rep_const) */    if (level > -1 && (last_lit & 0xfff) == 0) {
987: /* MUTANT (rep_const) */    if (level > ((2)+1) && (last_lit & 0xfff) == 0) {
987: /* MUTANT (rep_const) */    if (level > ((2)-1) && (last_lit & 0xfff) == 0) {
987: /* MUTANT (rep_const) */    if (level > 2 && (last_lit & 1xfff) == 0) {
987: /* MUTANT (rep_const) */    if (level > 2 && (last_lit & -1xfff) == 0) {
987: /* MUTANT (rep_const) */    if (level > 2 && (last_lit & 0xfff) == 1) {
987: /* MUTANT (rep_const) */    if (level > 2 && (last_lit & 0xfff) == -1) {
987: /* MUTANT (negate) */    if(! (level > 2 && (last_lit & 0xfff) == 0)) {
989: /* MUTANT (del_stmt) */ /*         ulg out_length = (ulg)last_lit*8L; */ 
989: /* MUTANT (rep_const) */        ulg out_length = (ulg)last_lit*0L;
989: /* MUTANT (rep_const) */        ulg out_length = (ulg)last_lit*1L;
989: /* MUTANT (rep_const) */        ulg out_length = (ulg)last_lit*-1L;
989: /* MUTANT (rep_const) */        ulg out_length = (ulg)last_lit*((8)+1)L;
989: /* MUTANT (rep_const) */        ulg out_length = (ulg)last_lit*((8)-1)L;
990: /* MUTANT (del_stmt) */ /*         ulg in_length = (ulg)strstart-block_start; */ 
991: /* MUTANT (del_stmt) */ /*         int dcode; */ 
992: /* MUTANT (rep_op) */        for (dcode = 0; dcode <= D_CODES; dcode++) {
992: /* MUTANT (rep_op) */        for (dcode = 0; dcode > D_CODES; dcode++) {
992: /* MUTANT (rep_op) */        for (dcode = 0; dcode >= D_CODES; dcode++) {
992: /* MUTANT (rep_op) */        for (dcode = 0; dcode == D_CODES; dcode++) {
992: /* MUTANT (rep_op) */        for (dcode = 0; dcode != D_CODES; dcode++) {
992: /* MUTANT (rep_op) */        for (dcode = 0; dcode < D_CODES; dcode--) {
992: /* MUTANT (rep_const) */        for (dcode = 1; dcode < D_CODES; dcode++) {
992: /* MUTANT (rep_const) */        for (dcode = -1; dcode < D_CODES; dcode++) {
993: /* MUTANT (del_stmt) */ /*             out_length += (ulg)dyn_dtree[dcode].Freq*(5L+extra_dbits[dcode]); */ 
993: /* MUTANT (rep_op) */            out_length -= (ulg)dyn_dtree[dcode].Freq*(5L+extra_dbits[dcode]);
993: /* MUTANT (rep_op) */            out_length *= (ulg)dyn_dtree[dcode].Freq*(5L+extra_dbits[dcode]);
993: /* MUTANT (rep_op) */            out_length %= (ulg)dyn_dtree[dcode].Freq*(5L+extra_dbits[dcode]);
993: /* MUTANT (rep_op) */            out_length += (ulg)dyn_dtree[dcode].Freq*(5L-extra_dbits[dcode]);
993: /* MUTANT (rep_op) */            out_length += (ulg)dyn_dtree[dcode].Freq*(5L*extra_dbits[dcode]);
993: /* MUTANT (rep_op) */            out_length += (ulg)dyn_dtree[dcode].Freq*(5L%extra_dbits[dcode]);
993: /* MUTANT (rep_const) */            out_length += (ulg)dyn_dtree[dcode].Freq*(0L+extra_dbits[dcode]);
993: /* MUTANT (rep_const) */            out_length += (ulg)dyn_dtree[dcode].Freq*(1L+extra_dbits[dcode]);
993: /* MUTANT (rep_const) */            out_length += (ulg)dyn_dtree[dcode].Freq*(-1L+extra_dbits[dcode]);
993: /* MUTANT (rep_const) */            out_length += (ulg)dyn_dtree[dcode].Freq*(((5)+1)L+extra_dbits[dcode]);
993: /* MUTANT (rep_const) */            out_length += (ulg)dyn_dtree[dcode].Freq*(((5)-1)L+extra_dbits[dcode]);
995: /* MUTANT (rep_const) */        out_length >>= 0;
995: /* MUTANT (rep_const) */        out_length >>= 1;
995: /* MUTANT (rep_const) */        out_length >>= -1;
995: /* MUTANT (rep_const) */        out_length >>= ((3)+1);
995: /* MUTANT (rep_const) */        out_length >>= ((3)-1);
998: /* MUTANT (rep_const) */               0L - out_length*100L/in_length));
998: /* MUTANT (rep_const) */               1L - out_length*100L/in_length));
998: /* MUTANT (rep_const) */               -1L - out_length*100L/in_length));
998: /* MUTANT (rep_const) */               ((100)+1)L - out_length*100L/in_length));
998: /* MUTANT (rep_const) */               ((100)-1)L - out_length*100L/in_length));
998: /* MUTANT (rep_const) */               100L - out_length*0L/in_length));
998: /* MUTANT (rep_const) */               100L - out_length*1L/in_length));
998: /* MUTANT (rep_const) */               100L - out_length*-1L/in_length));
998: /* MUTANT (rep_const) */               100L - out_length*((100)+1)L/in_length));
998: /* MUTANT (rep_const) */               100L - out_length*((100)-1)L/in_length));
999: /* MUTANT (del_stmt) */ /*         if (last_dist < last_lit/2 && out_length < in_length/2) return 1; */ 
999: /* MUTANT (rep_op) */        if (last_dist <= last_lit/2 && out_length < in_length/2) return 1;
999: /* MUTANT (rep_op) */        if (last_dist > last_lit/2 && out_length < in_length/2) return 1;
999: /* MUTANT (rep_op) */        if (last_dist >= last_lit/2 && out_length < in_length/2) return 1;
999: /* MUTANT (rep_op) */        if (last_dist == last_lit/2 && out_length < in_length/2) return 1;
999: /* MUTANT (rep_op) */        if (last_dist != last_lit/2 && out_length < in_length/2) return 1;
999: /* MUTANT (rep_op) */        if (last_dist < last_lit/2 || out_length < in_length/2) return 1;
999: /* MUTANT (rep_op) */        if (last_dist < last_lit/2 && out_length <= in_length/2) return 1;
999: /* MUTANT (rep_op) */        if (last_dist < last_lit/2 && out_length > in_length/2) return 1;
999: /* MUTANT (rep_op) */        if (last_dist < last_lit/2 && out_length >= in_length/2) return 1;
999: /* MUTANT (rep_op) */        if (last_dist < last_lit/2 && out_length == in_length/2) return 1;
999: /* MUTANT (rep_op) */        if (last_dist < last_lit/2 && out_length != in_length/2) return 1;
999: /* MUTANT (rep_const) */        if (last_dist < last_lit/0 && out_length < in_length/2) return 1;
999: /* MUTANT (rep_const) */        if (last_dist < last_lit/1 && out_length < in_length/2) return 1;
999: /* MUTANT (rep_const) */        if (last_dist < last_lit/-1 && out_length < in_length/2) return 1;
999: /* MUTANT (rep_const) */        if (last_dist < last_lit/((2)+1) && out_length < in_length/2) return 1;
999: /* MUTANT (rep_const) */        if (last_dist < last_lit/((2)-1) && out_length < in_length/2) return 1;
999: /* MUTANT (rep_const) */        if (last_dist < last_lit/2 && out_length < in_length/0) return 1;
999: /* MUTANT (rep_const) */        if (last_dist < last_lit/2 && out_length < in_length/1) return 1;
999: /* MUTANT (rep_const) */        if (last_dist < last_lit/2 && out_length < in_length/-1) return 1;
999: /* MUTANT (rep_const) */        if (last_dist < last_lit/2 && out_length < in_length/((2)+1)) return 1;
999: /* MUTANT (rep_const) */        if (last_dist < last_lit/2 && out_length < in_length/((2)-1)) return 1;
999: /* MUTANT (rep_const) */        if (last_dist < last_lit/2 && out_length < in_length/2) return 0;
999: /* MUTANT (rep_const) */        if (last_dist < last_lit/2 && out_length < in_length/2) return -1;
999: /* MUTANT (rep_const) */        if (last_dist < last_lit/2 && out_length < in_length/2) return ((1)+1);
999: /* MUTANT (negate) */        if(! (last_dist < last_lit/2 && out_length < in_length/2)) return 1;
1001: /* MUTANT (rep_op) */    return (last_lit != LIT_BUFSIZE-1 || last_dist == DIST_BUFSIZE);
1001: /* MUTANT (rep_op) */    return (last_lit == LIT_BUFSIZE-1 && last_dist == DIST_BUFSIZE);
1001: /* MUTANT (rep_op) */    return (last_lit == LIT_BUFSIZE-1 || last_dist != DIST_BUFSIZE);
1001: /* MUTANT (rep_const) */    return (last_lit == LIT_BUFSIZE-0 || last_dist == DIST_BUFSIZE);
1001: /* MUTANT (rep_const) */    return (last_lit == LIT_BUFSIZE--1 || last_dist == DIST_BUFSIZE);
1001: /* MUTANT (rep_const) */    return (last_lit == LIT_BUFSIZE-((1)+1) || last_dist == DIST_BUFSIZE);
1013: /* MUTANT (del_stmt) */ /*     ct_data near *dtree; */  /* distance tree */
1015: /* MUTANT (del_stmt) */ /*     unsigned dist; */       /* distance of matched string */
1016: /* MUTANT (del_stmt) */ /*     int lc; */              /* match length or unmatched char (if dist == 0) */
1017: /* MUTANT (del_stmt) */ /*     unsigned lx = 0; */     /* running index in l_buf */
1017: /* MUTANT (rep_const) */    unsigned lx = 1;    /* running index in l_buf */
1017: /* MUTANT (rep_const) */    unsigned lx = -1;    /* running index in l_buf */
1018: /* MUTANT (del_stmt) */ /*     unsigned dx = 0; */     /* running index in d_buf */
1018: /* MUTANT (rep_const) */    unsigned dx = 1;    /* running index in d_buf */
1018: /* MUTANT (rep_const) */    unsigned dx = -1;    /* running index in d_buf */
1019: /* MUTANT (del_stmt) */ /*     unsigned fx = 0; */     /* running index in flag_buf */
1019: /* MUTANT (rep_const) */    unsigned fx = 1;    /* running index in flag_buf */
1019: /* MUTANT (rep_const) */    unsigned fx = -1;    /* running index in flag_buf */
1020: /* MUTANT (del_stmt) */ /*     uch flag = 0; */        /* current flags */
1020: /* MUTANT (rep_const) */    uch flag = 1;       /* current flags */
1020: /* MUTANT (rep_const) */    uch flag = -1;       /* current flags */
1021: /* MUTANT (del_stmt) */ /*     unsigned code; */       /* the code to send */
1022: /* MUTANT (del_stmt) */ /*     int extra; */           /* number of extra bits to send */
1024: /* MUTANT (rep_op) */    if (last_lit == 0) do {
1024: /* MUTANT (rep_const) */    if (last_lit != 1) do {
1024: /* MUTANT (rep_const) */    if (last_lit != -1) do {
1024: /* MUTANT (negate) */    if(! (last_lit != 0)) do {
1025: /* MUTANT (del_stmt) */ /*         if ((lx & 7) == 0) flag = flag_buf[fx++]; */ 
1025: /* MUTANT (rep_op) */        if ((lx & 7) != 0) flag = flag_buf[fx++];
1025: /* MUTANT (rep_op) */        if ((lx & 7) == 0) flag = flag_buf[fx--];
1025: /* MUTANT (rep_const) */        if ((lx & 0) == 0) flag = flag_buf[fx++];
1025: /* MUTANT (rep_const) */        if ((lx & 1) == 0) flag = flag_buf[fx++];
1025: /* MUTANT (rep_const) */        if ((lx & -1) == 0) flag = flag_buf[fx++];
1025: /* MUTANT (rep_const) */        if ((lx & ((7)+1)) == 0) flag = flag_buf[fx++];
1025: /* MUTANT (rep_const) */        if ((lx & ((7)-1)) == 0) flag = flag_buf[fx++];
1025: /* MUTANT (rep_const) */        if ((lx & 7) == 1) flag = flag_buf[fx++];
1025: /* MUTANT (rep_const) */        if ((lx & 7) == -1) flag = flag_buf[fx++];
1025: /* MUTANT (negate) */        if(! ((lx & 7) == 0)) flag = flag_buf[fx++];
1026: /* MUTANT (del_stmt) */ /*         lc = l_buf[lx++]; */ 
1026: /* MUTANT (rep_op) */        lc = l_buf[lx--];
1027: /* MUTANT (rep_op) */        if ((flag & 1) != 0) {
1027: /* MUTANT (rep_const) */        if ((flag & 0) == 0) {
1027: /* MUTANT (rep_const) */        if ((flag & -1) == 0) {
1027: /* MUTANT (rep_const) */        if ((flag & ((1)+1)) == 0) {
1027: /* MUTANT (rep_const) */        if ((flag & 1) == 1) {
1027: /* MUTANT (rep_const) */        if ((flag & 1) == -1) {
1027: /* MUTANT (negate) */        if(! ((flag & 1) == 0)) {
1028: /* MUTANT (del_stmt) */ /*             send_code(lc, ltree); */  /* send a literal byte */
1029: /* MUTANT (del_stmt) */ /*             Tracecv(isgraph(lc), (stderr," '%c' ", lc)); */ 
1032: /* MUTANT (del_stmt) */ /*             code = length_code[lc]; */ 
1033: /* MUTANT (del_stmt) */ /*             send_code(code+LITERALS+1, ltree); */  /* send the length code */
1033: /* MUTANT (rep_op) */            send_code(code-LITERALS+1, ltree); /* send the length code */
1033: /* MUTANT (rep_op) */            send_code(code*LITERALS+1, ltree); /* send the length code */
1033: /* MUTANT (rep_op) */            send_code(code%LITERALS+1, ltree); /* send the length code */
1033: /* MUTANT (rep_op) */            send_code(code+LITERALS-1, ltree); /* send the length code */
1033: /* MUTANT (rep_op) */            send_code(code+LITERALS*1, ltree); /* send the length code */
1033: /* MUTANT (rep_op) */            send_code(code+LITERALS%1, ltree); /* send the length code */
1033: /* MUTANT (rep_const) */            send_code(code+LITERALS+0, ltree); /* send the length code */
1033: /* MUTANT (rep_const) */            send_code(code+LITERALS+-1, ltree); /* send the length code */
1033: /* MUTANT (rep_const) */            send_code(code+LITERALS+((1)+1), ltree); /* send the length code */
1034: /* MUTANT (del_stmt) */ /*             extra = extra_lbits[code]; */ 
1035: /* MUTANT (rep_op) */            if (extra == 0) {
1035: /* MUTANT (rep_const) */            if (extra != 1) {
1035: /* MUTANT (rep_const) */            if (extra != -1) {
1035: /* MUTANT (negate) */            if(! (extra != 0)) {
1036: /* MUTANT (del_stmt) */ /*                 lc -= base_length[code]; */ 
1036: /* MUTANT (rep_op) */                lc += base_length[code];
1036: /* MUTANT (rep_op) */                lc *= base_length[code];
1036: /* MUTANT (rep_op) */                lc %= base_length[code];
1037: /* MUTANT (del_stmt) */ /*                 send_bits(lc, extra); */         /* send the extra length bits */
1039: /* MUTANT (rep_op) */            dist = d_buf[dx--];
1041: /* MUTANT (del_stmt) */ /*             code = d_code(dist); */ 
1042: /* MUTANT (del_stmt) */ /*             Assert (code < D_CODES, "bad d_code"); */ 
1042: /* MUTANT (rep_op) */            Assert (code <= D_CODES, "bad d_code");
1042: /* MUTANT (rep_op) */            Assert (code > D_CODES, "bad d_code");
1042: /* MUTANT (rep_op) */            Assert (code >= D_CODES, "bad d_code");
1042: /* MUTANT (rep_op) */            Assert (code == D_CODES, "bad d_code");
1042: /* MUTANT (rep_op) */            Assert (code != D_CODES, "bad d_code");
1044: /* MUTANT (del_stmt) */ /*             send_code(code, dtree); */        /* send the distance code */
1045: /* MUTANT (del_stmt) */ /*             extra = extra_dbits[code]; */ 
1046: /* MUTANT (rep_op) */            if (extra == 0) {
1046: /* MUTANT (rep_const) */            if (extra != 1) {
1046: /* MUTANT (rep_const) */            if (extra != -1) {
1046: /* MUTANT (negate) */            if(! (extra != 0)) {
1047: /* MUTANT (del_stmt) */ /*                 dist -= base_dist[code]; */ 
1047: /* MUTANT (rep_op) */                dist += base_dist[code];
1047: /* MUTANT (rep_op) */                dist *= base_dist[code];
1047: /* MUTANT (rep_op) */                dist %= base_dist[code];
1048: /* MUTANT (del_stmt) */ /*                 send_bits(dist, extra); */    /* send the extra distance bits */
1051: /* MUTANT (rep_const) */        flag >>= 0;
1051: /* MUTANT (rep_const) */        flag >>= -1;
1051: /* MUTANT (rep_const) */        flag >>= ((1)+1);
1052: /* MUTANT (del_stmt) */ /*     } while (lx < last_lit); */ 
1052: /* MUTANT (rep_op) */    } while (lx <= last_lit);
1052: /* MUTANT (rep_op) */    } while (lx > last_lit);
1052: /* MUTANT (rep_op) */    } while (lx >= last_lit);
1052: /* MUTANT (rep_op) */    } while (lx == last_lit);
1052: /* MUTANT (rep_op) */    } while (lx != last_lit);
1052: /* MUTANT (negate) */    } while(! (lx < last_lit));
1054: /* MUTANT (del_stmt) */ /*     send_code(END_BLOCK, ltree); */ 
1065: /* MUTANT (del_stmt) */ /*     int n = 0; */ 
1065: /* MUTANT (rep_const) */    int n = 1;
1065: /* MUTANT (rep_const) */    int n = -1;
1066: /* MUTANT (del_stmt) */ /*     unsigned ascii_freq = 0; */ 
1066: /* MUTANT (rep_const) */    unsigned ascii_freq = 1;
1066: /* MUTANT (rep_const) */    unsigned ascii_freq = -1;
1067: /* MUTANT (del_stmt) */ /*     unsigned bin_freq = 0; */ 
1067: /* MUTANT (rep_const) */    unsigned bin_freq = 1;
1067: /* MUTANT (rep_const) */    unsigned bin_freq = -1;
1068: /* MUTANT (del_stmt) */ /*     while (n < 7)        bin_freq += dyn_ltree[n++].Freq; */ 
1068: /* MUTANT (rep_op) */    while (n <= 7)        bin_freq += dyn_ltree[n++].Freq;
1068: /* MUTANT (rep_op) */    while (n > 7)        bin_freq += dyn_ltree[n++].Freq;
1068: /* MUTANT (rep_op) */    while (n >= 7)        bin_freq += dyn_ltree[n++].Freq;
1068: /* MUTANT (rep_op) */    while (n == 7)        bin_freq += dyn_ltree[n++].Freq;
1068: /* MUTANT (rep_op) */    while (n != 7)        bin_freq += dyn_ltree[n++].Freq;
1068: /* MUTANT (rep_op) */    while (n < 7)        bin_freq -= dyn_ltree[n++].Freq;
1068: /* MUTANT (rep_op) */    while (n < 7)        bin_freq *= dyn_ltree[n++].Freq;
1068: /* MUTANT (rep_op) */    while (n < 7)        bin_freq %= dyn_ltree[n++].Freq;
1068: /* MUTANT (rep_op) */    while (n < 7)        bin_freq += dyn_ltree[n--].Freq;
1068: /* MUTANT (rep_const) */    while (n < 0)        bin_freq += dyn_ltree[n++].Freq;
1068: /* MUTANT (rep_const) */    while (n < 1)        bin_freq += dyn_ltree[n++].Freq;
1068: /* MUTANT (rep_const) */    while (n < -1)        bin_freq += dyn_ltree[n++].Freq;
1068: /* MUTANT (rep_const) */    while (n < ((7)+1))        bin_freq += dyn_ltree[n++].Freq;
1068: /* MUTANT (rep_const) */    while (n < ((7)-1))        bin_freq += dyn_ltree[n++].Freq;
1068: /* MUTANT (negate) */    while(! (n < 7))        bin_freq += dyn_ltree[n++].Freq;
1069: /* MUTANT (del_stmt) */ /*     while (n < 128)    ascii_freq += dyn_ltree[n++].Freq; */ 
1069: /* MUTANT (rep_op) */    while (n <= 128)    ascii_freq += dyn_ltree[n++].Freq;
1069: /* MUTANT (rep_op) */    while (n > 128)    ascii_freq += dyn_ltree[n++].Freq;
1069: /* MUTANT (rep_op) */    while (n >= 128)    ascii_freq += dyn_ltree[n++].Freq;
1069: /* MUTANT (rep_op) */    while (n == 128)    ascii_freq += dyn_ltree[n++].Freq;
1069: /* MUTANT (rep_op) */    while (n != 128)    ascii_freq += dyn_ltree[n++].Freq;
1069: /* MUTANT (rep_op) */    while (n < 128)    ascii_freq -= dyn_ltree[n++].Freq;
1069: /* MUTANT (rep_op) */    while (n < 128)    ascii_freq *= dyn_ltree[n++].Freq;
1069: /* MUTANT (rep_op) */    while (n < 128)    ascii_freq %= dyn_ltree[n++].Freq;
1069: /* MUTANT (rep_op) */    while (n < 128)    ascii_freq += dyn_ltree[n--].Freq;
1069: /* MUTANT (rep_const) */    while (n < 0)    ascii_freq += dyn_ltree[n++].Freq;
1069: /* MUTANT (rep_const) */    while (n < 1)    ascii_freq += dyn_ltree[n++].Freq;
1069: /* MUTANT (rep_const) */    while (n < -1)    ascii_freq += dyn_ltree[n++].Freq;
1069: /* MUTANT (rep_const) */    while (n < ((128)+1))    ascii_freq += dyn_ltree[n++].Freq;
1069: /* MUTANT (rep_const) */    while (n < ((128)-1))    ascii_freq += dyn_ltree[n++].Freq;
1069: /* MUTANT (negate) */    while(! (n < 128))    ascii_freq += dyn_ltree[n++].Freq;
1070: /* MUTANT (del_stmt) */ /*     while (n < LITERALS) bin_freq += dyn_ltree[n++].Freq; */ 
1070: /* MUTANT (rep_op) */    while (n <= LITERALS) bin_freq += dyn_ltree[n++].Freq;
1070: /* MUTANT (rep_op) */    while (n > LITERALS) bin_freq += dyn_ltree[n++].Freq;
1070: /* MUTANT (rep_op) */    while (n >= LITERALS) bin_freq += dyn_ltree[n++].Freq;
1070: /* MUTANT (rep_op) */    while (n == LITERALS) bin_freq += dyn_ltree[n++].Freq;
1070: /* MUTANT (rep_op) */    while (n != LITERALS) bin_freq += dyn_ltree[n++].Freq;
1070: /* MUTANT (rep_op) */    while (n < LITERALS) bin_freq -= dyn_ltree[n++].Freq;
1070: /* MUTANT (rep_op) */    while (n < LITERALS) bin_freq *= dyn_ltree[n++].Freq;
1070: /* MUTANT (rep_op) */    while (n < LITERALS) bin_freq %= dyn_ltree[n++].Freq;
1070: /* MUTANT (rep_op) */    while (n < LITERALS) bin_freq += dyn_ltree[n--].Freq;
1070: /* MUTANT (negate) */    while(! (n < LITERALS)) bin_freq += dyn_ltree[n++].Freq;
1071: /* MUTANT (del_stmt) */ /*     *file_type = bin_freq > (ascii_freq >> 2) ? BINARY : ASCII; */ 
1071: /* MUTANT (rep_op) */    *file_type = bin_freq <= (ascii_freq >> 2) ? BINARY : ASCII;
1071: /* MUTANT (rep_op) */    *file_type = bin_freq < (ascii_freq >> 2) ? BINARY : ASCII;
1071: /* MUTANT (rep_op) */    *file_type = bin_freq >= (ascii_freq >> 2) ? BINARY : ASCII;
1071: /* MUTANT (rep_op) */    *file_type = bin_freq == (ascii_freq >> 2) ? BINARY : ASCII;
1071: /* MUTANT (rep_op) */    *file_type = bin_freq != (ascii_freq >> 2) ? BINARY : ASCII;
1071: /* MUTANT (rep_const) */    *file_type = bin_freq > (ascii_freq >> 0) ? BINARY : ASCII;
1071: /* MUTANT (rep_const) */    *file_type = bin_freq > (ascii_freq >> 1) ? BINARY : ASCII;
1071: /* MUTANT (rep_const) */    *file_type = bin_freq > (ascii_freq >> -1) ? BINARY : ASCII;
1071: /* MUTANT (rep_const) */    *file_type = bin_freq > (ascii_freq >> ((2)+1)) ? BINARY : ASCII;
1071: /* MUTANT (rep_const) */    *file_type = bin_freq > (ascii_freq >> ((2)-1)) ? BINARY : ASCII;
1072: /* MUTANT (rep_op) */    if (*file_type != BINARY && translate_eol) {
1072: /* MUTANT (rep_op) */    if (*file_type == BINARY || translate_eol) {
1072: /* MUTANT (negate) */    if(! (*file_type == BINARY && translate_eol)) {
1073: /* MUTANT (del_stmt) */ /*         warn("-l used on binary file", ""); */ 
